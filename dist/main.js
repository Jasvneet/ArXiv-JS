/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/cs.js":
/*!*******************!*\
  !*** ./src/cs.js ***!
  \*******************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchComputerScience: function() { return /* binding */ fetchComputerScience; }\n/* harmony export */ });\nfunction fetchComputerScience() {\n  const csCategories = ['cs.AI', 'cs.AR', 'cs.CC', 'cs.CE', 'cs.CG', 'cs.CL', 'cs.CR', 'cs.CV', 'cs.CY', 'cs.DB', 'cs.DC', 'cs.DL', 'cs.DM', 'cs.DS', 'cs.ET', 'cs.FL', 'cs.GL', 'cs.GR', 'cs.GT', 'cs.HC', 'cs.IR', 'cs.IT', 'cs.LG', 'cs.LO', 'cs.MA', 'cs.MM', 'cs.MS', 'cs.NA', 'cs.NE', 'cs.NI', 'cs.OH', 'cs.OS', 'cs.PF', 'cs.PL', 'cs.RO', 'cs.SC', 'cs.SD', 'cs.SE', 'cs.SI', 'cs.SY'];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  csCategories.forEach(function (category) {\n    const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === csCategories.length) {\n        createBar4Chart(csCategories, totalResults);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\nfunction createBar4Chart(categories, totalResults) {\n  const data = [{\n    x: categories,\n    y: totalResults,\n    type: 'bar',\n    marker: {\n      color: 'orange',\n      // Change this color to your desired color\n      line: {\n        color: 'black',\n        // Set the bar border color\n        width: 1 // Set the bar border width\n      }\n    }\n  }];\n\n  const layout = {\n    title: {\n      text: 'Number of Articles Published per Subcategory',\n      font: {\n        family: 'Arial, sans-serif',\n        // Change this to your desired font family\n        size: 18,\n        // Change this to your desired font size\n        color: 'black' // Change this to your desired font color\n      }\n    },\n\n    xaxis: {\n      title: {\n        text: 'Subcategory',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    yaxis: {\n      title: {\n        text: 'Article Count',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    plot_bgcolor: 'white',\n    // Change this color to your desired background color\n    paper_bgcolor: 'skyblue' // Change this color to your desired background color\n  };\n\n  Plotly.newPlot('econChartContainer', data, layout);\n}\n\n// function createBarChart(categories, totalResults) {\n//     const ctx = document.getElementById('econChart').getContext('2d');\n\n//     new Chart(ctx, {\n//       type: 'bar',\n//       data: {\n//         labels: categories,\n//         datasets: [{\n//           label: 'Total Results',\n//           data: totalResults,\n//           backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//           borderColor: 'rgba(75, 192, 192, 1)',\n//           borderWidth: 1\n//         }]\n//       },\n//       options: {\n//         responsive: true,\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//             title: {\n//               display: true,\n//               text: 'Total Results'\n//             }\n//           },\n//           x: {\n//             title: {\n//               display: true,\n//               text: 'Categories'\n//             }\n//           }\n//         }\n//       }\n//     });\n//   }  \n\n//             totalSum += totalResults;\n\n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3MuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLG9CQUFvQkEsQ0FBQSxFQUFHO0VBRW5DLE1BQU1DLFlBQVksR0FBRyxDQUFDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQzdELE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUM7RUFDaEQsSUFBSUMsWUFBWSxHQUFHLEVBQUU7O0VBRXJCO0VBQ0FELFlBQVksQ0FBQ0UsT0FBTyxDQUFDLFVBQVNDLFFBQVEsRUFBRTtJQUN0QyxNQUFNQyxNQUFNLEdBQUksc0RBQXFERCxRQUFTLHdCQUF1QjtJQUduR0UsS0FBSyxDQUFDRCxNQUFNLENBQUMsQ0FDWkUsSUFBSSxDQUFDLFVBQVNDLFFBQVEsRUFBRTtNQUNyQixPQUFPQSxRQUFRLENBQUNDLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUNERixJQUFJLENBQUMsVUFBU0csWUFBWSxFQUFFO01BQ3pCLE1BQU1DLE1BQU0sR0FBRyxJQUFJQyxTQUFTLENBQUMsQ0FBQztNQUM5QixNQUFNQyxNQUFNLEdBQUdGLE1BQU0sQ0FBQ0csZUFBZSxDQUFDSixZQUFZLEVBQUUsVUFBVSxDQUFDO01BRS9ELE1BQU1LLG1CQUFtQixHQUFHRixNQUFNLENBQUNHLG9CQUFvQixDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ3JGLE1BQU1DLFdBQVcsR0FBR0MsUUFBUSxDQUFDSCxtQkFBbUIsQ0FBQ0ksV0FBVyxDQUFDO01BRzdEakIsWUFBWSxDQUFDa0IsSUFBSSxDQUFDSCxXQUFXLENBQUM7TUFDOUJJLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDcEIsWUFBWSxDQUFDOztNQUVyQztNQUNRLElBQUlBLFlBQVksQ0FBQ3FCLE1BQU0sS0FBS3RCLFlBQVksQ0FBQ3NCLE1BQU0sRUFBRTtRQUNqREMsZUFBZSxDQUFDdkIsWUFBWSxFQUFFQyxZQUFZLENBQUM7TUFDM0M7SUFDQSxDQUFDLENBQUMsQ0FDRHVCLEtBQUssQ0FBQyxVQUFTQyxLQUFLLEVBQUU7TUFDdkJMLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFFBQVEsRUFBRUksS0FBSyxDQUFDO0lBQzVCLENBQUMsQ0FBQztFQUNOLENBQUMsQ0FBQztBQUNOO0FBRUEsU0FBU0YsZUFBZUEsQ0FBQ0csVUFBVSxFQUFFekIsWUFBWSxFQUFFO0VBRWpELE1BQU0wQixJQUFJLEdBQUcsQ0FBQztJQUNaQyxDQUFDLEVBQUVGLFVBQVU7SUFDYkcsQ0FBQyxFQUFFNUIsWUFBWTtJQUNmNkIsSUFBSSxFQUFFLEtBQUs7SUFDWEMsTUFBTSxFQUFFO01BQ05DLEtBQUssRUFBRSxRQUFRO01BQUU7TUFDakJDLElBQUksRUFBRTtRQUNKRCxLQUFLLEVBQUUsT0FBTztRQUFFO1FBQ2hCRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO01BQ1g7SUFDRjtFQUNGLENBQUMsQ0FBQzs7RUFFRixNQUFNQyxNQUFNLEdBQUc7SUFDYkMsS0FBSyxFQUFFO01BQ0w1QixJQUFJLEVBQUUsOENBQThDO01BQ3BENkIsSUFBSSxFQUFFO1FBQ0pDLE1BQU0sRUFBRSxtQkFBbUI7UUFBRTtRQUM3QkMsSUFBSSxFQUFFLEVBQUU7UUFBRTtRQUNWUCxLQUFLLEVBQUUsT0FBTyxDQUFDO01BQ2pCO0lBQ0YsQ0FBQzs7SUFDRFEsS0FBSyxFQUFFO01BQ0xKLEtBQUssRUFBRTtRQUNMNUIsSUFBSSxFQUFFLGFBQWE7UUFDbkI2QixJQUFJLEVBQUU7VUFDSkMsTUFBTSxFQUFFLG1CQUFtQjtVQUFFO1VBQzdCQyxJQUFJLEVBQUUsRUFBRTtVQUFFO1VBQ1ZQLEtBQUssRUFBRSxPQUFPLENBQUM7UUFDakI7TUFDRjtJQUNGLENBQUM7O0lBQ0RTLEtBQUssRUFBRTtNQUNMTCxLQUFLLEVBQUU7UUFDTDVCLElBQUksRUFBRSxlQUFlO1FBQ3JCNkIsSUFBSSxFQUFFO1VBQ0pDLE1BQU0sRUFBRSxtQkFBbUI7VUFBRTtVQUM3QkMsSUFBSSxFQUFFLEVBQUU7VUFBRTtVQUNWUCxLQUFLLEVBQUUsT0FBTyxDQUFDO1FBQ2pCO01BQ0Y7SUFDRixDQUFDOztJQUNEVSxZQUFZLEVBQUUsT0FBTztJQUFFO0lBQ3ZCQyxhQUFhLEVBQUUsU0FBUyxDQUFDO0VBRzNCLENBQUM7O0VBRURDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLG9CQUFvQixFQUFFbEIsSUFBSSxFQUFFUSxNQUFNLENBQUM7QUFDcEQ7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9jcy5qcz8wYWM4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBmZXRjaENvbXB1dGVyU2NpZW5jZSgpIHtcbiAgICBcbiAgICBjb25zdCBjc0NhdGVnb3JpZXMgPSBbJ2NzLkFJJywgJ2NzLkFSJywgJ2NzLkNDJywgJ2NzLkNFJywgJ2NzLkNHJyxcbiAgICAgICAgJ2NzLkNMJywgJ2NzLkNSJywgJ2NzLkNWJywgJ2NzLkNZJywgJ2NzLkRCJyxcbiAgICAgICAgJ2NzLkRDJywgJ2NzLkRMJywgJ2NzLkRNJywgJ2NzLkRTJywgJ2NzLkVUJyxcbiAgICAgICAgJ2NzLkZMJywgJ2NzLkdMJywgJ2NzLkdSJywgJ2NzLkdUJywgJ2NzLkhDJyxcbiAgICAgICAgJ2NzLklSJywgJ2NzLklUJywgJ2NzLkxHJywgJ2NzLkxPJywgJ2NzLk1BJyxcbiAgICAgICAgJ2NzLk1NJywgJ2NzLk1TJywgJ2NzLk5BJywgJ2NzLk5FJywgJ2NzLk5JJyxcbiAgICAgICAgJ2NzLk9IJywgJ2NzLk9TJywgJ2NzLlBGJywgJ2NzLlBMJywgJ2NzLlJPJyxcbiAgICAgICAgJ2NzLlNDJywgJ2NzLlNEJywgJ2NzLlNFJywgJ2NzLlNJJywgJ2NzLlNZJ107IFxuICAgIGxldCB0b3RhbFJlc3VsdHMgPSBbXTtcbiAgICBcbiAgICAvLyBGZXRjaCB0b3RhbCByZXN1bHRzIGZvciBlYWNoIGNhdGVnb3J5XG4gICAgY3NDYXRlZ29yaWVzLmZvckVhY2goZnVuY3Rpb24oY2F0ZWdvcnkpIHtcbiAgICAgIGNvbnN0IGFwaVVybCA9IGBodHRwOi8vZXhwb3J0LmFyeGl2Lm9yZy9hcGkvcXVlcnk/c2VhcmNoX3F1ZXJ5PWNhdDoke2NhdGVnb3J5fSZzdGFydD0wJm1heF9yZXN1bHRzPTFgO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGZldGNoKGFwaVVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlVGV4dCkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgICAgICAgICAgY29uc3QgeG1sRG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhyZXNwb25zZVRleHQsICd0ZXh0L3htbCcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB0b3RhbFJlc3VsdHNFbGVtZW50ID0geG1sRG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdvcGVuc2VhcmNoOnRvdGFsUmVzdWx0cycpWzBdO1xuICAgICAgICAgICAgY29uc3QgdG90YWxSZXN1bHQgPSBwYXJzZUludCh0b3RhbFJlc3VsdHNFbGVtZW50LnRleHRDb250ZW50KTtcblxuXG4gICAgICAgICAgICB0b3RhbFJlc3VsdHMucHVzaCh0b3RhbFJlc3VsdCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0b3RhbFJlc3VsdHMpXG4gICAgICBcbi8vIENhbGwgdGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYmFyIGNoYXJ0IGFmdGVyIGFsbCBjYXRlZ29yaWVzIGhhdmUgYmVlbiBmZXRjaGVkXG4gICAgICAgIGlmICh0b3RhbFJlc3VsdHMubGVuZ3RoID09PSBjc0NhdGVnb3JpZXMubGVuZ3RoKSB7XG4gICAgICAgIGNyZWF0ZUJhcjRDaGFydChjc0NhdGVnb3JpZXMsIHRvdGFsUmVzdWx0cyk7XG4gICAgICAgIH0gXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZygnRXJyb3I6JywgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQmFyNENoYXJ0KGNhdGVnb3JpZXMsIHRvdGFsUmVzdWx0cykge1xuICBcbiAgY29uc3QgZGF0YSA9IFt7XG4gICAgeDogY2F0ZWdvcmllcyxcbiAgICB5OiB0b3RhbFJlc3VsdHMsXG4gICAgdHlwZTogJ2JhcicsXG4gICAgbWFya2VyOiB7XG4gICAgICBjb2xvcjogJ29yYW5nZScsIC8vIENoYW5nZSB0aGlzIGNvbG9yIHRvIHlvdXIgZGVzaXJlZCBjb2xvclxuICAgICAgbGluZToge1xuICAgICAgICBjb2xvcjogJ2JsYWNrJywgLy8gU2V0IHRoZSBiYXIgYm9yZGVyIGNvbG9yXG4gICAgICAgIHdpZHRoOiAxIC8vIFNldCB0aGUgYmFyIGJvcmRlciB3aWR0aFxuICAgICAgfVxuICAgIH1cbiAgfV07XG4gIFxuICBjb25zdCBsYXlvdXQgPSB7XG4gICAgdGl0bGU6IHtcbiAgICAgIHRleHQ6ICdOdW1iZXIgb2YgQXJ0aWNsZXMgUHVibGlzaGVkIHBlciBTdWJjYXRlZ29yeScsXG4gICAgICBmb250OiB7XG4gICAgICAgIGZhbWlseTogJ0FyaWFsLCBzYW5zLXNlcmlmJywgLy8gQ2hhbmdlIHRoaXMgdG8geW91ciBkZXNpcmVkIGZvbnQgZmFtaWx5XG4gICAgICAgIHNpemU6IDE4LCAvLyBDaGFuZ2UgdGhpcyB0byB5b3VyIGRlc2lyZWQgZm9udCBzaXplXG4gICAgICAgIGNvbG9yOiAnYmxhY2snIC8vIENoYW5nZSB0aGlzIHRvIHlvdXIgZGVzaXJlZCBmb250IGNvbG9yXG4gICAgICB9XG4gICAgfSxcbiAgICB4YXhpczoge1xuICAgICAgdGl0bGU6IHtcbiAgICAgICAgdGV4dDogJ1N1YmNhdGVnb3J5JyxcbiAgICAgICAgZm9udDoge1xuICAgICAgICAgIGZhbWlseTogJ0FyaWFsLCBzYW5zLXNlcmlmJywgLy8gQ2hhbmdlIHRoaXMgdG8geW91ciBkZXNpcmVkIGZvbnQgZmFtaWx5XG4gICAgICAgICAgc2l6ZTogMTgsIC8vIENoYW5nZSB0aGlzIHRvIHlvdXIgZGVzaXJlZCBmb250IHNpemVcbiAgICAgICAgICBjb2xvcjogJ2JsYWNrJyAvLyBDaGFuZ2UgdGhpcyB0byB5b3VyIGRlc2lyZWQgZm9udCBjb2xvclxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gICAgeWF4aXM6IHtcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIHRleHQ6ICdBcnRpY2xlIENvdW50JyxcbiAgICAgICAgZm9udDoge1xuICAgICAgICAgIGZhbWlseTogJ0FyaWFsLCBzYW5zLXNlcmlmJywgLy8gQ2hhbmdlIHRoaXMgdG8geW91ciBkZXNpcmVkIGZvbnQgZmFtaWx5XG4gICAgICAgICAgc2l6ZTogMTgsIC8vIENoYW5nZSB0aGlzIHRvIHlvdXIgZGVzaXJlZCBmb250IHNpemVcbiAgICAgICAgICBjb2xvcjogJ2JsYWNrJyAvLyBDaGFuZ2UgdGhpcyB0byB5b3VyIGRlc2lyZWQgZm9udCBjb2xvclxuICAgICAgICB9XG4gICAgICB9LFxuICAgIH0sXG4gICAgcGxvdF9iZ2NvbG9yOiAnd2hpdGUnLCAvLyBDaGFuZ2UgdGhpcyBjb2xvciB0byB5b3VyIGRlc2lyZWQgYmFja2dyb3VuZCBjb2xvclxuICAgIHBhcGVyX2JnY29sb3I6ICdza3libHVlJyAvLyBDaGFuZ2UgdGhpcyBjb2xvciB0byB5b3VyIGRlc2lyZWQgYmFja2dyb3VuZCBjb2xvclxuXG5cbiAgfTtcbiAgXG4gIFBsb3RseS5uZXdQbG90KCdlY29uQ2hhcnRDb250YWluZXInLCBkYXRhLCBsYXlvdXQpO1xufSBcbiAgICAgICAgICAgIFxuLy8gZnVuY3Rpb24gY3JlYXRlQmFyQ2hhcnQoY2F0ZWdvcmllcywgdG90YWxSZXN1bHRzKSB7XG4vLyAgICAgY29uc3QgY3R4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Vjb25DaGFydCcpLmdldENvbnRleHQoJzJkJyk7XG4gICAgXG4vLyAgICAgbmV3IENoYXJ0KGN0eCwge1xuLy8gICAgICAgdHlwZTogJ2JhcicsXG4vLyAgICAgICBkYXRhOiB7XG4vLyAgICAgICAgIGxhYmVsczogY2F0ZWdvcmllcyxcbi8vICAgICAgICAgZGF0YXNldHM6IFt7XG4vLyAgICAgICAgICAgbGFiZWw6ICdUb3RhbCBSZXN1bHRzJyxcbi8vICAgICAgICAgICBkYXRhOiB0b3RhbFJlc3VsdHMsXG4vLyAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSg3NSwgMTkyLCAxOTIsIDAuNiknLFxuLy8gICAgICAgICAgIGJvcmRlckNvbG9yOiAncmdiYSg3NSwgMTkyLCAxOTIsIDEpJyxcbi8vICAgICAgICAgICBib3JkZXJXaWR0aDogMVxuLy8gICAgICAgICB9XVxuLy8gICAgICAgfSxcbi8vICAgICAgIG9wdGlvbnM6IHtcbi8vICAgICAgICAgcmVzcG9uc2l2ZTogdHJ1ZSxcbi8vICAgICAgICAgc2NhbGVzOiB7XG4vLyAgICAgICAgICAgeToge1xuLy8gICAgICAgICAgICAgYmVnaW5BdFplcm86IHRydWUsXG4vLyAgICAgICAgICAgICB0aXRsZToge1xuLy8gICAgICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuLy8gICAgICAgICAgICAgICB0ZXh0OiAnVG90YWwgUmVzdWx0cydcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICB9LFxuLy8gICAgICAgICAgIHg6IHtcbi8vICAgICAgICAgICAgIHRpdGxlOiB7XG4vLyAgICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4vLyAgICAgICAgICAgICAgIHRleHQ6ICdDYXRlZ29yaWVzJ1xuLy8gICAgICAgICAgICAgfVxuLy8gICAgICAgICAgIH1cbi8vICAgICAgICAgfVxuLy8gICAgICAgfVxuLy8gICAgIH0pO1xuLy8gICB9ICBcbiAgICAgICAgICAgIFxuLy8gICAgICAgICAgICAgdG90YWxTdW0gKz0gdG90YWxSZXN1bHRzO1xuICAgICAgICAgICAgXG4vLyAgICAgICAgICAgICAvLyBIYW5kbGUgaW5kaXZpZHVhbCBjYXRlZ29yeSB0b3RhbCByZXN1bHRzXG4vLyAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgVG90YWwgUmVzdWx0cyBmb3IgJHtjYXRlZ29yeX06YCwgdG90YWxSZXN1bHRzKTtcbi8vICAgICAgICAgfSlcbi8vICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4vLyAgICAgICAgICAgICAvLyBIYW5kbGUgZXJyb3Jcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFcnJvciBmZXRjaGluZyAke2NhdGVnb3J5fSByZXN1bHRzOmAsIGVycm9yKTtcbi8vICAgICAgICAgfSk7XG4vLyAgICAgfSk7XG4gICAgXG4vLyAgICAgLy8gSGFuZGxlIHRvdGFsIHN1bSBvZiBhbGwgY2F0ZWdvcmllc1xuLy8gICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKCdUb3RhbCBTdW0gb2YgUmVzdWx0czonLCB0b3RhbFN1bSk7XG4vLyAgICAgfSwgMTAwMDApO1xuLy8gfSJdLCJuYW1lcyI6WyJmZXRjaENvbXB1dGVyU2NpZW5jZSIsImNzQ2F0ZWdvcmllcyIsInRvdGFsUmVzdWx0cyIsImZvckVhY2giLCJjYXRlZ29yeSIsImFwaVVybCIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwidGV4dCIsInJlc3BvbnNlVGV4dCIsInBhcnNlciIsIkRPTVBhcnNlciIsInhtbERvYyIsInBhcnNlRnJvbVN0cmluZyIsInRvdGFsUmVzdWx0c0VsZW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInRvdGFsUmVzdWx0IiwicGFyc2VJbnQiLCJ0ZXh0Q29udGVudCIsInB1c2giLCJjb25zb2xlIiwibG9nIiwibGVuZ3RoIiwiY3JlYXRlQmFyNENoYXJ0IiwiY2F0Y2giLCJlcnJvciIsImNhdGVnb3JpZXMiLCJkYXRhIiwieCIsInkiLCJ0eXBlIiwibWFya2VyIiwiY29sb3IiLCJsaW5lIiwid2lkdGgiLCJsYXlvdXQiLCJ0aXRsZSIsImZvbnQiLCJmYW1pbHkiLCJzaXplIiwieGF4aXMiLCJ5YXhpcyIsInBsb3RfYmdjb2xvciIsInBhcGVyX2JnY29sb3IiLCJQbG90bHkiLCJuZXdQbG90Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/cs.js\n");

/***/ }),

/***/ "./src/economics.js":
/*!**************************!*\
  !*** ./src/economics.js ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchEconomics: function() { return /* binding */ fetchEconomics; }\n/* harmony export */ });\nfunction fetchEconomics() {\n  const economicsCategories = ['econ.EM', 'econ.GN', 'econ.TH'];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  economicsCategories.forEach(function (category) {\n    const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === economicsCategories.length) {\n        createBarECONChart(economicsCategories, totalResults);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\nfunction createBarECONChart(categories, totalResults) {\n  const data = [{\n    x: categories,\n    y: totalResults,\n    type: 'bar',\n    marker: {\n      color: 'orange',\n      // Change this color to your desired color\n      line: {\n        color: 'black',\n        // Set the bar border color\n        width: 1 // Set the bar border width\n      }\n    }\n  }];\n\n  const layout = {\n    title: 'Number of Articles Published per Subcategory',\n    xaxis: {\n      title: {\n        text: 'Subcategory',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    yaxis: {\n      title: {\n        text: 'Article Count',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    plot_bgcolor: 'white',\n    // Change this color to your desired background color\n    paper_bgcolor: 'skyblue' // Change this color to your desired background color\n  };\n\n  Plotly.newPlot('econChartContainer', data, layout);\n}\n\n// function createBarChart(categories, totalResults) {\n//     const ctx = document.getElementById('econChart').getContext('2d');\n\n//     new Chart(ctx, {\n//       type: 'bar',\n//       data: {\n//         labels: categories,\n//         datasets: [{\n//           label: 'Total Results',\n//           data: totalResults,\n//           backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//           borderColor: 'rgba(75, 192, 192, 1)',\n//           borderWidth: 1\n//         }]\n//       },\n//       options: {\n//         responsive: true,\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//             title: {\n//               display: true,\n//               text: 'Total Results'\n//             }\n//           },\n//           x: {\n//             title: {\n//               display: true,\n//               text: 'Categories'\n//             }\n//           }\n//         }\n//       }\n//     });\n//   }        \n\n//             totalSum += totalResults;\n\n//             // Handle individual category total results\n//             console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/economics.js\n");

/***/ }),

/***/ "./src/electricalengineering.js":
/*!**************************************!*\
  !*** ./src/electricalengineering.js ***!
  \**************************************/
/***/ (function() {

eval("function fetchElectricalEngineering() {\n  const eeCategories = [\"eess.AS\", \"eess.IV\", \"eess.SP\", \"eess.SY\"];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  eeCategories.forEach(function (category) {\n    const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === eeCategories.length) {\n        createEEBarChart(eeCategories, totalResults);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\nfunction createEEBarChart(categories, totalResults) {\n  const data = [{\n    x: categories,\n    y: totalResults,\n    type: 'bar',\n    marker: {\n      color: 'orange',\n      // Change this color to your desired color\n      line: {\n        color: 'black',\n        // Set the bar border color\n        width: 1 // Set the bar border width\n      }\n    }\n  }];\n\n  const layout = {\n    title: {\n      text: 'Number of Articles Published per Subcategory',\n      font: {\n        family: 'Arial, sans-serif',\n        // Change this to your desired font family\n        size: 18,\n        // Change this to your desired font size\n        color: 'black' // Change this to your desired font color\n      }\n    },\n\n    xaxis: {\n      title: {\n        text: 'Subcategory',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    yaxis: {\n      title: {\n        text: 'Article Count',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    plot_bgcolor: 'white',\n    // Change this color to your desired background color\n    paper_bgcolor: 'skyblue' // Change this color to your desired background color\n  };\n\n  Plotly.newPlot('econChartContainer', data, layout);\n}\n\n//             totalSum += totalResults;\n\n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZWxlY3RyaWNhbGVuZ2luZWVyaW5nLmpzLmpzIiwibmFtZXMiOlsiZmV0Y2hFbGVjdHJpY2FsRW5naW5lZXJpbmciLCJlZUNhdGVnb3JpZXMiLCJ0b3RhbFJlc3VsdHMiLCJmb3JFYWNoIiwiY2F0ZWdvcnkiLCJhcGlVcmwiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsInRleHQiLCJyZXNwb25zZVRleHQiLCJwYXJzZXIiLCJET01QYXJzZXIiLCJ4bWxEb2MiLCJwYXJzZUZyb21TdHJpbmciLCJ0b3RhbFJlc3VsdHNFbGVtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJ0b3RhbFJlc3VsdCIsInBhcnNlSW50IiwidGV4dENvbnRlbnQiLCJwdXNoIiwiY29uc29sZSIsImxvZyIsImxlbmd0aCIsImNyZWF0ZUVFQmFyQ2hhcnQiLCJjYXRjaCIsImVycm9yIiwiY2F0ZWdvcmllcyIsImRhdGEiLCJ4IiwieSIsInR5cGUiLCJtYXJrZXIiLCJjb2xvciIsImxpbmUiLCJ3aWR0aCIsImxheW91dCIsInRpdGxlIiwiZm9udCIsImZhbWlseSIsInNpemUiLCJ4YXhpcyIsInlheGlzIiwicGxvdF9iZ2NvbG9yIiwicGFwZXJfYmdjb2xvciIsIlBsb3RseSIsIm5ld1Bsb3QiXSwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9lbGVjdHJpY2FsZW5naW5lZXJpbmcuanM/Y2QwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBmZXRjaEVsZWN0cmljYWxFbmdpbmVlcmluZygpIHtcbiAgICBcbiAgICBjb25zdCBlZUNhdGVnb3JpZXMgPSBbXCJlZXNzLkFTXCIsIFwiZWVzcy5JVlwiLCBcImVlc3MuU1BcIiwgXCJlZXNzLlNZXCJdOyBcbiAgICBsZXQgdG90YWxSZXN1bHRzID0gW107XG4gICAgXG4gICAgLy8gRmV0Y2ggdG90YWwgcmVzdWx0cyBmb3IgZWFjaCBjYXRlZ29yeVxuICAgIGVlQ2F0ZWdvcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGNhdGVnb3J5KSB7XG4gICAgICAgIGNvbnN0IGFwaVVybCA9IGBodHRwOi8vZXhwb3J0LmFyeGl2Lm9yZy9hcGkvcXVlcnk/c2VhcmNoX3F1ZXJ5PWNhdDoke2NhdGVnb3J5fSZzdGFydD0wJm1heF9yZXN1bHRzPTFgO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGZldGNoKGFwaVVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlVGV4dCkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgICAgICAgICAgY29uc3QgeG1sRG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhyZXNwb25zZVRleHQsICd0ZXh0L3htbCcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB0b3RhbFJlc3VsdHNFbGVtZW50ID0geG1sRG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdvcGVuc2VhcmNoOnRvdGFsUmVzdWx0cycpWzBdO1xuICAgICAgICAgICAgY29uc3QgdG90YWxSZXN1bHQgPSBwYXJzZUludCh0b3RhbFJlc3VsdHNFbGVtZW50LnRleHRDb250ZW50KTtcblxuICAgICAgICAgICAgdG90YWxSZXN1bHRzLnB1c2godG90YWxSZXN1bHQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2codG90YWxSZXN1bHRzKVxuICAgICAgXG4vLyBDYWxsIHRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGJhciBjaGFydCBhZnRlciBhbGwgY2F0ZWdvcmllcyBoYXZlIGJlZW4gZmV0Y2hlZFxuICAgICAgICBpZiAodG90YWxSZXN1bHRzLmxlbmd0aCA9PT0gZWVDYXRlZ29yaWVzLmxlbmd0aCkge1xuICAgICAgICBjcmVhdGVFRUJhckNoYXJ0KGVlQ2F0ZWdvcmllcywgdG90YWxSZXN1bHRzKTtcbiAgICAgICAgfSBcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdFcnJvcjonLCBlcnJvcik7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuICAgICAgICAgICAgXG5mdW5jdGlvbiBjcmVhdGVFRUJhckNoYXJ0KGNhdGVnb3JpZXMsIHRvdGFsUmVzdWx0cykge1xuICBjb25zdCBkYXRhID0gW3tcbiAgICB4OiBjYXRlZ29yaWVzLFxuICAgIHk6IHRvdGFsUmVzdWx0cyxcbiAgICB0eXBlOiAnYmFyJyxcbiAgICBtYXJrZXI6IHtcbiAgICAgIGNvbG9yOiAnb3JhbmdlJywgLy8gQ2hhbmdlIHRoaXMgY29sb3IgdG8geW91ciBkZXNpcmVkIGNvbG9yXG4gICAgICBsaW5lOiB7XG4gICAgICAgIGNvbG9yOiAnYmxhY2snLCAvLyBTZXQgdGhlIGJhciBib3JkZXIgY29sb3JcbiAgICAgICAgd2lkdGg6IDEgLy8gU2V0IHRoZSBiYXIgYm9yZGVyIHdpZHRoXG4gICAgICB9XG4gICAgfVxuICB9XTtcbiAgXG4gIGNvbnN0IGxheW91dCA9IHtcbiAgICB0aXRsZToge1xuICAgICAgdGV4dDogJ051bWJlciBvZiBBcnRpY2xlcyBQdWJsaXNoZWQgcGVyIFN1YmNhdGVnb3J5JyxcbiAgICAgIGZvbnQ6IHtcbiAgICAgICAgZmFtaWx5OiAnQXJpYWwsIHNhbnMtc2VyaWYnLCAvLyBDaGFuZ2UgdGhpcyB0byB5b3VyIGRlc2lyZWQgZm9udCBmYW1pbHlcbiAgICAgICAgc2l6ZTogMTgsIC8vIENoYW5nZSB0aGlzIHRvIHlvdXIgZGVzaXJlZCBmb250IHNpemVcbiAgICAgICAgY29sb3I6ICdibGFjaycgLy8gQ2hhbmdlIHRoaXMgdG8geW91ciBkZXNpcmVkIGZvbnQgY29sb3JcbiAgICAgIH1cbiAgICB9LFxuICAgIHhheGlzOiB7XG4gICAgICB0aXRsZToge1xuICAgICAgICB0ZXh0OiAnU3ViY2F0ZWdvcnknLFxuICAgICAgICBmb250OiB7XG4gICAgICAgICAgZmFtaWx5OiAnQXJpYWwsIHNhbnMtc2VyaWYnLCAvLyBDaGFuZ2UgdGhpcyB0byB5b3VyIGRlc2lyZWQgZm9udCBmYW1pbHlcbiAgICAgICAgICBzaXplOiAxOCwgLy8gQ2hhbmdlIHRoaXMgdG8geW91ciBkZXNpcmVkIGZvbnQgc2l6ZVxuICAgICAgICAgIGNvbG9yOiAnYmxhY2snIC8vIENoYW5nZSB0aGlzIHRvIHlvdXIgZGVzaXJlZCBmb250IGNvbG9yXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgICB5YXhpczoge1xuICAgICAgdGl0bGU6IHtcbiAgICAgICAgdGV4dDogJ0FydGljbGUgQ291bnQnLFxuICAgICAgICBmb250OiB7XG4gICAgICAgICAgZmFtaWx5OiAnQXJpYWwsIHNhbnMtc2VyaWYnLCAvLyBDaGFuZ2UgdGhpcyB0byB5b3VyIGRlc2lyZWQgZm9udCBmYW1pbHlcbiAgICAgICAgICBzaXplOiAxOCwgLy8gQ2hhbmdlIHRoaXMgdG8geW91ciBkZXNpcmVkIGZvbnQgc2l6ZVxuICAgICAgICAgIGNvbG9yOiAnYmxhY2snIC8vIENoYW5nZSB0aGlzIHRvIHlvdXIgZGVzaXJlZCBmb250IGNvbG9yXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgfSxcbiAgICBwbG90X2JnY29sb3I6ICd3aGl0ZScsIC8vIENoYW5nZSB0aGlzIGNvbG9yIHRvIHlvdXIgZGVzaXJlZCBiYWNrZ3JvdW5kIGNvbG9yXG4gICAgcGFwZXJfYmdjb2xvcjogJ3NreWJsdWUnIC8vIENoYW5nZSB0aGlzIGNvbG9yIHRvIHlvdXIgZGVzaXJlZCBiYWNrZ3JvdW5kIGNvbG9yXG5cblxuICB9O1xuICBcbiAgUGxvdGx5Lm5ld1Bsb3QoJ2Vjb25DaGFydENvbnRhaW5lcicsIGRhdGEsIGxheW91dCk7XG4gXG59ICBcbiAgICAgICAgICAgIFxuLy8gICAgICAgICAgICAgdG90YWxTdW0gKz0gdG90YWxSZXN1bHRzO1xuICAgICAgICAgICAgXG4vLyAgICAgICAgICAgICAvLyBIYW5kbGUgaW5kaXZpZHVhbCBjYXRlZ29yeSB0b3RhbCByZXN1bHRzXG4vLyAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgVG90YWwgUmVzdWx0cyBmb3IgJHtjYXRlZ29yeX06YCwgdG90YWxSZXN1bHRzKTtcbi8vICAgICAgICAgfSlcbi8vICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uKGVycm9yKSB7XG4vLyAgICAgICAgICAgICAvLyBIYW5kbGUgZXJyb3Jcbi8vICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBFcnJvciBmZXRjaGluZyAke2NhdGVnb3J5fSByZXN1bHRzOmAsIGVycm9yKTtcbi8vICAgICAgICAgfSk7XG4vLyAgICAgfSk7XG4gICAgXG4vLyAgICAgLy8gSGFuZGxlIHRvdGFsIHN1bSBvZiBhbGwgY2F0ZWdvcmllc1xuLy8gICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4vLyAgICAgICAgIGNvbnNvbGUubG9nKCdUb3RhbCBTdW0gb2YgUmVzdWx0czonLCB0b3RhbFN1bSk7XG4vLyAgICAgfSwgMTAwMDApO1xuLy8gfSJdLCJtYXBwaW5ncyI6IkFBQUEsU0FBU0EsMEJBQTBCQSxDQUFBLEVBQUc7RUFFbEMsTUFBTUMsWUFBWSxHQUFHLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDO0VBQ2pFLElBQUlDLFlBQVksR0FBRyxFQUFFOztFQUVyQjtFQUNBRCxZQUFZLENBQUNFLE9BQU8sQ0FBQyxVQUFTQyxRQUFRLEVBQUU7SUFDcEMsTUFBTUMsTUFBTSxHQUFJLHNEQUFxREQsUUFBUyx3QkFBdUI7SUFHckdFLEtBQUssQ0FBQ0QsTUFBTSxDQUFDLENBQ1pFLElBQUksQ0FBQyxVQUFTQyxRQUFRLEVBQUU7TUFDckIsT0FBT0EsUUFBUSxDQUFDQyxJQUFJLENBQUMsQ0FBQztJQUMxQixDQUFDLENBQUMsQ0FDREYsSUFBSSxDQUFDLFVBQVNHLFlBQVksRUFBRTtNQUN6QixNQUFNQyxNQUFNLEdB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\n//# sourceURL=webpack-internal:///./src/electricalengineering.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _physics_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./physics.js */ \"./src/physics.js\");\n/* harmony import */ var _economics_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./economics.js */ \"./src/economics.js\");\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math.js */ \"./src/math.js\");\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_math_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _cs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cs.js */ \"./src/cs.js\");\n/* harmony import */ var _electricalengineering_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./electricalengineering.js */ \"./src/electricalengineering.js\");\n/* harmony import */ var _electricalengineering_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_electricalengineering_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _statistics_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./statistics.js */ \"./src/statistics.js\");\n/* harmony import */ var _quantBio_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./quantBio.js */ \"./src/quantBio.js\");\n/* harmony import */ var _quantFinance_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./quantFinance.js */ \"./src/quantFinance.js\");\n/* harmony import */ var _quantFinance_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_quantFinance_js__WEBPACK_IMPORTED_MODULE_7__);\n// import searchBar from './src/searchBar.js'\n\n\n\n\n\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  console.log(\"its working\");\n  document.getElementById('economicsButton').addEventListener('click', function () {\n    (0,_economics_js__WEBPACK_IMPORTED_MODULE_1__.fetchEconomics)();\n  });\n\n  // document.getElementById('mathButton').addEventListener('click', function() {\n  //   fetchMath();\n  // });\n\n  // document.getElementById('csButton').addEventListener('click', function() {\n  //   fetchComputerScience();\n  // });\n\n  // document.getElementById('physicsButton').addEventListener('click', function() {\n  //   fetchPhysics();\n  // });\n\n  // document.getElementById('eeButton').addEventListener('click', function() {\n  //   fetchElectricalEngineering();\n  // });\n\n  // document.getElementById('statsButton').addEventListener('click', function() {\n  //   fetchStatistics();\n  // });\n\n  // document.getElementById('quantBioButton').addEventListener('click', function() {\n  //   fetchQuantBio();\n  // });\n\n  // document.getElementById('quantFinanceButton').addEventListener('click', function() {\n  //   fetchQuantFinance();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7QUFDMEM7QUFDSTtBQUNWO0FBQ1M7QUFDeUI7QUFDdEI7QUFDSjtBQUNRO0FBRXBEUSxRQUFRLENBQUNDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLE1BQU07RUFDaERDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGFBQWEsQ0FBQztFQUUxQkgsUUFBUSxDQUFDSSxjQUFjLENBQUMsaUJBQWlCLENBQUMsQ0FBQ0gsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFlBQVc7SUFDOUVSLDZEQUFjLENBQUMsQ0FBQztFQUNsQixDQUFDLENBQUM7O0VBRUY7RUFDQTtFQUNBOztFQUVBO0VBQ0E7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7O0VBRUE7RUFDQTtFQUNBOztFQUVBO0VBQ0E7RUFDQTs7RUFFQTtFQUNBO0VBQ0E7O0VBRUE7RUFDQTtBQUNBLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCBzZWFyY2hCYXIgZnJvbSAnLi9zcmMvc2VhcmNoQmFyLmpzJ1xuaW1wb3J0IHtmZXRjaFBoeXNpY3N9IGZyb20gJy4vcGh5c2ljcy5qcyc7XG5pbXBvcnQge2ZldGNoRWNvbm9taWNzfSBmcm9tICcuL2Vjb25vbWljcy5qcyc7XG5pbXBvcnQge2ZldGNoTWF0aH0gZnJvbSAnLi9tYXRoLmpzJztcbmltcG9ydCB7ZmV0Y2hDb21wdXRlclNjaWVuY2V9IGZyb20gJy4vY3MuanMnO1xuaW1wb3J0IHtmZXRjaEVsZWN0cmljYWxFbmdpbmVlcmluZ30gZnJvbSAnLi9lbGVjdHJpY2FsZW5naW5lZXJpbmcuanMnO1xuaW1wb3J0IHtmZXRjaFN0YXRpc3RpY3N9IGZyb20gJy4vc3RhdGlzdGljcy5qcyc7XG5pbXBvcnQge2ZldGNoUXVhbnRCaW99IGZyb20gJy4vcXVhbnRCaW8uanMnO1xuaW1wb3J0IHtmZXRjaFF1YW50RmluYW5jZX0gZnJvbSAnLi9xdWFudEZpbmFuY2UuanMnO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XG4gICAgY29uc29sZS5sb2coXCJpdHMgd29ya2luZ1wiKTtcblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlY29ub21pY3NCdXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uKCkge1xuICAgICAgZmV0Y2hFY29ub21pY3MoKTtcbiAgICB9KTtcblxuICAgIC8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdtYXRoQnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAvLyAgIGZldGNoTWF0aCgpO1xuICAgIC8vIH0pO1xuXG4gICAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NzQnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAvLyAgIGZldGNoQ29tcHV0ZXJTY2llbmNlKCk7XG4gICAgLy8gfSk7XG5cbiAgICAvLyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGh5c2ljc0J1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgLy8gICBmZXRjaFBoeXNpY3MoKTtcbiAgICAvLyB9KTtcblxuICAgIC8vIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZUJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgLy8gICBmZXRjaEVsZWN0cmljYWxFbmdpbmVlcmluZygpO1xuICAgIC8vIH0pO1xuXG4gICAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXRzQnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAvLyAgIGZldGNoU3RhdGlzdGljcygpO1xuICAgIC8vIH0pO1xuXG4gICAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F1YW50QmlvQnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAvLyAgIGZldGNoUXVhbnRCaW8oKTtcbiAgICAvLyB9KTtcbiAgXG4gICAgLy8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F1YW50RmluYW5jZUJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgLy8gICBmZXRjaFF1YW50RmluYW5jZSgpO1xuICAgIH0pO1xuXG4gICAgXG4gICAgXG4gIFxuXG5cbiBcblxuXG4gICJdLCJuYW1lcyI6WyJmZXRjaFBoeXNpY3MiLCJmZXRjaEVjb25vbWljcyIsImZldGNoTWF0aCIsImZldGNoQ29tcHV0ZXJTY2llbmNlIiwiZmV0Y2hFbGVjdHJpY2FsRW5naW5lZXJpbmciLCJmZXRjaFN0YXRpc3RpY3MiLCJmZXRjaFF1YW50QmlvIiwiZmV0Y2hRdWFudEZpbmFuY2UiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb25zb2xlIiwibG9nIiwiZ2V0RWxlbWVudEJ5SWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/math.js":
/*!*********************!*\
  !*** ./src/math.js ***!
  \*********************/
/***/ (function() {

eval("function fetchMath() {\n  const mathCategories = [\"math.AC\", \"math.AG\", \"math.AP\", \"math.AT\", \"math.CA\", \"math.CO\", \"math.CT\", \"math.CV\", \"math.DG\", \"math.DS\", \"math.FA\", \"math.GM\", \"math.GN\", \"math.GR\", \"math.GT\", \"math.H\", \"math.IT\", \"math.KT\", \"math.LO\", \"math.MG\", \"math.MP\", \"math.NA\", \"math.NT\", \"math.OA\", \"math.OC\", \"math.PR\", \"math.QA\", \"math.RA\", \"math.RT\", \"math.S\", \"math.SP\", \"math.ST\"];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  mathCategories.forEach(function (category) {\n    const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === mathCategories.length) {\n        createMathBarChart(mathCategories, totalResults);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\nfunction createMathBarChart(categories, totalResults) {\n  const data = [{\n    x: categories,\n    y: totalResults,\n    type: 'bar',\n    marker: {\n      color: 'orange',\n      // Change this color to your desired color\n      line: {\n        color: 'black',\n        // Set the bar border color\n        width: 1 // Set the bar border width\n      }\n    }\n  }];\n\n  const layout = {\n    title: {\n      text: 'Number of Articles Published per Subcategory',\n      font: {\n        family: 'Arial, sans-serif',\n        // Change this to your desired font family\n        size: 18,\n        // Change this to your desired font size\n        color: 'black' // Change this to your desired font color\n      }\n    },\n\n    xaxis: {\n      title: {\n        text: 'Subcategory',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    yaxis: {\n      title: {\n        text: 'Article Count',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    plot_bgcolor: 'white',\n    // Change this color to your desired background color\n    paper_bgcolor: 'skyblue' // Change this color to your desired background color\n  };\n\n  Plotly.newPlot('econChartContainer', data, layout);\n}\n//   const ctx = document.getElementById('econChart').getContext('2d');\n\n//   new Chart(ctx, {\n//     type: 'bar',\n//     data: {\n//       labels: categories,\n//       datasets: [{\n//         label: 'Total Results',\n//         data: totalResults,\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//         borderColor: 'rgba(75, 192, 192, 1)',\n//         borderWidth: 1\n//       }]\n//     },\n//     options: {\n//       responsive: true,\n//       scales: {\n//         y: {\n//           beginAtZero: true,\n//           title: {\n//             display: true,\n//             text: 'Total Results'\n//           }\n//         },\n//         x: {\n//           title: {\n//             display: true,\n//             text: 'Categories'\n//           }\n//         }\n//       }\n//     }\n//   });\n// }  \n\n//             totalSum += totalResults;\n\n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/math.js\n");

/***/ }),

/***/ "./src/physics.js":
/*!************************!*\
  !*** ./src/physics.js ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPhysics: function() { return /* binding */ fetchPhysics; }\n/* harmony export */ });\nfunction fetchPhysics() {\n  console.log('Physics');\n  const physicsCategories = ['astro-ph.GA', 'astro-ph.HE', 'astro-ph.IM', 'astro-ph.SR', 'cond-mat.dis-nn', 'cond-mat.mes-hall', 'cond-mat.mtrl-sci', 'cond-mat.other', 'cond-mat.quant-gas', 'cond-mat.soft', 'cond-mat.stat-mech', 'cond-mat.str-el', 'cond-mat.supr-con', 'gr-qc', 'hep-ex', 'hep-lat', 'hep-ph', 'hep-th', 'math-ph', 'nlin.AO', 'nlin.CD', 'nlin.CG', 'nlin.PS', 'nlin.SI', 'nucl-ex', 'nucl-th', 'physics.acc-ph', 'physics.ao-ph', 'physics.app-ph', 'physics.atm-clus', 'physics.atom-ph', 'physics.bio-ph', 'physics.chem-ph', 'physics.class-ph', 'physics.comp-ph', 'physics.data-an', 'physics.ed-ph', 'physics.flu-dyn', 'physics.gen-ph', 'physics.geo-ph', 'physics.hist-ph', 'physics.ins-det', 'physics.med-ph', 'physics.optics', 'physics.plasm-ph', 'physics.pop-ph', 'physics.soc-ph', 'physics.space-ph', 'quant-ph'];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  physicsCategories.forEach(function (category) {\n    const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === physicsCategories.length) {\n        createBarPhysChart(physicsCategories, totalResults);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\nfunction createBarPhysChart(categories, totalResults) {\n  const data = [{\n    x: categories,\n    y: totalResults,\n    type: 'bar',\n    marker: {\n      color: 'orange',\n      // Change this color to your desired color\n      line: {\n        color: 'black',\n        // Set the bar border color\n        width: 1 // Set the bar border width\n      }\n    }\n  }];\n\n  const layout = {\n    title: {\n      text: 'Number of Articles Published per Subcategory',\n      font: {\n        family: 'Arial, sans-serif',\n        // Change this to your desired font family\n        size: 18,\n        // Change this to your desired font size\n        color: 'black' // Change this to your desired font color\n      }\n    },\n\n    xaxis: {\n      title: {\n        text: 'Subcategory',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    yaxis: {\n      title: {\n        text: 'Article Count',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    plot_bgcolor: 'white',\n    // Change this color to your desired background color\n    paper_bgcolor: 'skyblue' // Change this color to your desired background color\n  };\n\n  Plotly.newPlot('econChartContainer', data, layout);\n}\n//   const ctx = document.getElementById('econChart').getContext('2d');\n\n//   new Chart(ctx, {\n//     type: 'bar',\n//     data: {\n//       labels: categories,\n//       datasets: [{\n//         label: 'Total Results',\n//         data: totalResults,\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//         borderColor: 'rgba(75, 192, 192, 1)',\n//         borderWidth: 1\n//       }]\n//     },\n//     options: {\n//       responsive: true,\n//       scales: {\n//         y: {\n//           beginAtZero: true,\n//           title: {\n//             display: true,\n//             text: 'Total Results'\n//           }\n//         },\n//         x: {\n//           title: {\n//             display: true,\n//             text: 'Categories'\n//           }\n//         }\n//       }\n//     }\n//   });\n// }         \n\n// totalSum += totalResults;\n\n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 20000);\n// }\n\n// for visualizations \n\n//   \n// fetch('https://export.arxiv.org/api/query?search_query=cat:physics.acc-ph')\n//   .then(function(response) {\n//     return response.text();\n//   })\n//   .then(function(responseText) {\n//     // Parse the XML response\n//     const parser = new DOMParser();\n//     const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n\n//     // Extract the total results\n//     const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n//     const totalResults = totalResultsElement.textContent;\n\n//     // Handle successful response\n//     console.log('Total Results:', totalResults);\n//   })\n//   .catch(function(error) {\n//     // Handle error\n//     console.log('Error:', error);\n//   });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/physics.js\n");

/***/ }),

/***/ "./src/quantBio.js":
/*!*************************!*\
  !*** ./src/quantBio.js ***!
  \*************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchQuantBio: function() { return /* binding */ fetchQuantBio; }\n/* harmony export */ });\nfunction fetchQuantBio() {\n  const qBioCategories = categories = [\"q-bio.BM\", \"q-bio.CB\", \"q-bio.GN\", \"q-bio.MN\", \"q-bio.NC\", \"q-bio.O\", \"q-bio.PE\", \"q-bio.QM\", \"q-bio.SC\", \"q-bio.TO\"];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  qBioCategories.forEach(function (category) {\n    const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === qBioCategories.length) {\n        createBarQBChart(qBioCategories, totalResults);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\nfunction createBarQBChart(categories, totalResults) {\n  const data = [{\n    x: categories,\n    y: totalResults,\n    type: 'bar',\n    marker: {\n      color: 'orange',\n      // Change this color to your desired color\n      line: {\n        color: 'black',\n        // Set the bar border color\n        width: 1 // Set the bar border width\n      }\n    }\n  }];\n\n  const layout = {\n    title: {\n      text: 'Number of Articles Published per Subcategory',\n      font: {\n        family: 'Arial, sans-serif',\n        // Change this to your desired font family\n        size: 18,\n        // Change this to your desired font size\n        color: 'black' // Change this to your desired font color\n      }\n    },\n\n    xaxis: {\n      title: {\n        text: 'Subcategory',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    yaxis: {\n      title: {\n        text: 'Article Count',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    plot_bgcolor: 'white',\n    // Change this color to your desired background color\n    paper_bgcolor: 'skyblue' // Change this color to your desired background color\n  };\n\n  Plotly.newPlot('econChartContainer', data, layout);\n}\n\n//   const ctx = document.getElementById('econChart').getContext('2d');\n\n//   new Chart(ctx, {\n//     type: 'bar',\n//     data: {\n//       labels: categories,\n//       datasets: [{\n//         label: 'Total Results',\n//         data: totalResults,\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//         borderColor: 'rgba(75, 192, 192, 1)',\n//         borderWidth: 1\n//       }]\n//     },\n//     options: {\n//       responsive: true,\n//       scales: {\n//         y: {\n//           beginAtZero: true,\n//           title: {\n//             display: true,\n//             text: 'Total Results'\n//           }\n//         },\n//         x: {\n//           title: {\n//             display: true,\n//             text: 'Categories'\n//           }\n//         }\n//       }\n//     }\n//   });\n// }        \n\n//             totalSum += totalResults;\n\n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/quantBio.js\n");

/***/ }),

/***/ "./src/quantFinance.js":
/*!*****************************!*\
  !*** ./src/quantFinance.js ***!
  \*****************************/
/***/ (function() {

eval("function fetchQuantFinance() {\n  const qFinanceCategories = [\"q-fin.CP\", \"q-fin.EC\", \"q-fin.GN\", \"q-fin.MF\", \"q-fin.PM\", \"q-fin.PR\", \"q-fin.RM\", \"q-fin.ST\", \"q-fin.TR\"];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  qFinanceCategories.forEach(function (category) {\n    const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === qFinanceCategories.length) {\n        createBarQFChart(qFinanceCategories, totalResults);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\nfunction createBarQFChart(categories, totalResults) {\n  const data = [{\n    x: categories,\n    y: totalResults,\n    type: 'bar',\n    marker: {\n      color: 'orange',\n      // Change this color to your desired color\n      line: {\n        color: 'black',\n        // Set the bar border color\n        width: 1 // Set the bar border width\n      }\n    }\n  }];\n\n  const layout = {\n    title: {\n      text: 'Number of Articles Published per Subcategory',\n      font: {\n        family: 'Arial, sans-serif',\n        // Change this to your desired font family\n        size: 18,\n        // Change this to your desired font size\n        color: 'black' // Change this to your desired font color\n      }\n    },\n\n    xaxis: {\n      title: {\n        text: 'Subcategory',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    yaxis: {\n      title: {\n        text: 'Article Count',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    plot_bgcolor: 'white',\n    // Change this color to your desired background color\n    paper_bgcolor: 'skyblue' // Change this color to your desired background color\n  };\n\n  Plotly.newPlot('econChartContainer', data, layout);\n  // const ctx = document.getElementById('econChart').getContext('2d');\n}\n// new Chart(ctx, {\n//   type: 'bar',\n//   data: {\n//     labels: categories,\n//     datasets: [{\n//       label: 'Total Results',\n//       data: totalResults,\n//       backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//       borderColor: 'rgba(75, 192, 192, 1)',\n//       borderWidth: 1\n//     }]\n//   },\n//   options: {\n//     responsive: true,\n//     scales: {\n//       y: {\n//         beginAtZero: true,\n//         title: {\n//           display: true,\n//           text: 'Total Results'\n//         }\n//       },\n//       x: {\n//         title: {\n//           display: true,\n//           text: 'Categories'\n//         }\n//       }\n//     }\n//   }\n// });\n\n//             totalSum += totalResults;\n\n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/quantFinance.js\n");

/***/ }),

/***/ "./src/statistics.js":
/*!***************************!*\
  !*** ./src/statistics.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchStatistics: function() { return /* binding */ fetchStatistics; }\n/* harmony export */ });\nfunction fetchStatistics() {\n  const statsCategories = ['stat.AP', 'stat.CO', 'stat.ME', 'stat.ML', 'stat.OT', 'stat.TH'];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  statsCategories.forEach(function (category) {\n    const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === statsCategories.length) {\n        createStatsBarChart(statsCategories, totalResults);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\nfunction createStatsBarChart(categories, totalResults) {\n  const data = [{\n    x: categories,\n    y: totalResults,\n    type: 'bar',\n    marker: {\n      color: 'orange',\n      // Change this color to your desired color\n      line: {\n        color: 'black',\n        // Set the bar border color\n        width: 1 // Set the bar border width\n      }\n    }\n  }];\n\n  const layout = {\n    title: {\n      text: 'Number of Articles Published per Subcategory',\n      font: {\n        family: 'Arial, sans-serif',\n        // Change this to your desired font family\n        size: 18,\n        // Change this to your desired font size\n        color: 'black' // Change this to your desired font color\n      }\n    },\n\n    xaxis: {\n      title: {\n        text: 'Subcategory',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    yaxis: {\n      title: {\n        text: 'Article Count',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      }\n    },\n\n    plot_bgcolor: 'white',\n    // Change this color to your desired background color\n    paper_bgcolor: 'skyblue' // Change this color to your desired background color\n  };\n\n  Plotly.newPlot('econChartContainer', data, layout);\n}\n//   const ctx = document.getElementById('econChart').getContext('2d');\n\n//   new Chart(ctx, {\n//     type: 'bar',\n//     data: {\n//       labels: categories,\n//       datasets: [{\n//         label: 'Total Results',\n//         data: totalResults,\n//         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//         borderColor: 'rgba(75, 192, 192, 1)',\n//         borderWidth: 1\n//       }]\n//     },\n//     options: {\n//       responsive: true,\n//       scales: {\n//         y: {\n//           beginAtZero: true,\n//           title: {\n//             display: true,\n//             text: 'Total Results'\n//           }\n//         },\n//         x: {\n//           title: {\n//             display: true,\n//             text: 'Categories'\n//           }\n//         }\n//       }\n//     }\n//   });\n// }  \n\n//             totalSum += totalResults;\n\n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/statistics.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;