/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/authors.js":
/*!************************!*\
  !*** ./src/authors.js ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   displayAuthorStats: function() { return /* binding */ displayAuthorStats; }\n/* harmony export */ });\nfunction displayAuthorStats(author) {\n  const heatmapContainer = document.getElementById('heatmapContainer');\n  heatmapContainer.innerHTML = ''; // Clear previous article details\n\n  const loadingText = document.createElement('div');\n  loadingText.classList.add('loading-text');\n  loadingText.textContent = 'Loading';\n  const loadingIndicator = document.createElement('div');\n  loadingIndicator.classList.add('loading-indicator');\n  const loadingSymbol = document.createElement('div');\n  loadingSymbol.classList.add('loading-symbol');\n  loadingIndicator.appendChild(loadingText);\n  loadingIndicator.appendChild(loadingSymbol);\n  heatmapContainer.appendChild(loadingIndicator);\n  fetch(`https://export.arxiv.org/api/query?search_query=au:${author}&max_results=2000`, {\n    method: 'GET'\n  }).then(response => response.text()).then(data => {\n    // Process the response data\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(data, 'text/xml');\n    const entries = xmlDoc.getElementsByTagName('entry');\n    const publishedYears = Array.from(entries).map(entry => {\n      const publishedDate = entry.getElementsByTagName('published')[0].textContent;\n      return new Date(publishedDate).getFullYear();\n    });\n    const yearsCount = {};\n    publishedYears.forEach(year => {\n      yearsCount[year] = (yearsCount[year] || 0) + 1;\n    });\n    const years = Object.keys(yearsCount);\n    const counts = Object.values(yearsCount);\n\n    // Prepare data for the heatmap\n    const data1 = [{\n      x: years,\n      y: [''],\n      z: [counts],\n      type: 'heatmap',\n      colorscale: 'Viridis',\n      showscale: true,\n      hovertemplate: `<b>Year: %{x}</b><br>Author: ${author}<br>Articles: %{z}`,\n      colorbar: {\n        tickfont: {\n          color: 'white' // Change the color of the numbers on the gradient scale here\n        }\n      }\n    }];\n\n    // Define layout options for the heatmap\n    const layout = {\n      title: {\n        text: `# of ${author}'s Publications over the Past Years`,\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'white' // Change this to your desired font color\n        }\n      },\n\n      xaxis: {\n        title: {\n          text: 'Year',\n          font: {\n            family: 'Arial, sans-serif',\n            // Change this to your desired font family\n            size: 18,\n            // Change this to your desired font size\n            color: 'white' // Change this to your desired font color\n          }\n        },\n\n        tickfont: {\n          color: 'white'\n        }\n      },\n      yaxis: {\n        title: {\n          text: `${author}`,\n          font: {\n            family: 'Arial, sans-serif',\n            // Change this to your desired font family\n            size: 18,\n            // Change this to your desired font size\n            color: 'white' // Change this to your desired font color\n          }\n        },\n\n        tickfont: {\n          color: 'white'\n        }\n      },\n      plot_bgcolor: 'rgb(38, 48, 90)',\n      // Change this color to your desired background color\n      paper_bgcolor: 'rgb(38, 48, 90)'\n    };\n    heatmapContainer.removeChild(loadingIndicator);\n\n    // Plot the heatmap using Plotly\n    Plotly.newPlot('heatmapContainer', data1, layout);\n  }).catch(error => {\n    console.error('Error:', error);\n    loadingIndicator.remove();\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/authors.js\n");

/***/ }),

/***/ "./src/barChart.js":
/*!*************************!*\
  !*** ./src/barChart.js ***!
  \*************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createBarChart: function() { return /* binding */ createBarChart; }\n/* harmony export */ });\nfunction createBarChart(categories, totalResults, totalArticleCount, fullCategoryNames) {\n  const data = [{\n    x: categories,\n    y: totalResults,\n    type: 'bar',\n    marker: {\n      color: 'rgb(9, 238, 253)',\n      // Change this color to your desired color\n      line: {\n        color: 'black',\n        // Set the bar border color\n        width: 1 // Set the bar border width\n      }\n    },\n\n    text: fullCategoryNames,\n    // Display full category names inside the bar\n    hovertemplate: '%{text}<br>Article Count: %{y}'\n  }];\n  const layout = {\n    title: {\n      text: 'Number of Articles Published per Subcategory',\n      font: {\n        family: 'Arial, sans-serif',\n        // Change this to your desired font family\n        size: 18,\n        // Change this to your desired font size\n        color: 'white' // Change this to your desired font color\n      }\n    },\n\n    xaxis: {\n      title: {\n        text: 'Subcategory',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'white' // Change this to your desired font color\n        }\n      },\n\n      tickfont: {\n        color: 'white'\n      }\n    },\n    yaxis: {\n      title: {\n        text: 'Article Count',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'white' // Change this to your desired font color\n        }\n      },\n\n      tickfont: {\n        color: 'white'\n      }\n    },\n    plot_bgcolor: 'rgb(38, 48, 90)',\n    // Change this color to your desired background color\n    paper_bgcolor: 'rgb(38, 48, 90)' // Change this color to your desired background color\n  };\n\n  const chartContainer = document.getElementById('chartContainer');\n  chartContainer.innerHTML = '';\n\n  // Create div for total article count\n  const totalArticleCountDiv = document.getElementById('total-article-count');\n  totalArticleCountDiv.innerHTML = '';\n  const totalArticleCountButton = document.createElement('button');\n  totalArticleCountButton.textContent = `Category Total: ${totalArticleCount} articles`;\n  totalArticleCountButton.classList.add('total-article-count-button');\n\n  // Append total article count button to the chart container\n  totalArticleCountDiv.appendChild(totalArticleCountButton);\n  Plotly.newPlot('chartContainer', data, layout);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYmFyQ2hhcnQuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLGNBQWNBLENBQUNDLFVBQVUsRUFBRUMsWUFBWSxFQUFFQyxpQkFBaUIsRUFBRUMsaUJBQWlCLEVBQUU7RUFFM0YsTUFBTUMsSUFBSSxHQUFHLENBQUM7SUFDWkMsQ0FBQyxFQUFFTCxVQUFVO0lBQ2JNLENBQUMsRUFBRUwsWUFBWTtJQUNmTSxJQUFJLEVBQUUsS0FBSztJQUNYQyxNQUFNLEVBQUU7TUFDTkMsS0FBSyxFQUFFLGtCQUFrQjtNQUFFO01BQzNCQyxJQUFJLEVBQUU7UUFDSkQsS0FBSyxFQUFFLE9BQU87UUFBRTtRQUNoQkUsS0FBSyxFQUFFLENBQUMsQ0FBQztNQUNYO0lBQ0YsQ0FBQzs7SUFDREMsSUFBSSxFQUFFVCxpQkFBaUI7SUFBRTtJQUN6QlUsYUFBYSxFQUFFO0VBRWpCLENBQUMsQ0FBQztFQUVGLE1BQU1DLE1BQU0sR0FBRztJQUNiQyxLQUFLLEVBQUU7TUFDTEgsSUFBSSxFQUFFLDhDQUE4QztNQUNwREksSUFBSSxFQUFFO1FBQ0pDLE1BQU0sRUFBRSxtQkFBbUI7UUFBRTtRQUM3QkMsSUFBSSxFQUFFLEVBQUU7UUFBRTtRQUNWVCxLQUFLLEVBQUUsT0FBTyxDQUFDO01BQ2pCO0lBQ0YsQ0FBQzs7SUFDRFUsS0FBSyxFQUFFO01BQ0xKLEtBQUssRUFBRTtRQUNMSCxJQUFJLEVBQUUsYUFBYTtRQUNuQkksSUFBSSxFQUFFO1VBQ0pDLE1BQU0sRUFBRSxtQkFBbUI7VUFBRTtVQUM3QkMsSUFBSSxFQUFFLEVBQUU7VUFBRTtVQUNWVCxLQUFLLEVBQUUsT0FBTyxDQUFDO1FBQ2pCO01BQ0YsQ0FBQzs7TUFDRFcsUUFBUSxFQUFFO1FBQ1JYLEtBQUssRUFBRTtNQUNUO0lBQ0YsQ0FBQztJQUNEWSxLQUFLLEVBQUU7TUFDTE4sS0FBSyxFQUFFO1FBQ0xILElBQUksRUFBRSxlQUFlO1FBQ3JCSSxJQUFJLEVBQUU7VUFDSkMsTUFBTSxFQUFFLG1CQUFtQjtVQUFFO1VBQzdCQyxJQUFJLEVBQUUsRUFBRTtVQUFFO1VBQ1ZULEtBQUssRUFBRSxPQUFPLENBQUM7UUFDakI7TUFDRixDQUFDOztNQUNEVyxRQUFRLEVBQUU7UUFDUlgsS0FBSyxFQUFFO01BQ1Q7SUFDRixDQUFDO0lBQ0RhLFlBQVksRUFBRSxpQkFBaUI7SUFBRTtJQUNqQ0MsYUFBYSxFQUFFLGlCQUFpQixDQUFDO0VBQ25DLENBQUM7O0VBQ0QsTUFBTUMsY0FBYyxHQUFHQyxRQUFRLENBQUNDLGNBQWMsQ0FBQyxnQkFBZ0IsQ0FBQztFQUNoRUYsY0FBYyxDQUFDRyxTQUFTLEdBQUcsRUFBRTs7RUFFN0I7RUFDQSxNQUFNQyxvQkFBb0IsR0FBR0gsUUFBUSxDQUFDQyxjQUFjLENBQUMscUJBQXFCLENBQUM7RUFDM0VFLG9CQUFvQixDQUFDRCxTQUFTLEdBQUcsRUFBRTtFQUNuQyxNQUFNRSx1QkFBdUIsR0FBR0osUUFBUSxDQUFDSyxhQUFhLENBQUMsUUFBUSxDQUFDO0VBQ2hFRCx1QkFBdUIsQ0FBQ0UsV0FBVyxHQUFJLG1CQUFrQjdCLGlCQUFrQixXQUFVO0VBQ3JGMkIsdUJBQXVCLENBQUNHLFNBQVMsQ0FBQ0MsR0FBRyxDQUFDLDRCQUE0QixDQUFDOztFQUV2RTtFQUNFTCxvQkFBb0IsQ0FBRU0sV0FBVyxDQUFDTCx1QkFBdUIsQ0FBQztFQUl4RE0sTUFBTSxDQUFDQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUVoQyxJQUFJLEVBQUVVLE1BQU0sQ0FBQztBQUVoRCIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9iYXJDaGFydC5qcz9lYmY3Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVCYXJDaGFydChjYXRlZ29yaWVzLCB0b3RhbFJlc3VsdHMsIHRvdGFsQXJ0aWNsZUNvdW50LCBmdWxsQ2F0ZWdvcnlOYW1lcykge1xuICBcbiAgICBjb25zdCBkYXRhID0gW3tcbiAgICAgIHg6IGNhdGVnb3JpZXMsXG4gICAgICB5OiB0b3RhbFJlc3VsdHMsXG4gICAgICB0eXBlOiAnYmFyJyxcbiAgICAgIG1hcmtlcjoge1xuICAgICAgICBjb2xvcjogJ3JnYig5LCAyMzgsIDI1MyknLCAvLyBDaGFuZ2UgdGhpcyBjb2xvciB0byB5b3VyIGRlc2lyZWQgY29sb3JcbiAgICAgICAgbGluZToge1xuICAgICAgICAgIGNvbG9yOiAnYmxhY2snLCAvLyBTZXQgdGhlIGJhciBib3JkZXIgY29sb3JcbiAgICAgICAgICB3aWR0aDogMSAvLyBTZXQgdGhlIGJhciBib3JkZXIgd2lkdGhcbiAgICAgICAgfVxuICAgICAgfSwgXG4gICAgICB0ZXh0OiBmdWxsQ2F0ZWdvcnlOYW1lcywgLy8gRGlzcGxheSBmdWxsIGNhdGVnb3J5IG5hbWVzIGluc2lkZSB0aGUgYmFyXG4gICAgICBob3ZlcnRlbXBsYXRlOiAnJXt0ZXh0fTxicj5BcnRpY2xlIENvdW50OiAle3l9JyxcbiAgICAgIFxuICAgIH1dO1xuICAgIFxuICAgIGNvbnN0IGxheW91dCA9IHtcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIHRleHQ6ICdOdW1iZXIgb2YgQXJ0aWNsZXMgUHVibGlzaGVkIHBlciBTdWJjYXRlZ29yeScsXG4gICAgICAgIGZvbnQ6IHtcbiAgICAgICAgICBmYW1pbHk6ICdBcmlhbCwgc2Fucy1zZXJpZicsIC8vIENoYW5nZSB0aGlzIHRvIHlvdXIgZGVzaXJlZCBmb250IGZhbWlseVxuICAgICAgICAgIHNpemU6IDE4LCAvLyBDaGFuZ2UgdGhpcyB0byB5b3VyIGRlc2lyZWQgZm9udCBzaXplXG4gICAgICAgICAgY29sb3I6ICd3aGl0ZScgLy8gQ2hhbmdlIHRoaXMgdG8geW91ciBkZXNpcmVkIGZvbnQgY29sb3JcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHhheGlzOiB7XG4gICAgICAgIHRpdGxlOiB7XG4gICAgICAgICAgdGV4dDogJ1N1YmNhdGVnb3J5JyxcbiAgICAgICAgICBmb250OiB7XG4gICAgICAgICAgICBmYW1pbHk6ICdBcmlhbCwgc2Fucy1zZXJpZicsIC8vIENoYW5nZSB0aGlzIHRvIHlvdXIgZGVzaXJlZCBmb250IGZhbWlseVxuICAgICAgICAgICAgc2l6ZTogMTgsIC8vIENoYW5nZSB0aGlzIHRvIHlvdXIgZGVzaXJlZCBmb250IHNpemVcbiAgICAgICAgICAgIGNvbG9yOiAnd2hpdGUnIC8vIENoYW5nZSB0aGlzIHRvIHlvdXIgZGVzaXJlZCBmb250IGNvbG9yXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB0aWNrZm9udDoge1xuICAgICAgICAgIGNvbG9yOiAnd2hpdGUnXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAgeWF4aXM6IHtcbiAgICAgICAgdGl0bGU6IHtcbiAgICAgICAgICB0ZXh0OiAnQXJ0aWNsZSBDb3VudCcsXG4gICAgICAgICAgZm9udDoge1xuICAgICAgICAgICAgZmFtaWx5OiAnQXJpYWwsIHNhbnMtc2VyaWYnLCAvLyBDaGFuZ2UgdGhpcyB0byB5b3VyIGRlc2lyZWQgZm9udCBmYW1pbHlcbiAgICAgICAgICAgIHNpemU6IDE4LCAvLyBDaGFuZ2UgdGhpcyB0byB5b3VyIGRlc2lyZWQgZm9udCBzaXplXG4gICAgICAgICAgICBjb2xvcjogJ3doaXRlJyAvLyBDaGFuZ2UgdGhpcyB0byB5b3VyIGRlc2lyZWQgZm9udCBjb2xvclxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGlja2ZvbnQ6IHtcbiAgICAgICAgICBjb2xvcjogJ3doaXRlJ1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHBsb3RfYmdjb2xvcjogJ3JnYigzOCwgNDgsIDkwKScsIC8vIENoYW5nZSB0aGlzIGNvbG9yIHRvIHlvdXIgZGVzaXJlZCBiYWNrZ3JvdW5kIGNvbG9yXG4gICAgICBwYXBlcl9iZ2NvbG9yOiAncmdiKDM4LCA0OCwgOTApJyAvLyBDaGFuZ2UgdGhpcyBjb2xvciB0byB5b3VyIGRlc2lyZWQgYmFja2dyb3VuZCBjb2xvclxuICAgIH07XG4gICAgY29uc3QgY2hhcnRDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2hhcnRDb250YWluZXInKTtcbiAgICBjaGFydENvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcblxuICAgIC8vIENyZWF0ZSBkaXYgZm9yIHRvdGFsIGFydGljbGUgY291bnRcbiAgICBjb25zdCB0b3RhbEFydGljbGVDb3VudERpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd0b3RhbC1hcnRpY2xlLWNvdW50Jyk7XG4gICAgdG90YWxBcnRpY2xlQ291bnREaXYuaW5uZXJIVE1MID0gJyc7XG4gICAgY29uc3QgdG90YWxBcnRpY2xlQ291bnRCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgICB0b3RhbEFydGljbGVDb3VudEJ1dHRvbi50ZXh0Q29udGVudCA9IGBDYXRlZ29yeSBUb3RhbDogJHt0b3RhbEFydGljbGVDb3VudH0gYXJ0aWNsZXNgO1xuICAgIHRvdGFsQXJ0aWNsZUNvdW50QnV0dG9uLmNsYXNzTGlzdC5hZGQoJ3RvdGFsLWFydGljbGUtY291bnQtYnV0dG9uJyk7XG5cbi8vIEFwcGVuZCB0b3RhbCBhcnRpY2xlIGNvdW50IGJ1dHRvbiB0byB0aGUgY2hhcnQgY29udGFpbmVyXG4gIHRvdGFsQXJ0aWNsZUNvdW50RGl2IC5hcHBlbmRDaGlsZCh0b3RhbEFydGljbGVDb3VudEJ1dHRvbik7XG5cbiAgICBcblxuICAgIFBsb3RseS5uZXdQbG90KCdjaGFydENvbnRhaW5lcicsIGRhdGEsIGxheW91dCk7XG4gICAgXG4gIH0gICAgICAgICAiXSwibmFtZXMiOlsiY3JlYXRlQmFyQ2hhcnQiLCJjYXRlZ29yaWVzIiwidG90YWxSZXN1bHRzIiwidG90YWxBcnRpY2xlQ291bnQiLCJmdWxsQ2F0ZWdvcnlOYW1lcyIsImRhdGEiLCJ4IiwieSIsInR5cGUiLCJtYXJrZXIiLCJjb2xvciIsImxpbmUiLCJ3aWR0aCIsInRleHQiLCJob3ZlcnRlbXBsYXRlIiwibGF5b3V0IiwidGl0bGUiLCJmb250IiwiZmFtaWx5Iiwic2l6ZSIsInhheGlzIiwidGlja2ZvbnQiLCJ5YXhpcyIsInBsb3RfYmdjb2xvciIsInBhcGVyX2JnY29sb3IiLCJjaGFydENvbnRhaW5lciIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJ0b3RhbEFydGljbGVDb3VudERpdiIsInRvdGFsQXJ0aWNsZUNvdW50QnV0dG9uIiwiY3JlYXRlRWxlbWVudCIsInRleHRDb250ZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiYXBwZW5kQ2hpbGQiLCJQbG90bHkiLCJuZXdQbG90Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/barChart.js\n");

/***/ }),

/***/ "./src/cs.js":
/*!*******************!*\
  !*** ./src/cs.js ***!
  \*******************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchComputerScience: function() { return /* binding */ fetchComputerScience; }\n/* harmony export */ });\n/* harmony import */ var _barChart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./barChart */ \"./src/barChart.js\");\n\nfunction fetchComputerScience() {\n  const csCategories = ['cs.AI', 'cs.AR', 'cs.CC', 'cs.CE', 'cs.CG', 'cs.CL', 'cs.CR', 'cs.CV', 'cs.CY', 'cs.DB', 'cs.DC', 'cs.DL', 'cs.DM', 'cs.DS', 'cs.ET', 'cs.FL', 'cs.GL', 'cs.GR', 'cs.GT', 'cs.HC', 'cs.IR', 'cs.IT', 'cs.LG', 'cs.LO', 'cs.MA', 'cs.MM', 'cs.MS', 'cs.NA', 'cs.NE', 'cs.NI', 'cs.OH', 'cs.OS', 'cs.PF', 'cs.PL', 'cs.RO', 'cs.SC', 'cs.SD', 'cs.SE', 'cs.SI', 'cs.SY'];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  csCategories.forEach(function (category) {\n    const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === csCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = [\"Artificial Intelligence\", \"Hardware Architecture\", \"Computational Complexity\", \"Computational Engineering, Finance, and Science\", \"Computational Geometry\", \"Computation and Language\", \"Cryptography and Security\", \"Computer Vision and Pattern Recognition\", \"Computers and Society\", \"Databases\", \"Distributed, Parallel, and Cluster Computing\", \"Digital Libraries\", \"Discrete Mathematics\", \"Data Structures and Algorithms\", \"Emerging Technologies\", \"Formal Languages and Automata Theory\", \"General Literature\", \"Graphics\", \"Computer Science and Game Theory\", \"Human-Computer Interaction\", \"Information Retrieval\", \"Information Theory\", \"Machine Learning\", \"Logic in Computer Science\", \"Multiagent Systems\", \"Multimedia\", \"Mathematical Software\", \"Numerical Analysis\", \"Neural and Evolutionary Computing\", \"Networking and Internet Architecture\", \"Other Computer Science\", \"Operating Systems\", \"Performance\", \"Programming Languages\", \"Robotics\", \"Symbolic Computation\", \"Sound\", \"Software Engineering\", \"Social and Information Networks\", \"Systems and Control\"];\n        (0,_barChart__WEBPACK_IMPORTED_MODULE_0__.createBarChart)(csCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\n\n//             totalSum += totalResults;\n\n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cUJBQXFCLENBQUM7UUFDMUI3Qix5REFBYyxDQUFDRSxZQUFZLEVBQUVDLFlBQVksRUFBRXNCLGlCQUFpQixFQUFFSSxpQkFBaUIsQ0FBQztNQUNwRjtJQUNBLENBQUMsQ0FBQyxDQUNEQyxLQUFLLENBQUMsVUFBU0MsS0FBSyxFQUFFO01BQ3ZCVCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxRQUFRLEVBQUVRLEtBQUssQ0FBQztJQUM1QixDQUFDLENBQUM7RUFDTixDQUFDLENBQUM7QUFDTjs7QUFJQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvY3MuanM/MGFjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVCYXJDaGFydCB9IGZyb20gXCIuL2JhckNoYXJ0XCI7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoQ29tcHV0ZXJTY2llbmNlKCkge1xuICAgIFxuICAgIGNvbnN0IGNzQ2F0ZWdvcmllcyA9IFsnY3MuQUknLCAnY3MuQVInLCAnY3MuQ0MnLCAnY3MuQ0UnLCAnY3MuQ0cnLFxuICAgICAgICAnY3MuQ0wnLCAnY3MuQ1InLCAnY3MuQ1YnLCAnY3MuQ1knLCAnY3MuREInLFxuICAgICAgICAnY3MuREMnLCAnY3MuREwnLCAnY3MuRE0nLCAnY3MuRFMnLCAnY3MuRVQnLFxuICAgICAgICAnY3MuRkwnLCAnY3MuR0wnLCAnY3MuR1InLCAnY3MuR1QnLCAnY3MuSEMnLFxuICAgICAgICAnY3MuSVInLCAnY3MuSVQnLCAnY3MuTEcnLCAnY3MuTE8nLCAnY3MuTUEnLFxuICAgICAgICAnY3MuTU0nLCAnY3MuTVMnLCAnY3MuTkEnLCAnY3MuTkUnLCAnY3MuTkknLFxuICAgICAgICAnY3MuT0gnLCAnY3MuT1MnLCAnY3MuUEYnLCAnY3MuUEwnLCAnY3MuUk8nLFxuICAgICAgICAnY3MuU0MnLCAnY3MuU0QnLCAnY3MuU0UnLCAnY3MuU0knLCAnY3MuU1knXTsgXG4gICAgbGV0IHRvdGFsUmVzdWx0cyA9IFtdO1xuICAgIFxuICAgIC8vIEZldGNoIHRvdGFsIHJlc3VsdHMgZm9yIGVhY2ggY2F0ZWdvcnlcbiAgICBjc0NhdGVnb3JpZXMuZm9yRWFjaChmdW5jdGlvbihjYXRlZ29yeSkge1xuICAgICAgY29uc3QgYXBpVXJsID0gYGh0dHBzOi8vZXhwb3J0LmFyeGl2Lm9yZy9hcGkvcXVlcnk/c2VhcmNoX3F1ZXJ5PWNhdDoke2NhdGVnb3J5fSZzdGFydD0wJm1heF9yZXN1bHRzPTFgO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGZldGNoKGFwaVVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlVGV4dCkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgICAgICAgICAgY29uc3QgeG1sRG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhyZXNwb25zZVRleHQsICd0ZXh0L3htbCcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB0b3RhbFJlc3VsdHNFbGVtZW50ID0geG1sRG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdvcGVuc2VhcmNoOnRvdGFsUmVzdWx0cycpWzBdO1xuICAgICAgICAgICAgY29uc3QgdG90YWxSZXN1bHQgPSBwYXJzZUludCh0b3RhbFJlc3VsdHNFbGVtZW50LnRleHRDb250ZW50KTtcblxuXG4gICAgICAgICAgICB0b3RhbFJlc3VsdHMucHVzaCh0b3RhbFJlc3VsdCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0b3RhbFJlc3VsdHMpXG4gICAgICBcbi8vIENhbGwgdGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYmFyIGNoYXJ0IGFmdGVyIGFsbCBjYXRlZ29yaWVzIGhhdmUgYmVlbiBmZXRjaGVkXG4gICAgICAgIGlmICh0b3RhbFJlc3VsdHMubGVuZ3RoID09PSBjc0NhdGVnb3JpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCB0b3RhbEFydGljbGVDb3VudCA9IHRvdGFsUmVzdWx0cy5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgY3VyciwgMCk7XG4gICAgICAgICAgICBjb25zdCBmdWxsQ2F0ZWdvcnlOYW1lcyA9IFtcbiAgICAgICAgICAgICAgICBcIkFydGlmaWNpYWwgSW50ZWxsaWdlbmNlXCIsXG4gICAgICAgICAgICAgICAgXCJIYXJkd2FyZSBBcmNoaXRlY3R1cmVcIixcbiAgICAgICAgICAgICAgICBcIkNvbXB1dGF0aW9uYWwgQ29tcGxleGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiQ29tcHV0YXRpb25hbCBFbmdpbmVlcmluZywgRmluYW5jZSwgYW5kIFNjaWVuY2VcIixcbiAgICAgICAgICAgICAgICBcIkNvbXB1dGF0aW9uYWwgR2VvbWV0cnlcIixcbiAgICAgICAgICAgICAgICBcIkNvbXB1dGF0aW9uIGFuZCBMYW5ndWFnZVwiLFxuICAgICAgICAgICAgICAgIFwiQ3J5cHRvZ3JhcGh5IGFuZCBTZWN1cml0eVwiLFxuICAgICAgICAgICAgICAgIFwiQ29tcHV0ZXIgVmlzaW9uIGFuZCBQYXR0ZXJuIFJlY29nbml0aW9uXCIsXG4gICAgICAgICAgICAgICAgXCJDb21wdXRlcnMgYW5kIFNvY2lldHlcIixcbiAgICAgICAgICAgICAgICBcIkRhdGFiYXNlc1wiLFxuICAgICAgICAgICAgICAgIFwiRGlzdHJpYnV0ZWQsIFBhcmFsbGVsLCBhbmQgQ2x1c3RlciBDb21wdXRpbmdcIixcbiAgICAgICAgICAgICAgICBcIkRpZ2l0YWwgTGlicmFyaWVzXCIsXG4gICAgICAgICAgICAgICAgXCJEaXNjcmV0ZSBNYXRoZW1hdGljc1wiLFxuICAgICAgICAgICAgICAgIFwiRGF0YSBTdHJ1Y3R1cmVzIGFuZCBBbGdvcml0aG1zXCIsXG4gICAgICAgICAgICAgICAgXCJFbWVyZ2luZyBUZWNobm9sb2dpZXNcIixcbiAgICAgICAgICAgICAgICBcIkZvcm1hbCBMYW5ndWFnZXMgYW5kIEF1dG9tYXRhIFRoZW9yeVwiLFxuICAgICAgICAgICAgICAgIFwiR2VuZXJhbCBMaXRlcmF0dXJlXCIsXG4gICAgICAgICAgICAgICAgXCJHcmFwaGljc1wiLFxuICAgICAgICAgICAgICAgIFwiQ29tcHV0ZXIgU2NpZW5jZSBhbmQgR2FtZSBUaGVvcnlcIixcbiAgICAgICAgICAgICAgICBcIkh1bWFuLUNvbXB1dGVyIEludGVyYWN0aW9uXCIsXG4gICAgICAgICAgICAgICAgXCJJbmZvcm1hdGlvbiBSZXRyaWV2YWxcIixcbiAgICAgICAgICAgICAgICBcIkluZm9ybWF0aW9uIFRoZW9yeVwiLFxuICAgICAgICAgICAgICAgIFwiTWFjaGluZSBMZWFybmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiTG9naWMgaW4gQ29tcHV0ZXIgU2NpZW5jZVwiLFxuICAgICAgICAgICAgICAgIFwiTXVsdGlhZ2VudCBTeXN0ZW1zXCIsXG4gICAgICAgICAgICAgICAgXCJNdWx0aW1lZGlhXCIsXG4gICAgICAgICAgICAgICAgXCJNYXRoZW1hdGljYWwgU29mdHdhcmVcIixcbiAgICAgICAgICAgICAgICBcIk51bWVyaWNhbCBBbmFseXNpc1wiLFxuICAgICAgICAgICAgICAgIFwiTmV1cmFsIGFuZCBFdm9sdXRpb25hcnkgQ29tcHV0aW5nXCIsXG4gICAgICAgICAgICAgICAgXCJOZXR3b3JraW5nIGFuZCBJbnRlcm5ldCBBcmNoaXRlY3R1cmVcIixcbiAgICAgICAgICAgICAgICBcIk90aGVyIENvbXB1dGVyIFNjaWVuY2VcIixcbiAgICAgICAgICAgICAgICBcIk9wZXJhdGluZyBTeXN0ZW1zXCIsXG4gICAgICAgICAgICAgICAgXCJQZXJmb3JtYW5jZVwiLFxuICAgICAgICAgICAgICAgIFwiUHJvZ3JhbW1pbmcgTGFuZ3VhZ2VzXCIsXG4gICAgICAgICAgICAgICAgXCJSb2JvdGljc1wiLFxuICAgICAgICAgICAgICAgIFwiU3ltYm9saWMgQ29tcHV0YXRpb25cIixcbiAgICAgICAgICAgICAgICBcIlNvdW5kXCIsXG4gICAgICAgICAgICAgICAgXCJTb2Z0d2FyZSBFbmdpbmVlcmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiU29jaWFsIGFuZCBJbmZvcm1hdGlvbiBOZXR3b3Jrc1wiLFxuICAgICAgICAgICAgICAgIFwiU3lzdGVtcyBhbmQgQ29udHJvbFwiXVxuICAgICAgICAgICAgY3JlYXRlQmFyQ2hhcnQoY3NDYXRlZ29yaWVzLCB0b3RhbFJlc3VsdHMsIHRvdGFsQXJ0aWNsZUNvdW50LCBmdWxsQ2F0ZWdvcnlOYW1lcyk7XG4gICAgICAgIH0gXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZygnRXJyb3I6JywgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuXG4gICAgICAgICAgICBcbi8vICAgICAgICAgICAgIHRvdGFsU3VtICs9IHRvdGFsUmVzdWx0cztcbiAgICAgICAgICAgIFxuLy8gICAgICAgICAgICAgLy8gSGFuZGxlIGluZGl2aWR1YWwgY2F0ZWdvcnkgdG90YWwgcmVzdWx0c1xuLy8gICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYFRvdGFsIFJlc3VsdHMgZm9yICR7Y2F0ZWdvcnl9OmAsIHRvdGFsUmVzdWx0cyk7XG4vLyAgICAgICAgIH0pXG4vLyAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuLy8gICAgICAgICAgICAgLy8gSGFuZGxlIGVycm9yXG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgZmV0Y2hpbmcgJHtjYXRlZ29yeX0gcmVzdWx0czpgLCBlcnJvcik7XG4vLyAgICAgICAgIH0pO1xuLy8gICAgIH0pO1xuICAgIFxuLy8gICAgIC8vIEhhbmRsZSB0b3RhbCBzdW0gb2YgYWxsIGNhdGVnb3JpZXNcbi8vICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICBjb25zb2xlLmxvZygnVG90YWwgU3VtIG9mIFJlc3VsdHM6JywgdG90YWxTdW0pO1xuLy8gICAgIH0sIDEwMDAwKTtcbi8vIH0iXSwibmFtZXMiOlsiY3JlYXRlQmFyQ2hhcnQiLCJmZXRjaENvbXB1dGVyU2NpZW5jZSIsImNzQ2F0ZWdvcmllcyIsInRvdGFsUmVzdWx0cyIsImZvckVhY2giLCJjYXRlZ29yeSIsImFwaVVybCIsImZldGNoIiwidGhlbiIsInJlc3BvbnNlIiwidGV4dCIsInJlc3BvbnNlVGV4dCIsInBhcnNlciIsIkRPTVBhcnNlciIsInhtbERvYyIsInBhcnNlRnJvbVN0cmluZyIsInRvdGFsUmVzdWx0c0VsZW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInRvdGFsUmVzdWx0IiwicGFyc2VJbnQiLCJ0ZXh0Q29udGVudCIsInB1c2giLCJjb25zb2xlIiwibG9nIiwibGVuZ3RoIiwidG90YWxBcnRpY2xlQ291bnQiLCJyZWR1Y2UiLCJhY2MiLCJjdXJyIiwiZnVsbENhdGVnb3J5TmFtZXMiLCJjYXRjaCIsImVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/cs.js\n");

/***/ }),

/***/ "./src/economics.js":
/*!**************************!*\
  !*** ./src/economics.js ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchEconomics: function() { return /* binding */ fetchEconomics; }\n/* harmony export */ });\n/* harmony import */ var _barChart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./barChart */ \"./src/barChart.js\");\n\nfunction fetchEconomics() {\n  const economicsCategories = ['econ.EM', 'econ.GN', 'econ.TH'];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  economicsCategories.forEach(function (category) {\n    const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === economicsCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = ['Econometrics', 'General Economics', 'Theoretical Economics'];\n        (0,_barChart__WEBPACK_IMPORTED_MODULE_0__.createBarChart)(economicsCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\n\n// function createBarChart(categories, totalResults) {\n//     const ctx = document.getElementById('econChart').getContext('2d');\n\n//     new Chart(ctx, {\n//       type: 'bar',\n//       data: {\n//         labels: categories,\n//         datasets: [{\n//           label: 'Total Results',\n//           data: totalResults,\n//           backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//           borderColor: 'rgba(75, 192, 192, 1)',\n//           borderWidth: 1\n//         }]\n//       },\n//       options: {\n//         responsive: true,\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//             title: {\n//               display: true,\n//               text: 'Total Results'\n//             }\n//           },\n//           x: {\n//             title: {\n//               display: true,\n//               text: 'Categories'\n//             }\n//           }\n//         }\n//       }\n//     });\n//   }        \n\n//             totalSum += totalResults;\n\n//             // Handle individual category total results\n//             console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZWNvbm9taWNzLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBRXJDLFNBQVNDLGNBQWNBLENBQUEsRUFBRztFQUU3QixNQUFNQyxtQkFBbUIsR0FBRyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDO0VBQzdELElBQUlDLFlBQVksR0FBRyxFQUFFOztFQUVyQjtFQUNBRCxtQkFBbUIsQ0FBQ0UsT0FBTyxDQUFDLFVBQVNDLFFBQVEsRUFBRTtJQUM3QyxNQUFNQyxNQUFNLEdBQUksdURBQXNERCxRQUFTLHdCQUF1QjtJQUdwR0UsS0FBSyxDQUFDRCxNQUFNLENBQUMsQ0FDWkUsSUFBSSxDQUFDLFVBQVNDLFFBQVEsRUFBRTtNQUNyQixPQUFPQSxRQUFRLENBQUNDLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUNERixJQUFJLENBQUMsVUFBU0csWUFBWSxFQUFFO01BQ3pCLE1BQU1DLE1BQU0sR0FBRyxJQUFJQyxTQUFTLENBQUMsQ0FBQztNQUM5QixNQUFNQyxNQUFNLEdBQUdGLE1BQU0sQ0FBQ0csZUFBZSxDQUFDSixZQUFZLEVBQUUsVUFBVSxDQUFDO01BRS9ELE1BQU1LLG1CQUFtQixHQUFHRixNQUFNLENBQUNHLG9CQUFvQixDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ3JGLE1BQU1DLFdBQVcsR0FBR0MsUUFBUSxDQUFDSCxtQkFBbUIsQ0FBQ0ksV0FBVyxDQUFDO01BRTdEakIsWUFBWSxDQUFDa0IsSUFBSSxDQUFDSCxXQUFXLENBQUM7TUFDOUJJLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDcEIsWUFBWSxDQUFDOztNQUVyQztNQUNRLElBQUlBLFlBQVksQ0FBQ3FCLE1BQU0sS0FBS3RCLG1CQUFtQixDQUFDc0IsTUFBTSxFQUFFO1FBQ3BELE1BQU1DLGlCQUFpQixHQUFHdEIsWUFBWSxDQUFDdUIsTUFBTSxDQUFDLENBQUNDLEdBQUcsRUFBRUMsSUFBSSxLQUFLRCxHQUFHLEdBQUdDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDM0UsTUFBTUMsaUJBQWlCLEdBQUcsQ0FBQyxjQUFjLEVBQUUsbUJBQW1CLEVBQUUsdUJBQXVCLENBQUM7UUFDeEY3Qix5REFBYyxDQUFDRSxtQkFBbUIsRUFBRUMsWUFBWSxFQUFFc0IsaUJBQWlCLEVBQUVJLGlCQUFpQixDQUFDO01BQzNGO0lBQ0EsQ0FBQyxDQUFDLENBQ0RDLEtBQUssQ0FBQyxVQUFTQyxLQUFLLEVBQUU7TUFDdkJULE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFFBQVEsRUFBRVEsS0FBSyxDQUFDO0lBQzVCLENBQUMsQ0FBQztFQUNOLENBQUMsQ0FBQztBQUNOOztBQU1BO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvZWNvbm9taWNzLmpzPzljOTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQmFyQ2hhcnQgfSBmcm9tIFwiLi9iYXJDaGFydFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hFY29ub21pY3MoKSB7XG4gICAgXG4gICAgY29uc3QgZWNvbm9taWNzQ2F0ZWdvcmllcyA9IFsnZWNvbi5FTScsICdlY29uLkdOJywgJ2Vjb24uVEgnXTsgXG4gICAgbGV0IHRvdGFsUmVzdWx0cyA9IFtdO1xuICAgIFxuICAgIC8vIEZldGNoIHRvdGFsIHJlc3VsdHMgZm9yIGVhY2ggY2F0ZWdvcnlcbiAgICBlY29ub21pY3NDYXRlZ29yaWVzLmZvckVhY2goZnVuY3Rpb24oY2F0ZWdvcnkpIHtcbiAgICAgIGNvbnN0IGFwaVVybCA9IGBodHRwczovL2V4cG9ydC5hcnhpdi5vcmcvYXBpL3F1ZXJ5P3NlYXJjaF9xdWVyeT1jYXQ6JHtjYXRlZ29yeX0mc3RhcnQ9MCZtYXhfcmVzdWx0cz0xYDtcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBmZXRjaChhcGlVcmwpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZVRleHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IHhtbERvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcocmVzcG9uc2VUZXh0LCAndGV4dC94bWwnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgdG90YWxSZXN1bHRzRWxlbWVudCA9IHhtbERvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnb3BlbnNlYXJjaDp0b3RhbFJlc3VsdHMnKVswXTtcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsUmVzdWx0ID0gcGFyc2VJbnQodG90YWxSZXN1bHRzRWxlbWVudC50ZXh0Q29udGVudCk7XG5cbiAgICAgICAgICAgIHRvdGFsUmVzdWx0cy5wdXNoKHRvdGFsUmVzdWx0KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRvdGFsUmVzdWx0cylcbiAgICAgIFxuLy8gQ2FsbCB0aGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBiYXIgY2hhcnQgYWZ0ZXIgYWxsIGNhdGVnb3JpZXMgaGF2ZSBiZWVuIGZldGNoZWRcbiAgICAgICAgaWYgKHRvdGFsUmVzdWx0cy5sZW5ndGggPT09IGVjb25vbWljc0NhdGVnb3JpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCB0b3RhbEFydGljbGVDb3VudCA9IHRvdGFsUmVzdWx0cy5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgY3VyciwgMCk7XG4gICAgICAgICAgICBjb25zdCBmdWxsQ2F0ZWdvcnlOYW1lcyA9IFsnRWNvbm9tZXRyaWNzJywgJ0dlbmVyYWwgRWNvbm9taWNzJywgJ1RoZW9yZXRpY2FsIEVjb25vbWljcyddO1xuICAgICAgICAgICAgY3JlYXRlQmFyQ2hhcnQoZWNvbm9taWNzQ2F0ZWdvcmllcywgdG90YWxSZXN1bHRzLCB0b3RhbEFydGljbGVDb3VudCwgZnVsbENhdGVnb3J5TmFtZXMpO1xuICAgICAgICB9IFxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yOicsIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5cbiAgICBcblxuXG5cbi8vIGZ1bmN0aW9uIGNyZWF0ZUJhckNoYXJ0KGNhdGVnb3JpZXMsIHRvdGFsUmVzdWx0cykge1xuLy8gICAgIGNvbnN0IGN0eCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlY29uQ2hhcnQnKS5nZXRDb250ZXh0KCcyZCcpO1xuICAgIFxuLy8gICAgIG5ldyBDaGFydChjdHgsIHtcbi8vICAgICAgIHR5cGU6ICdiYXInLFxuLy8gICAgICAgZGF0YToge1xuLy8gICAgICAgICBsYWJlbHM6IGNhdGVnb3JpZXMsXG4vLyAgICAgICAgIGRhdGFzZXRzOiBbe1xuLy8gICAgICAgICAgIGxhYmVsOiAnVG90YWwgUmVzdWx0cycsXG4vLyAgICAgICAgICAgZGF0YTogdG90YWxSZXN1bHRzLFxuLy8gICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoNzUsIDE5MiwgMTkyLCAwLjYpJyxcbi8vICAgICAgICAgICBib3JkZXJDb2xvcjogJ3JnYmEoNzUsIDE5MiwgMTkyLCAxKScsXG4vLyAgICAgICAgICAgYm9yZGVyV2lkdGg6IDFcbi8vICAgICAgICAgfV1cbi8vICAgICAgIH0sXG4vLyAgICAgICBvcHRpb25zOiB7XG4vLyAgICAgICAgIHJlc3BvbnNpdmU6IHRydWUsXG4vLyAgICAgICAgIHNjYWxlczoge1xuLy8gICAgICAgICAgIHk6IHtcbi8vICAgICAgICAgICAgIGJlZ2luQXRaZXJvOiB0cnVlLFxuLy8gICAgICAgICAgICAgdGl0bGU6IHtcbi8vICAgICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbi8vICAgICAgICAgICAgICAgdGV4dDogJ1RvdGFsIFJlc3VsdHMnXG4vLyAgICAgICAgICAgICB9XG4vLyAgICAgICAgICAgfSxcbi8vICAgICAgICAgICB4OiB7XG4vLyAgICAgICAgICAgICB0aXRsZToge1xuLy8gICAgICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuLy8gICAgICAgICAgICAgICB0ZXh0OiAnQ2F0ZWdvcmllcydcbi8vICAgICAgICAgICAgIH1cbi8vICAgICAgICAgICB9XG4vLyAgICAgICAgIH1cbi8vICAgICAgIH1cbi8vICAgICB9KTtcbi8vICAgfSAgICAgICAgXG4gIFxuXG4gICAgICAgICAgICBcbi8vICAgICAgICAgICAgIHRvdGFsU3VtICs9IHRvdGFsUmVzdWx0cztcbiAgICAgICAgICAgIFxuLy8gICAgICAgICAgICAgLy8gSGFuZGxlIGluZGl2aWR1YWwgY2F0ZWdvcnkgdG90YWwgcmVzdWx0c1xuLy8gICAgICAgICAgICAgY29uc29sZS5sb2coYFRvdGFsIFJlc3VsdHMgZm9yICR7Y2F0ZWdvcnl9OmAsIHRvdGFsUmVzdWx0cyk7XG4vLyAgICAgICAgIH0pXG4vLyAgICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuLy8gICAgICAgICAgICAgLy8gSGFuZGxlIGVycm9yXG4vLyAgICAgICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgZmV0Y2hpbmcgJHtjYXRlZ29yeX0gcmVzdWx0czpgLCBlcnJvcik7XG4vLyAgICAgICAgIH0pO1xuLy8gICAgIH0pO1xuICAgIFxuLy8gICAgIC8vIEhhbmRsZSB0b3RhbCBzdW0gb2YgYWxsIGNhdGVnb3JpZXNcbi8vICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuLy8gICAgICAgICBjb25zb2xlLmxvZygnVG90YWwgU3VtIG9mIFJlc3VsdHM6JywgdG90YWxTdW0pO1xuLy8gICAgIH0sIDEwMDAwKTtcbi8vIH0iXSwibmFtZXMiOlsiY3JlYXRlQmFyQ2hhcnQiLCJmZXRjaEVjb25vbWljcyIsImVjb25vbWljc0NhdGVnb3JpZXMiLCJ0b3RhbFJlc3VsdHMiLCJmb3JFYWNoIiwiY2F0ZWdvcnkiLCJhcGlVcmwiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsInRleHQiLCJyZXNwb25zZVRleHQiLCJwYXJzZXIiLCJET01QYXJzZXIiLCJ4bWxEb2MiLCJwYXJzZUZyb21TdHJpbmciLCJ0b3RhbFJlc3VsdHNFbGVtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJ0b3RhbFJlc3VsdCIsInBhcnNlSW50IiwidGV4dENvbnRlbnQiLCJwdXNoIiwiY29uc29sZSIsImxvZyIsImxlbmd0aCIsInRvdGFsQXJ0aWNsZUNvdW50IiwicmVkdWNlIiwiYWNjIiwiY3VyciIsImZ1bGxDYXRlZ29yeU5hbWVzIiwiY2F0Y2giLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/economics.js\n");

/***/ }),

/***/ "./src/electricalengineering.js":
/*!**************************************!*\
  !*** ./src/electricalengineering.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchElectricalEngineering: function() { return /* binding */ fetchElectricalEngineering; }\n/* harmony export */ });\n/* harmony import */ var _barChart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./barChart */ \"./src/barChart.js\");\n\nfunction fetchElectricalEngineering() {\n  const eeCategories = [\"eess.AS\", \"eess.IV\", \"eess.SP\", \"eess.SY\"];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  eeCategories.forEach(function (category) {\n    const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === eeCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = [\"Audio and Speech Processing\", \"Image and Video Processing\", \"Signal Processing\", \"Systems and Control\"];\n        (0,_barChart__WEBPACK_IMPORTED_MODULE_0__.createBarChart)(eeCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\n\n//             totalSum += totalResults;\n\n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZWxlY3RyaWNhbGVuZ2luZWVyaW5nLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBR3JDLFNBQVNDLDBCQUEwQkEsQ0FBQSxFQUFHO0VBRXpDLE1BQU1DLFlBQVksR0FBRyxDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQztFQUNqRSxJQUFJQyxZQUFZLEdBQUcsRUFBRTs7RUFFckI7RUFDQUQsWUFBWSxDQUFDRSxPQUFPLENBQUMsVUFBU0MsUUFBUSxFQUFFO0lBQ3BDLE1BQU1DLE1BQU0sR0FBSSx1REFBc0RELFFBQVMsd0JBQXVCO0lBR3RHRSxLQUFLLENBQUNELE1BQU0sQ0FBQyxDQUNaRSxJQUFJLENBQUMsVUFBU0MsUUFBUSxFQUFFO01BQ3JCLE9BQU9BLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQyxDQUFDLENBQ0RGLElBQUksQ0FBQyxVQUFTRyxZQUFZLEVBQUU7TUFDekIsTUFBTUMsTUFBTSxHQUFHLElBQUlDLFNBQVMsQ0FBQyxDQUFDO01BQzlCLE1BQU1DLE1BQU0sR0FBR0YsTUFBTSxDQUFDRyxlQUFlLENBQUNKLFlBQVksRUFBRSxVQUFVLENBQUM7TUFFL0QsTUFBTUssbUJBQW1CLEdBQUdGLE1BQU0sQ0FBQ0csb0JBQW9CLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDckYsTUFBTUMsV0FBVyxHQUFHQyxRQUFRLENBQUNILG1CQUFtQixDQUFDSSxXQUFXLENBQUM7TUFFN0RqQixZQUFZLENBQUNrQixJQUFJLENBQUNILFdBQVcsQ0FBQztNQUM5QkksT0FBTyxDQUFDQyxHQUFHLENBQUNwQixZQUFZLENBQUM7O01BRXJDO01BQ1EsSUFBSUEsWUFBWSxDQUFDcUIsTUFBTSxLQUFLdEIsWUFBWSxDQUFDc0IsTUFBTSxFQUFFO1FBQzdDLE1BQU1DLGlCQUFpQixHQUFHdEIsWUFBWSxDQUFDdUIsTUFBTSxDQUFDLENBQUNDLEdBQUcsRUFBRUMsSUFBSSxLQUFLRCxHQUFHLEdBQUdDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDM0UsTUFBTUMsaUJBQWlCLEdBQUcsQ0FBQyw2QkFBNkIsRUFDeEQsNEJBQTRCLEVBQzVCLG1CQUFtQixFQUNuQixxQkFBcUIsQ0FBQztRQUN0QjdCLHlEQUFjLENBQUNFLFlBQVksRUFBRUMsWUFBWSxFQUFFc0IsaUJBQWlCLEVBQUVJLGlCQUFpQixDQUFDO01BQ3BGO0lBQ0EsQ0FBQyxDQUFDLENBQ0RDLEtBQUssQ0FBQyxVQUFTQyxLQUFLLEVBQUU7TUFDdkJULE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLFFBQVEsRUFBRVEsS0FBSyxDQUFDO0lBQzVCLENBQUMsQ0FBQztFQUNOLENBQUMsQ0FBQztBQUNOOztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9lbGVjdHJpY2FsZW5naW5lZXJpbmcuanM/Y2QwOSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVCYXJDaGFydCB9IGZyb20gXCIuL2JhckNoYXJ0XCI7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGZldGNoRWxlY3RyaWNhbEVuZ2luZWVyaW5nKCkge1xuICAgIFxuICAgIGNvbnN0IGVlQ2F0ZWdvcmllcyA9IFtcImVlc3MuQVNcIiwgXCJlZXNzLklWXCIsIFwiZWVzcy5TUFwiLCBcImVlc3MuU1lcIl07IFxuICAgIGxldCB0b3RhbFJlc3VsdHMgPSBbXTtcbiAgICBcbiAgICAvLyBGZXRjaCB0b3RhbCByZXN1bHRzIGZvciBlYWNoIGNhdGVnb3J5XG4gICAgZWVDYXRlZ29yaWVzLmZvckVhY2goZnVuY3Rpb24oY2F0ZWdvcnkpIHtcbiAgICAgICAgY29uc3QgYXBpVXJsID0gYGh0dHBzOi8vZXhwb3J0LmFyeGl2Lm9yZy9hcGkvcXVlcnk/c2VhcmNoX3F1ZXJ5PWNhdDoke2NhdGVnb3J5fSZzdGFydD0wJm1heF9yZXN1bHRzPTFgO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGZldGNoKGFwaVVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlVGV4dCkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgICAgICAgICAgY29uc3QgeG1sRG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhyZXNwb25zZVRleHQsICd0ZXh0L3htbCcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB0b3RhbFJlc3VsdHNFbGVtZW50ID0geG1sRG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdvcGVuc2VhcmNoOnRvdGFsUmVzdWx0cycpWzBdO1xuICAgICAgICAgICAgY29uc3QgdG90YWxSZXN1bHQgPSBwYXJzZUludCh0b3RhbFJlc3VsdHNFbGVtZW50LnRleHRDb250ZW50KTtcblxuICAgICAgICAgICAgdG90YWxSZXN1bHRzLnB1c2godG90YWxSZXN1bHQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2codG90YWxSZXN1bHRzKVxuICAgICAgXG4vLyBDYWxsIHRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGJhciBjaGFydCBhZnRlciBhbGwgY2F0ZWdvcmllcyBoYXZlIGJlZW4gZmV0Y2hlZFxuICAgICAgICBpZiAodG90YWxSZXN1bHRzLmxlbmd0aCA9PT0gZWVDYXRlZ29yaWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgdG90YWxBcnRpY2xlQ291bnQgPSB0b3RhbFJlc3VsdHMucmVkdWNlKChhY2MsIGN1cnIpID0+IGFjYyArIGN1cnIsIDApO1xuICAgICAgICAgICAgY29uc3QgZnVsbENhdGVnb3J5TmFtZXMgPSBbXCJBdWRpbyBhbmQgU3BlZWNoIFByb2Nlc3NpbmdcIixcbiAgICAgICAgICAgIFwiSW1hZ2UgYW5kIFZpZGVvIFByb2Nlc3NpbmdcIixcbiAgICAgICAgICAgIFwiU2lnbmFsIFByb2Nlc3NpbmdcIixcbiAgICAgICAgICAgIFwiU3lzdGVtcyBhbmQgQ29udHJvbFwiXVxuICAgICAgICAgICAgY3JlYXRlQmFyQ2hhcnQoZWVDYXRlZ29yaWVzLCB0b3RhbFJlc3VsdHMsIHRvdGFsQXJ0aWNsZUNvdW50LCBmdWxsQ2F0ZWdvcnlOYW1lcyk7XG4gICAgICAgIH0gXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZygnRXJyb3I6JywgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbiAgICAgICAgICAgIFxuXG4vLyAgICAgICAgICAgICB0b3RhbFN1bSArPSB0b3RhbFJlc3VsdHM7XG4gICAgICAgICAgICBcbi8vICAgICAgICAgICAgIC8vIEhhbmRsZSBpbmRpdmlkdWFsIGNhdGVnb3J5IHRvdGFsIHJlc3VsdHNcbi8vICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBUb3RhbCBSZXN1bHRzIGZvciAke2NhdGVnb3J5fTpgLCB0b3RhbFJlc3VsdHMpO1xuLy8gICAgICAgICB9KVxuLy8gICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbi8vICAgICAgICAgICAgIC8vIEhhbmRsZSBlcnJvclxuLy8gICAgICAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGZldGNoaW5nICR7Y2F0ZWdvcnl9IHJlc3VsdHM6YCwgZXJyb3IpO1xuLy8gICAgICAgICB9KTtcbi8vICAgICB9KTtcbiAgICBcbi8vICAgICAvLyBIYW5kbGUgdG90YWwgc3VtIG9mIGFsbCBjYXRlZ29yaWVzXG4vLyAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbi8vICAgICAgICAgY29uc29sZS5sb2coJ1RvdGFsIFN1bSBvZiBSZXN1bHRzOicsIHRvdGFsU3VtKTtcbi8vICAgICB9LCAxMDAwMCk7XG4vLyB9Il0sIm5hbWVzIjpbImNyZWF0ZUJhckNoYXJ0IiwiZmV0Y2hFbGVjdHJpY2FsRW5naW5lZXJpbmciLCJlZUNhdGVnb3JpZXMiLCJ0b3RhbFJlc3VsdHMiLCJmb3JFYWNoIiwiY2F0ZWdvcnkiLCJhcGlVcmwiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsInRleHQiLCJyZXNwb25zZVRleHQiLCJwYXJzZXIiLCJET01QYXJzZXIiLCJ4bWxEb2MiLCJwYXJzZUZyb21TdHJpbmciLCJ0b3RhbFJlc3VsdHNFbGVtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJ0b3RhbFJlc3VsdCIsInBhcnNlSW50IiwidGV4dENvbnRlbnQiLCJwdXNoIiwiY29uc29sZSIsImxvZyIsImxlbmd0aCIsInRvdGFsQXJ0aWNsZUNvdW50IiwicmVkdWNlIiwiYWNjIiwiY3VyciIsImZ1bGxDYXRlZ29yeU5hbWVzIiwiY2F0Y2giLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/electricalengineering.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _physics_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./physics.js */ \"./src/physics.js\");\n/* harmony import */ var _economics_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./economics.js */ \"./src/economics.js\");\n/* harmony import */ var _math_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./math.js */ \"./src/math.js\");\n/* harmony import */ var _cs_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cs.js */ \"./src/cs.js\");\n/* harmony import */ var _electricalengineering_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./electricalengineering.js */ \"./src/electricalengineering.js\");\n/* harmony import */ var _statistics_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./statistics.js */ \"./src/statistics.js\");\n/* harmony import */ var _quantBio_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./quantBio.js */ \"./src/quantBio.js\");\n/* harmony import */ var _quantFinance_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./quantFinance.js */ \"./src/quantFinance.js\");\n/* harmony import */ var _searchBar_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./searchBar.js */ \"./src/searchBar.js\");\n// import searchBar from './src/searchBar.js'\n\n\n\n\n\n\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  console.log(\"its working\");\n  document.getElementById('economicsButton').addEventListener('click', function () {\n    (0,_economics_js__WEBPACK_IMPORTED_MODULE_1__.fetchEconomics)();\n  });\n  document.getElementById('mathButton').addEventListener('click', function () {\n    (0,_math_js__WEBPACK_IMPORTED_MODULE_2__.fetchMath)();\n  });\n  document.getElementById('csButton').addEventListener('click', function () {\n    (0,_cs_js__WEBPACK_IMPORTED_MODULE_3__.fetchComputerScience)();\n  });\n  document.getElementById('physicsButton').addEventListener('click', function () {\n    (0,_physics_js__WEBPACK_IMPORTED_MODULE_0__.fetchPhysics)();\n  });\n  document.getElementById('eeButton').addEventListener('click', function () {\n    (0,_electricalengineering_js__WEBPACK_IMPORTED_MODULE_4__.fetchElectricalEngineering)();\n  });\n  document.getElementById('statsButton').addEventListener('click', function () {\n    (0,_statistics_js__WEBPACK_IMPORTED_MODULE_5__.fetchStatistics)();\n  });\n  document.getElementById('quantBioButton').addEventListener('click', function () {\n    (0,_quantBio_js__WEBPACK_IMPORTED_MODULE_6__.fetchQuantBio)();\n  });\n  document.getElementById('quantFinanceButton').addEventListener('click', function () {\n    (0,_quantFinance_js__WEBPACK_IMPORTED_MODULE_7__.fetchQuantFinance)();\n  });\n  document.getElementById('search-button').addEventListener('submit', function () {\n    (0,_searchBar_js__WEBPACK_IMPORTED_MODULE_8__.handleSubmit)();\n  });\n  init();\n});\nfunction init() {\n  // Add event listener to the form\n  const form = document.getElementById('search-form');\n  form.addEventListener('submit', _searchBar_js__WEBPACK_IMPORTED_MODULE_8__.handleSubmit);\n\n  // Add event listener to the search button\n  const searchButton = document.getElementById('search-button');\n  searchButton.addEventListener('click', _searchBar_js__WEBPACK_IMPORTED_MODULE_8__.handleSubmit);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO0FBQzBDO0FBQ0k7QUFDVjtBQUNTO0FBQ3lCO0FBQ3RCO0FBQ0o7QUFDUTtBQUNOO0FBRzlDUyxRQUFRLENBQUNDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLE1BQU07RUFDaERDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGFBQWEsQ0FBQztFQUUxQkgsUUFBUSxDQUFDSSxjQUFjLENBQUMsaUJBQWlCLENBQUMsQ0FBQ0gsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFlBQVc7SUFFOUVULDZEQUFjLENBQUMsQ0FBQztFQUNsQixDQUFDLENBQUM7RUFFRlEsUUFBUSxDQUFDSSxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUNILGdCQUFnQixDQUFDLE9BQU8sRUFBRSxZQUFXO0lBRXpFUixtREFBUyxDQUFDLENBQUM7RUFDYixDQUFDLENBQUM7RUFFRk8sUUFBUSxDQUFDSSxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUNILGdCQUFnQixDQUFDLE9BQU8sRUFBRSxZQUFXO0lBQ3ZFUCw0REFBb0IsQ0FBQyxDQUFDO0VBQ3hCLENBQUMsQ0FBQztFQUVGTSxRQUFRLENBQUNJLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQ0gsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFlBQVc7SUFDNUVWLHlEQUFZLENBQUMsQ0FBQztFQUNoQixDQUFDLENBQUM7RUFFRlMsUUFBUSxDQUFDSSxjQUFjLENBQUMsVUFBVSxDQUFDLENBQUNILGdCQUFnQixDQUFDLE9BQU8sRUFBRSxZQUFXO0lBQ3ZFTixxRkFBMEIsQ0FBQyxDQUFDO0VBQzlCLENBQUMsQ0FBQztFQUVGSyxRQUFRLENBQUNJLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQ0gsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFlBQVc7SUFDMUVMLCtEQUFlLENBQUMsQ0FBQztFQUNuQixDQUFDLENBQUM7RUFFRkksUUFBUSxDQUFDSSxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQ0gsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFlBQVc7SUFDN0VKLDJEQUFhLENBQUMsQ0FBQztFQUNqQixDQUFDLENBQUM7RUFFRkcsUUFBUSxDQUFDSSxjQUFjLENBQUMsb0JBQW9CLENBQUMsQ0FBQ0gsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFlBQVc7SUFDakZILG1FQUFpQixDQUFDLENBQUM7RUFDckIsQ0FBQyxDQUFDO0VBR0ZFLFFBQVEsQ0FBQ0ksY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFDSCxnQkFBZ0IsQ0FBQyxRQUFRLEVBQUUsWUFBVztJQUM3RUYsMkRBQVksQ0FBQyxDQUFDO0VBQ2hCLENBQUMsQ0FBQztFQUdGTSxJQUFJLENBQUMsQ0FBQztBQUlSLENBQUMsQ0FBQztBQUVGLFNBQVNBLElBQUlBLENBQUEsRUFBRztFQUNkO0VBQ0EsTUFBTUMsSUFBSSxHQUFHTixRQUFRLENBQUNJLGNBQWMsQ0FBQyxhQUFhLENBQUM7RUFDbkRFLElBQUksQ0FBQ0wsZ0JBQWdCLENBQUMsUUFBUSxFQUFFRix1REFBWSxDQUFDOztFQUU3QztFQUNBLE1BQU1RLFlBQVksR0FBR1AsUUFBUSxDQUFDSSxjQUFjLENBQUMsZUFBZSxDQUFDO0VBQzdERyxZQUFZLENBQUNOLGdCQUFnQixDQUFDLE9BQU8sRUFBRUYsdURBQVksQ0FBQztBQUN0RCIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGltcG9ydCBzZWFyY2hCYXIgZnJvbSAnLi9zcmMvc2VhcmNoQmFyLmpzJ1xuaW1wb3J0IHtmZXRjaFBoeXNpY3N9IGZyb20gJy4vcGh5c2ljcy5qcyc7XG5pbXBvcnQge2ZldGNoRWNvbm9taWNzfSBmcm9tICcuL2Vjb25vbWljcy5qcyc7XG5pbXBvcnQge2ZldGNoTWF0aH0gZnJvbSAnLi9tYXRoLmpzJztcbmltcG9ydCB7ZmV0Y2hDb21wdXRlclNjaWVuY2V9IGZyb20gJy4vY3MuanMnO1xuaW1wb3J0IHtmZXRjaEVsZWN0cmljYWxFbmdpbmVlcmluZ30gZnJvbSAnLi9lbGVjdHJpY2FsZW5naW5lZXJpbmcuanMnO1xuaW1wb3J0IHtmZXRjaFN0YXRpc3RpY3N9IGZyb20gJy4vc3RhdGlzdGljcy5qcyc7XG5pbXBvcnQge2ZldGNoUXVhbnRCaW99IGZyb20gJy4vcXVhbnRCaW8uanMnO1xuaW1wb3J0IHtmZXRjaFF1YW50RmluYW5jZX0gZnJvbSAnLi9xdWFudEZpbmFuY2UuanMnO1xuaW1wb3J0IHsgaGFuZGxlU3VibWl0IH0gZnJvbSAnLi9zZWFyY2hCYXIuanMnO1xuXG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHtcbiAgICBjb25zb2xlLmxvZyhcIml0cyB3b3JraW5nXCIpO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Vjb25vbWljc0J1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICBcbiAgICAgIGZldGNoRWNvbm9taWNzKCk7XG4gICAgfSk7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWF0aEJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICBcbiAgICAgIGZldGNoTWF0aCgpO1xuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NzQnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgIGZldGNoQ29tcHV0ZXJTY2llbmNlKCk7XG4gICAgfSk7XG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncGh5c2ljc0J1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICBmZXRjaFBoeXNpY3MoKTtcbiAgICB9KTtcblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdlZUJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICBmZXRjaEVsZWN0cmljYWxFbmdpbmVlcmluZygpO1xuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3N0YXRzQnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgIGZldGNoU3RhdGlzdGljcygpO1xuICAgIH0pO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F1YW50QmlvQnV0dG9uJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAgIGZldGNoUXVhbnRCaW8oKTtcbiAgICB9KTtcbiAgXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3F1YW50RmluYW5jZUJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG4gICAgICBmZXRjaFF1YW50RmluYW5jZSgpO1xuICAgIH0pO1xuXG5cbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2VhcmNoLWJ1dHRvbicpLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIGZ1bmN0aW9uKCkge1xuICAgICAgaGFuZGxlU3VibWl0KCk7XG4gICAgfSk7XG5cbiAgICBcbiAgICBpbml0KCk7IFxuICBcbiAgICBcbiAgXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBmb3JtXG4gICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZWFyY2gtZm9ybScpO1xuICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgaGFuZGxlU3VibWl0KTtcbiAgXG4gICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBzZWFyY2ggYnV0dG9uXG4gICAgY29uc3Qgc2VhcmNoQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlYXJjaC1idXR0b24nKTtcbiAgICBzZWFyY2hCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBoYW5kbGVTdWJtaXQpO1xuICB9XG5cbiBcblxuXG4gICJdLCJuYW1lcyI6WyJmZXRjaFBoeXNpY3MiLCJmZXRjaEVjb25vbWljcyIsImZldGNoTWF0aCIsImZldGNoQ29tcHV0ZXJTY2llbmNlIiwiZmV0Y2hFbGVjdHJpY2FsRW5naW5lZXJpbmciLCJmZXRjaFN0YXRpc3RpY3MiLCJmZXRjaFF1YW50QmlvIiwiZmV0Y2hRdWFudEZpbmFuY2UiLCJoYW5kbGVTdWJtaXQiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJjb25zb2xlIiwibG9nIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbml0IiwiZm9ybSIsInNlYXJjaEJ1dHRvbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/math.js":
/*!*********************!*\
  !*** ./src/math.js ***!
  \*********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchMath: function() { return /* binding */ fetchMath; }\n/* harmony export */ });\n/* harmony import */ var _barChart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./barChart */ \"./src/barChart.js\");\n\nfunction fetchMath() {\n  const mathCategories = [\"math.AC\", \"math.AG\", \"math.AP\", \"math.AT\", \"math.CA\", \"math.CO\", \"math.CT\", \"math.CV\", \"math.DG\", \"math.DS\", \"math.FA\", \"math.GM\", \"math.GN\", \"math.GR\", \"math.GT\", \"math.H\", \"math.IT\", \"math.KT\", \"math.LO\", \"math.MG\", \"math.MP\", \"math.NA\", \"math.NT\", \"math.OA\", \"math.OC\", \"math.PR\", \"math.QA\", \"math.RA\", \"math.RT\", \"math.S\", \"math.SP\", \"math.ST\"];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  mathCategories.forEach(function (category) {\n    const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === mathCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = [\"Commutative Algebra\", \"Algebraic Geometry\", \"Analysis of PDEs\", \"Algebraic Topology\", \"Classical Analysis and ODEs\", \"Combinatorics\", \"Category Theory\", \"Complex Variables\", \"Differential Geometry\", \"Dynamical Systems\", \"Functional Analysis\", \"General Mathematics\", \"General Topology\", \"Group Theory\", \"Geometric Topology\", \"History and Overview\", \"Information Theory\", \"K-Theory and Homology\", \"Logic\", \"Metric Geometry\", \"Mathematical Physics\", \"Numerical Analysis\", \"Number Theory\", \"Operator Algebras\", \"Optimization and Control\", \"Probability\", \"Quantum Algebra\", \"Rings and Algebras\", \"Representation Theory\", \"Symplectic Geometry\", \"Spectral Theory\", \"Statistics Theory\"];\n        (0,_barChart__WEBPACK_IMPORTED_MODULE_0__.createBarChart)(mathCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\n\n//             totalSum += totalResults;\n\n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQyxDQUFDO0VBQ04sQ0FBQyxDQUFDO0FBQ047O0FBSUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vamF2YXNjcmlwdC1wcm9qZWN0Ly4vc3JjL21hdGguanM/NWEwMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVCYXJDaGFydCB9IGZyb20gXCIuL2JhckNoYXJ0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaE1hdGgoKSB7XG4gICAgXG4gICAgY29uc3QgbWF0aENhdGVnb3JpZXMgPSBbXCJtYXRoLkFDXCIsXG4gICAgICAgICAgICBcIm1hdGguQUdcIixcbiAgICAgICAgICAgIFwibWF0aC5BUFwiLFxuICAgICAgICAgICAgXCJtYXRoLkFUXCIsXG4gICAgICAgICAgICBcIm1hdGguQ0FcIixcbiAgICAgICAgICAgIFwibWF0aC5DT1wiLFxuICAgICAgICAgICAgXCJtYXRoLkNUXCIsXG4gICAgICAgICAgICBcIm1hdGguQ1ZcIixcbiAgICAgICAgICAgIFwibWF0aC5ER1wiLFxuICAgICAgICAgICAgXCJtYXRoLkRTXCIsXG4gICAgICAgICAgICBcIm1hdGguRkFcIixcbiAgICAgICAgICAgIFwibWF0aC5HTVwiLFxuICAgICAgICAgICAgXCJtYXRoLkdOXCIsXG4gICAgICAgICAgICBcIm1hdGguR1JcIixcbiAgICAgICAgICAgIFwibWF0aC5HVFwiLFxuICAgICAgICAgICAgXCJtYXRoLkhcIixcbiAgICAgICAgICAgIFwibWF0aC5JVFwiLFxuICAgICAgICAgICAgXCJtYXRoLktUXCIsXG4gICAgICAgICAgICBcIm1hdGguTE9cIixcbiAgICAgICAgICAgIFwibWF0aC5NR1wiLFxuICAgICAgICAgICAgXCJtYXRoLk1QXCIsXG4gICAgICAgICAgICBcIm1hdGguTkFcIixcbiAgICAgICAgICAgIFwibWF0aC5OVFwiLFxuICAgICAgICAgICAgXCJtYXRoLk9BXCIsXG4gICAgICAgICAgICBcIm1hdGguT0NcIixcbiAgICAgICAgICAgIFwibWF0aC5QUlwiLFxuICAgICAgICAgICAgXCJtYXRoLlFBXCIsXG4gICAgICAgICAgICBcIm1hdGguUkFcIixcbiAgICAgICAgICAgIFwibWF0aC5SVFwiLFxuICAgICAgICAgICAgXCJtYXRoLlNcIixcbiAgICAgICAgICAgIFwibWF0aC5TUFwiLFxuICAgICAgICAgICAgXCJtYXRoLlNUXCJdOyBcbiAgICBsZXQgdG90YWxSZXN1bHRzID0gW107XG4gICAgXG4gICAgLy8gRmV0Y2ggdG90YWwgcmVzdWx0cyBmb3IgZWFjaCBjYXRlZ29yeVxuICAgIG1hdGhDYXRlZ29yaWVzLmZvckVhY2goZnVuY3Rpb24oY2F0ZWdvcnkpIHtcbiAgICAgIGNvbnN0IGFwaVVybCA9IGBodHRwczovL2V4cG9ydC5hcnhpdi5vcmcvYXBpL3F1ZXJ5P3NlYXJjaF9xdWVyeT1jYXQ6JHtjYXRlZ29yeX0mc3RhcnQ9MCZtYXhfcmVzdWx0cz0xYDtcbiAgICAgIFxuICAgICAgXG4gICAgICAgIFxuICAgICAgICBmZXRjaChhcGlVcmwpXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICB9KVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZVRleHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBET01QYXJzZXIoKTtcbiAgICAgICAgICAgIGNvbnN0IHhtbERvYyA9IHBhcnNlci5wYXJzZUZyb21TdHJpbmcocmVzcG9uc2VUZXh0LCAndGV4dC94bWwnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgdG90YWxSZXN1bHRzRWxlbWVudCA9IHhtbERvYy5nZXRFbGVtZW50c0J5VGFnTmFtZSgnb3BlbnNlYXJjaDp0b3RhbFJlc3VsdHMnKVswXTtcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsUmVzdWx0ID0gcGFyc2VJbnQodG90YWxSZXN1bHRzRWxlbWVudC50ZXh0Q29udGVudCk7XG5cbiAgICAgICAgICAgIHRvdGFsUmVzdWx0cy5wdXNoKHRvdGFsUmVzdWx0KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHRvdGFsUmVzdWx0cylcbiAgICAgIFxuLy8gQ2FsbCB0aGUgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBiYXIgY2hhcnQgYWZ0ZXIgYWxsIGNhdGVnb3JpZXMgaGF2ZSBiZWVuIGZldGNoZWRcbiAgICAgICAgaWYgKHRvdGFsUmVzdWx0cy5sZW5ndGggPT09IG1hdGhDYXRlZ29yaWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgdG90YWxBcnRpY2xlQ291bnQgPSB0b3RhbFJlc3VsdHMucmVkdWNlKChhY2MsIGN1cnIpID0+IGFjYyArIGN1cnIsIDApO1xuICAgICAgICAgICAgY29uc3QgZnVsbENhdGVnb3J5TmFtZXMgPSBbXCJDb21tdXRhdGl2ZSBBbGdlYnJhXCIsXG4gICAgICAgICAgICBcIkFsZ2VicmFpYyBHZW9tZXRyeVwiLFxuICAgICAgICAgICAgXCJBbmFseXNpcyBvZiBQREVzXCIsXG4gICAgICAgICAgICBcIkFsZ2VicmFpYyBUb3BvbG9neVwiLFxuICAgICAgICAgICAgXCJDbGFzc2ljYWwgQW5hbHlzaXMgYW5kIE9ERXNcIixcbiAgICAgICAgICAgIFwiQ29tYmluYXRvcmljc1wiLFxuICAgICAgICAgICAgXCJDYXRlZ29yeSBUaGVvcnlcIixcbiAgICAgICAgICAgIFwiQ29tcGxleCBWYXJpYWJsZXNcIixcbiAgICAgICAgICAgIFwiRGlmZmVyZW50aWFsIEdlb21ldHJ5XCIsXG4gICAgICAgICAgICBcIkR5bmFtaWNhbCBTeXN0ZW1zXCIsXG4gICAgICAgICAgICBcIkZ1bmN0aW9uYWwgQW5hbHlzaXNcIixcbiAgICAgICAgICAgIFwiR2VuZXJhbCBNYXRoZW1hdGljc1wiLFxuICAgICAgICAgICAgXCJHZW5lcmFsIFRvcG9sb2d5XCIsXG4gICAgICAgICAgICBcIkdyb3VwIFRoZW9yeVwiLFxuICAgICAgICAgICAgXCJHZW9tZXRyaWMgVG9wb2xvZ3lcIixcbiAgICAgICAgICAgIFwiSGlzdG9yeSBhbmQgT3ZlcnZpZXdcIixcbiAgICAgICAgICAgIFwiSW5mb3JtYXRpb24gVGhlb3J5XCIsXG4gICAgICAgICAgICBcIkstVGhlb3J5IGFuZCBIb21vbG9neVwiLFxuICAgICAgICAgICAgXCJMb2dpY1wiLFxuICAgICAgICAgICAgXCJNZXRyaWMgR2VvbWV0cnlcIixcbiAgICAgICAgICAgIFwiTWF0aGVtYXRpY2FsIFBoeXNpY3NcIixcbiAgICAgICAgICAgIFwiTnVtZXJpY2FsIEFuYWx5c2lzXCIsXG4gICAgICAgICAgICBcIk51bWJlciBUaGVvcnlcIixcbiAgICAgICAgICAgIFwiT3BlcmF0b3IgQWxnZWJyYXNcIixcbiAgICAgICAgICAgIFwiT3B0aW1pemF0aW9uIGFuZCBDb250cm9sXCIsXG4gICAgICAgICAgICBcIlByb2JhYmlsaXR5XCIsXG4gICAgICAgICAgICBcIlF1YW50dW0gQWxnZWJyYVwiLFxuICAgICAgICAgICAgXCJSaW5ncyBhbmQgQWxnZWJyYXNcIixcbiAgICAgICAgICAgIFwiUmVwcmVzZW50YXRpb24gVGhlb3J5XCIsXG4gICAgICAgICAgICBcIlN5bXBsZWN0aWMgR2VvbWV0cnlcIixcbiAgICAgICAgICAgIFwiU3BlY3RyYWwgVGhlb3J5XCIsXG4gICAgICAgICAgICBcIlN0YXRpc3RpY3MgVGhlb3J5XCJcbiAgICAgICAgICBdO1xuXG4gICAgICAgICAgICBjcmVhdGVCYXJDaGFydChtYXRoQ2F0ZWdvcmllcywgdG90YWxSZXN1bHRzLCB0b3RhbEFydGljbGVDb3VudCwgZnVsbENhdGVnb3J5TmFtZXMpO1xuICAgICAgICB9IFxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yOicsIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4gICAgICAgICAgICBcblxuICAgICAgICAgICAgXG4vLyAgICAgICAgICAgICB0b3RhbFN1bSArPSB0b3RhbFJlc3VsdHM7XG4gICAgICAgICAgICBcbi8vICAgICAgICAgICAgIC8vIEhhbmRsZSBpbmRpdmlkdWFsIGNhdGVnb3J5IHRvdGFsIHJlc3VsdHNcbi8vICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBUb3RhbCBSZXN1bHRzIGZvciAke2NhdGVnb3J5fTpgLCB0b3RhbFJlc3VsdHMpO1xuLy8gICAgICAgICB9KVxuLy8gICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbi8vICAgICAgICAgICAgIC8vIEhhbmRsZSBlcnJvclxuLy8gICAgICAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGZldGNoaW5nICR7Y2F0ZWdvcnl9IHJlc3VsdHM6YCwgZXJyb3IpO1xuLy8gICAgICAgICB9KTtcbi8vICAgICB9KTtcbiAgICBcbi8vICAgICAvLyBIYW5kbGUgdG90YWwgc3VtIG9mIGFsbCBjYXRlZ29yaWVzXG4vLyAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbi8vICAgICAgICAgY29uc29sZS5sb2coJ1RvdGFsIFN1bSBvZiBSZXN1bHRzOicsIHRvdGFsU3VtKTtcbi8vICAgICB9LCAxMDAwMCk7XG4vLyB9Il0sIm5hbWVzIjpbImNyZWF0ZUJhckNoYXJ0IiwiZmV0Y2hNYXRoIiwibWF0aENhdGVnb3JpZXMiLCJ0b3RhbFJlc3VsdHMiLCJmb3JFYWNoIiwiY2F0ZWdvcnkiLCJhcGlVcmwiLCJmZXRjaCIsInRoZW4iLCJyZXNwb25zZSIsInRleHQiLCJyZXNwb25zZVRleHQiLCJwYXJzZXIiLCJET01QYXJzZXIiLCJ4bWxEb2MiLCJwYXJzZUZyb21TdHJpbmciLCJ0b3RhbFJlc3VsdHNFbGVtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJ0b3RhbFJlc3VsdCIsInBhcnNlSW50IiwidGV4dENvbnRlbnQiLCJwdXNoIiwiY29uc29sZSIsImxvZyIsImxlbmd0aCIsInRvdGFsQXJ0aWNsZUNvdW50IiwicmVkdWNlIiwiYWNjIiwiY3VyciIsImZ1bGxDYXRlZ29yeU5hbWVzIiwiY2F0Y2giLCJlcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/math.js\n");

/***/ }),

/***/ "./src/physics.js":
/*!************************!*\
  !*** ./src/physics.js ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPhysics: function() { return /* binding */ fetchPhysics; }\n/* harmony export */ });\n/* harmony import */ var _barChart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./barChart */ \"./src/barChart.js\");\n\nfunction fetchPhysics() {\n  console.log('Physics');\n  const physicsCategories = ['astro-ph.CO', 'astro-ph.EP', 'astro-ph.GA', 'astro-ph.HE', 'astro-ph.IM', 'astro-ph.SR', 'cond-mat.dis-nn', 'cond-mat.mes-hall', 'cond-mat.mtrl-sci', 'cond-mat.other', 'cond-mat.quant-gas', 'cond-mat.soft', 'cond-mat.stat-mech', 'cond-mat.str-el', 'cond-mat.supr-con', 'gr-qc', 'hep-ex', 'hep-lat', 'hep-ph', 'hep-th', 'math-ph', 'nlin.AO', 'nlin.CD', 'nlin.CG', 'nlin.PS', 'nlin.SI', 'nucl-ex', 'nucl-th', 'physics.acc-ph', 'physics.ao-ph', 'physics.app-ph', 'physics.atm-clus', 'physics.atom-ph', 'physics.bio-ph', 'physics.chem-ph', 'physics.class-ph', 'physics.comp-ph', 'physics.data-an', 'physics.ed-ph', 'physics.flu-dyn', 'physics.gen-ph', 'physics.geo-ph', 'physics.hist-ph', 'physics.ins-det', 'physics.med-ph', 'physics.optics', 'physics.plasm-ph', 'physics.pop-ph', 'physics.soc-ph', 'physics.space-ph', 'quant-ph'];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  physicsCategories.forEach(function (category) {\n    const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === physicsCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = [\"Cosmology and Nongalactic Astrophysics\", \"Earth and Planetary Astrophysics\", \"Astrophysics of Galaxies\", \"High Energy Astrophysical Phenomena\", \"Instrumentation and Methods for Astrophysics\", \"Solar and Stellar Astrophysics\", \"Disordered Systems and Neural Networks\", \"Mesoscale and Nanoscale Physics\", \"Materials Science\", \"Other Condensed Matter\", \"Quantum Gases\", \"Soft Condensed Matter\", \"Statistical Mechanics\", \"Strongly Correlated Electrons\", \"Superconductivity\", \"General Relativity and Quantum Cosmology\", \"High Energy Physics - Experiment\", \"High Energy Physics - Lattice\", \"High Energy Physics - Phenomenology\", \"High Energy Physics - Theory\", \"Mathematical Physics\", \"Adaptation and Self-Organizing Systems\", \"Chaotic Dynamics\", \"Cellular Automata and Lattice Gases\", \"Pattern Formation and Solitons\", \"Exactly Solvable and Integrable Systems\", \"Nuclear Experiment\", \"Nuclear Theory\", \"Accelerator Physics\", \"Atmospheric and Oceanic Physics\", \"Applied Physics\", \"Atomic and Molecular Clusters\", \"Atomic Physics\", \"Biological Physics\", \"Chemical Physics\", \"Classical Physics\", \"Computational Physics\", \"Data Analysis, Statistics and Probability\", \"Physics Education\", \"Fluid Dynamics\", \"General Physics\", \"Geophysics\", \"History and Philosophy of Physics\", \"Instrumentation and Detectors\", \"Medical Physics\", \"Optics\", \"Plasma Physics\", \"Popular Physics\", \"Physics and Society\", \"Space Physics\", \"Quantum Physics\"];\n        (0,_barChart__WEBPACK_IMPORTED_MODULE_0__.createBarChart)(physicsCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\n\n// totalSum += totalResults;\n\n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 20000);\n// }\n\n// for visualizations \n\n//   \n// fetch('https://export.arxiv.org/api/query?search_query=cat:physics.acc-ph')\n//   .then(function(response) {\n//     return response.text();\n//   })\n//   .then(function(responseText) {\n//     // Parse the XML response\n//     const parser = new DOMParser();\n//     const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n\n//     // Extract the total results\n//     const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n//     const totalResults = totalResultsElement.textContent;\n\n//     // Handle successful response\n//     console.log('Total Results:', totalResults);\n//   })\n//   .catch(function(error) {\n//     // Handle error\n//     console.log('Error:', error);\n//   });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/physics.js\n");

/***/ }),

/***/ "./src/quantBio.js":
/*!*************************!*\
  !*** ./src/quantBio.js ***!
  \*************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchQuantBio: function() { return /* binding */ fetchQuantBio; }\n/* harmony export */ });\n/* harmony import */ var _barChart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./barChart */ \"./src/barChart.js\");\n\nfunction fetchQuantBio() {\n  const qBioCategories = [\"q-bio.BM\", \"q-bio.CB\", \"q-bio.GN\", \"q-bio.MN\", \"q-bio.NC\", \"q-bio.O\", \"q-bio.PE\", \"q-bio.QM\", \"q-bio.SC\", \"q-bio.TO\"];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  qBioCategories.forEach(function (category) {\n    const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === qBioCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = [\"Biomolecules\", \"Cell Behavior\", \"Genomics\", \"Molecular Networks\", \"Neurons and Cognition\", \"Other Quantitative Biology\", \"Populations and Evolution\", \"Quantitative Methods\", \"Subcellular Processes\", \"Tissues and Organs\"];\n        (0,_barChart__WEBPACK_IMPORTED_MODULE_0__.createBarChart)(qBioCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\n\n//             totalSum += totalResults;\n\n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcXVhbnRCaW8uanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBNEM7QUFFckMsU0FBU0MsYUFBYUEsQ0FBQSxFQUFHO0VBRTVCLE1BQU1DLGNBQWMsR0FBRyxDQUNmLFVBQVUsRUFDVixVQUFVLEVBQ1YsVUFBVSxFQUNWLFVBQVUsRUFDVixVQUFVLEVBQ1YsU0FBUyxFQUNULFVBQVUsRUFDVixVQUFVLEVBQ1YsVUFBVSxFQUNWLFVBQVUsQ0FBQztFQUNuQixJQUFJQyxZQUFZLEdBQUcsRUFBRTs7RUFFckI7RUFDQUQsY0FBYyxDQUFDRSxPQUFPLENBQUMsVUFBU0MsUUFBUSxFQUFFO0lBQ3hDLE1BQU1DLE1BQU0sR0FBSSx1REFBc0RELFFBQVMsd0JBQXVCO0lBSXBHRSxLQUFLLENBQUNELE1BQU0sQ0FBQyxDQUNaRSxJQUFJLENBQUMsVUFBU0MsUUFBUSxFQUFFO01BQ3JCLE9BQU9BLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQyxDQUFDLENBQ0RGLElBQUksQ0FBQyxVQUFTRyxZQUFZLEVBQUU7TUFDekIsTUFBTUMsTUFBTSxHQUFHLElBQUlDLFNBQVMsQ0FBQyxDQUFDO01BQzlCLE1BQU1DLE1BQU0sR0FBR0YsTUFBTSxDQUFDRyxlQUFlLENBQUNKLFlBQVksRUFBRSxVQUFVLENBQUM7TUFFL0QsTUFBTUssbUJBQW1CLEdBQUdGLE1BQU0sQ0FBQ0csb0JBQW9CLENBQUMseUJBQXlCLENBQUMsQ0FBQyxDQUFDLENBQUM7TUFDckYsTUFBTUMsV0FBVyxHQUFHQyxRQUFRLENBQUNILG1CQUFtQixDQUFDSSxXQUFXLENBQUM7TUFFN0RqQixZQUFZLENBQUNrQixJQUFJLENBQUNILFdBQVcsQ0FBQztNQUM5QkksT0FBTyxDQUFDQyxHQUFHLENBQUNwQixZQUFZLENBQUM7O01BRXJDO01BQ1EsSUFBSUEsWUFBWSxDQUFDcUIsTUFBTSxLQUFLdEIsY0FBYyxDQUFDc0IsTUFBTSxFQUFFO1FBQy9DLE1BQU1DLGlCQUFpQixHQUFHdEIsWUFBWSxDQUFDdUIsTUFBTSxDQUFDLENBQUNDLEdBQUcsRUFBRUMsSUFBSSxLQUFLRCxHQUFHLEdBQUdDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDM0UsTUFBTUMsaUJBQWlCLEdBQUcsQ0FBRSxjQUFjLEVBQzFDLGVBQWUsRUFDZixVQUFVLEVBQ1Ysb0JBQW9CLEVBQ3BCLHVCQUF1QixFQUN2Qiw0QkFBNEIsRUFDNUIsMkJBQTJCLEVBQzNCLHNCQUFzQixFQUN0Qix1QkFBdUIsRUFDdkIsb0JBQW9CLENBQUM7UUFDckI3Qix5REFBYyxDQUFDRSxjQUFjLEVBQUVDLFlBQVksRUFBRXNCLGlCQUFpQixFQUFFSSxpQkFBaUIsQ0FBQztNQUN0RjtJQUNBLENBQUMsQ0FBQyxDQUNEQyxLQUFLLENBQUMsVUFBU0MsS0FBSyxFQUFFO01BQ3ZCVCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxRQUFRLEVBQUVRLEtBQUssQ0FBQztJQUM1QixDQUFDLENBQUM7RUFDTixDQUFDLENBQUM7QUFDTjs7QUFTQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvcXVhbnRCaW8uanM/YzNiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVCYXJDaGFydCB9IGZyb20gXCIuL2JhckNoYXJ0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaFF1YW50QmlvKCkge1xuICAgIFxuICAgIGNvbnN0IHFCaW9DYXRlZ29yaWVzID0gW1xuICAgICAgICAgICAgXCJxLWJpby5CTVwiLFxuICAgICAgICAgICAgXCJxLWJpby5DQlwiLFxuICAgICAgICAgICAgXCJxLWJpby5HTlwiLFxuICAgICAgICAgICAgXCJxLWJpby5NTlwiLFxuICAgICAgICAgICAgXCJxLWJpby5OQ1wiLFxuICAgICAgICAgICAgXCJxLWJpby5PXCIsXG4gICAgICAgICAgICBcInEtYmlvLlBFXCIsXG4gICAgICAgICAgICBcInEtYmlvLlFNXCIsXG4gICAgICAgICAgICBcInEtYmlvLlNDXCIsXG4gICAgICAgICAgICBcInEtYmlvLlRPXCJdOyBcbiAgICBsZXQgdG90YWxSZXN1bHRzID0gW107XG4gICAgXG4gICAgLy8gRmV0Y2ggdG90YWwgcmVzdWx0cyBmb3IgZWFjaCBjYXRlZ29yeVxuICAgIHFCaW9DYXRlZ29yaWVzLmZvckVhY2goZnVuY3Rpb24oY2F0ZWdvcnkpIHtcbiAgICAgIGNvbnN0IGFwaVVybCA9IGBodHRwczovL2V4cG9ydC5hcnhpdi5vcmcvYXBpL3F1ZXJ5P3NlYXJjaF9xdWVyeT1jYXQ6JHtjYXRlZ29yeX0mc3RhcnQ9MCZtYXhfcmVzdWx0cz0xYDtcbiAgICAgICAgXG4gICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGZldGNoKGFwaVVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlVGV4dCkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgICAgICAgICAgY29uc3QgeG1sRG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhyZXNwb25zZVRleHQsICd0ZXh0L3htbCcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB0b3RhbFJlc3VsdHNFbGVtZW50ID0geG1sRG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdvcGVuc2VhcmNoOnRvdGFsUmVzdWx0cycpWzBdO1xuICAgICAgICAgICAgY29uc3QgdG90YWxSZXN1bHQgPSBwYXJzZUludCh0b3RhbFJlc3VsdHNFbGVtZW50LnRleHRDb250ZW50KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdG90YWxSZXN1bHRzLnB1c2godG90YWxSZXN1bHQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2codG90YWxSZXN1bHRzKVxuICAgICAgXG4vLyBDYWxsIHRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGJhciBjaGFydCBhZnRlciBhbGwgY2F0ZWdvcmllcyBoYXZlIGJlZW4gZmV0Y2hlZFxuICAgICAgICBpZiAodG90YWxSZXN1bHRzLmxlbmd0aCA9PT0gcUJpb0NhdGVnb3JpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCB0b3RhbEFydGljbGVDb3VudCA9IHRvdGFsUmVzdWx0cy5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgY3VyciwgMCk7XG4gICAgICAgICAgICBjb25zdCBmdWxsQ2F0ZWdvcnlOYW1lcyA9IFsgXCJCaW9tb2xlY3VsZXNcIixcbiAgICAgICAgICAgIFwiQ2VsbCBCZWhhdmlvclwiLFxuICAgICAgICAgICAgXCJHZW5vbWljc1wiLFxuICAgICAgICAgICAgXCJNb2xlY3VsYXIgTmV0d29ya3NcIixcbiAgICAgICAgICAgIFwiTmV1cm9ucyBhbmQgQ29nbml0aW9uXCIsXG4gICAgICAgICAgICBcIk90aGVyIFF1YW50aXRhdGl2ZSBCaW9sb2d5XCIsXG4gICAgICAgICAgICBcIlBvcHVsYXRpb25zIGFuZCBFdm9sdXRpb25cIixcbiAgICAgICAgICAgIFwiUXVhbnRpdGF0aXZlIE1ldGhvZHNcIixcbiAgICAgICAgICAgIFwiU3ViY2VsbHVsYXIgUHJvY2Vzc2VzXCIsXG4gICAgICAgICAgICBcIlRpc3N1ZXMgYW5kIE9yZ2Fuc1wiXTtcbiAgICAgICAgICAgIGNyZWF0ZUJhckNoYXJ0KHFCaW9DYXRlZ29yaWVzLCB0b3RhbFJlc3VsdHMsIHRvdGFsQXJ0aWNsZUNvdW50LCBmdWxsQ2F0ZWdvcnlOYW1lcyk7XG4gICAgICAgIH0gXG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaChmdW5jdGlvbihlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZygnRXJyb3I6JywgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbiAgICAgICAgICAgIFxuXG5cblxuXG5cbiAgIFxuXG4vLyAgICAgICAgICAgICB0b3RhbFN1bSArPSB0b3RhbFJlc3VsdHM7XG4gICAgICAgICAgICBcbi8vICAgICAgICAgICAgIC8vIEhhbmRsZSBpbmRpdmlkdWFsIGNhdGVnb3J5IHRvdGFsIHJlc3VsdHNcbi8vICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBUb3RhbCBSZXN1bHRzIGZvciAke2NhdGVnb3J5fTpgLCB0b3RhbFJlc3VsdHMpO1xuLy8gICAgICAgICB9KVxuLy8gICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbi8vICAgICAgICAgICAgIC8vIEhhbmRsZSBlcnJvclxuLy8gICAgICAgICAgICAgY29uc29sZS5sb2coYEVycm9yIGZldGNoaW5nICR7Y2F0ZWdvcnl9IHJlc3VsdHM6YCwgZXJyb3IpO1xuLy8gICAgICAgICB9KTtcbi8vICAgICB9KTtcbiAgICBcbi8vICAgICAvLyBIYW5kbGUgdG90YWwgc3VtIG9mIGFsbCBjYXRlZ29yaWVzXG4vLyAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbi8vICAgICAgICAgY29uc29sZS5sb2coJ1RvdGFsIFN1bSBvZiBSZXN1bHRzOicsIHRvdGFsU3VtKTtcbi8vICAgICB9LCAxMDAwMCk7XG4vLyB9Il0sIm5hbWVzIjpbImNyZWF0ZUJhckNoYXJ0IiwiZmV0Y2hRdWFudEJpbyIsInFCaW9DYXRlZ29yaWVzIiwidG90YWxSZXN1bHRzIiwiZm9yRWFjaCIsImNhdGVnb3J5IiwiYXBpVXJsIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJ0ZXh0IiwicmVzcG9uc2VUZXh0IiwicGFyc2VyIiwiRE9NUGFyc2VyIiwieG1sRG9jIiwicGFyc2VGcm9tU3RyaW5nIiwidG90YWxSZXN1bHRzRWxlbWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidG90YWxSZXN1bHQiLCJwYXJzZUludCIsInRleHRDb250ZW50IiwicHVzaCIsImNvbnNvbGUiLCJsb2ciLCJsZW5ndGgiLCJ0b3RhbEFydGljbGVDb3VudCIsInJlZHVjZSIsImFjYyIsImN1cnIiLCJmdWxsQ2F0ZWdvcnlOYW1lcyIsImNhdGNoIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/quantBio.js\n");

/***/ }),

/***/ "./src/quantFinance.js":
/*!*****************************!*\
  !*** ./src/quantFinance.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchQuantFinance: function() { return /* binding */ fetchQuantFinance; }\n/* harmony export */ });\n/* harmony import */ var _barChart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./barChart */ \"./src/barChart.js\");\n\nfunction fetchQuantFinance() {\n  const qFinanceCategories = [\"q-fin.CP\", \"q-fin.EC\", \"q-fin.GN\", \"q-fin.MF\", \"q-fin.PM\", \"q-fin.PR\", \"q-fin.RM\", \"q-fin.ST\", \"q-fin.TR\"];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  qFinanceCategories.forEach(function (category) {\n    const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === qFinanceCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = [\"Computational Finance\", \"Economics\", \"General Finance\", \"Mathematical Finance\", \"Portfolio Management\", \"Pricing of Securities\", \"Risk Management\", \"Statistical Finance\", \"Trading and Market Microstructure\"];\n        (0,_barChart__WEBPACK_IMPORTED_MODULE_0__.createBarChart)(qFinanceCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcXVhbnRGaW5hbmNlLmpzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQTRDO0FBRXJDLFNBQVNDLGlCQUFpQkEsQ0FBQSxFQUFHO0VBRWhDLE1BQU1DLGtCQUFrQixHQUFHLENBQUMsVUFBVSxFQUM5QixVQUFVLEVBQ1YsVUFBVSxFQUNWLFVBQVUsRUFDVixVQUFVLEVBQ1YsVUFBVSxFQUNWLFVBQVUsRUFDVixVQUFVLEVBQ1YsVUFBVSxDQUFDO0VBQ25CLElBQUlDLFlBQVksR0FBRyxFQUFFOztFQUVyQjtFQUNBRCxrQkFBa0IsQ0FBQ0UsT0FBTyxDQUFDLFVBQVNDLFFBQVEsRUFBRTtJQUM1QyxNQUFNQyxNQUFNLEdBQUksdURBQXNERCxRQUFTLHdCQUF1QjtJQUdwR0UsS0FBSyxDQUFDRCxNQUFNLENBQUMsQ0FDWkUsSUFBSSxDQUFDLFVBQVNDLFFBQVEsRUFBRTtNQUNyQixPQUFPQSxRQUFRLENBQUNDLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUNERixJQUFJLENBQUMsVUFBU0csWUFBWSxFQUFFO01BQ3pCLE1BQU1DLE1BQU0sR0FBRyxJQUFJQyxTQUFTLENBQUMsQ0FBQztNQUM5QixNQUFNQyxNQUFNLEdBQUdGLE1BQU0sQ0FBQ0csZUFBZSxDQUFDSixZQUFZLEVBQUUsVUFBVSxDQUFDO01BRS9ELE1BQU1LLG1CQUFtQixHQUFHRixNQUFNLENBQUNHLG9CQUFvQixDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ3JGLE1BQU1DLFdBQVcsR0FBR0MsUUFBUSxDQUFDSCxtQkFBbUIsQ0FBQ0ksV0FBVyxDQUFDO01BRTdEakIsWUFBWSxDQUFDa0IsSUFBSSxDQUFDSCxXQUFXLENBQUM7TUFDOUJJLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDcEIsWUFBWSxDQUFDOztNQUVyQztNQUNRLElBQUlBLFlBQVksQ0FBQ3FCLE1BQU0sS0FBS3RCLGtCQUFrQixDQUFDc0IsTUFBTSxFQUFFO1FBQ25ELE1BQU1DLGlCQUFpQixHQUFHdEIsWUFBWSxDQUFDdUIsTUFBTSxDQUFDLENBQUNDLEdBQUcsRUFBRUMsSUFBSSxLQUFLRCxHQUFHLEdBQUdDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDM0UsTUFBTUMsaUJBQWlCLEdBQUcsQ0FBRSx1QkFBdUIsRUFDbkQsV0FBVyxFQUNYLGlCQUFpQixFQUNqQixzQkFBc0IsRUFDdEIsc0JBQXNCLEVBQ3RCLHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIscUJBQXFCLEVBQ3JCLG1DQUFtQyxDQUFDO1FBQ3BDN0IseURBQWMsQ0FBQ0Usa0JBQWtCLEVBQUVDLFlBQVksRUFBRXNCLGlCQUFpQixFQUFFSSxpQkFBaUIsQ0FBQztNQUMxRjtJQUNBLENBQUMsQ0FBQyxDQUNEQyxLQUFLLENBQUMsVUFBU0MsS0FBSyxFQUFFO01BQ3ZCVCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxRQUFRLEVBQUVRLEtBQUssQ0FBQztJQUM1QixDQUFDLENBQUM7RUFDTixDQUFDLENBQUM7QUFDTiIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9xdWFudEZpbmFuY2UuanM/MThkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVCYXJDaGFydCB9IGZyb20gXCIuL2JhckNoYXJ0XCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaFF1YW50RmluYW5jZSgpIHtcbiAgICBcbiAgICBjb25zdCBxRmluYW5jZUNhdGVnb3JpZXMgPSBbXCJxLWZpbi5DUFwiLFxuICAgICAgICAgICAgXCJxLWZpbi5FQ1wiLFxuICAgICAgICAgICAgXCJxLWZpbi5HTlwiLFxuICAgICAgICAgICAgXCJxLWZpbi5NRlwiLFxuICAgICAgICAgICAgXCJxLWZpbi5QTVwiLFxuICAgICAgICAgICAgXCJxLWZpbi5QUlwiLFxuICAgICAgICAgICAgXCJxLWZpbi5STVwiLFxuICAgICAgICAgICAgXCJxLWZpbi5TVFwiLFxuICAgICAgICAgICAgXCJxLWZpbi5UUlwiXTsgXG4gICAgbGV0IHRvdGFsUmVzdWx0cyA9IFtdO1xuICAgIFxuICAgIC8vIEZldGNoIHRvdGFsIHJlc3VsdHMgZm9yIGVhY2ggY2F0ZWdvcnlcbiAgICBxRmluYW5jZUNhdGVnb3JpZXMuZm9yRWFjaChmdW5jdGlvbihjYXRlZ29yeSkge1xuICAgICAgY29uc3QgYXBpVXJsID0gYGh0dHBzOi8vZXhwb3J0LmFyeGl2Lm9yZy9hcGkvcXVlcnk/c2VhcmNoX3F1ZXJ5PWNhdDoke2NhdGVnb3J5fSZzdGFydD0wJm1heF9yZXN1bHRzPTFgO1xuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIGZldGNoKGFwaVVybClcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgIH0pXG4gICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlVGV4dCkge1xuICAgICAgICAgICAgY29uc3QgcGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuICAgICAgICAgICAgY29uc3QgeG1sRG9jID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhyZXNwb25zZVRleHQsICd0ZXh0L3htbCcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCB0b3RhbFJlc3VsdHNFbGVtZW50ID0geG1sRG9jLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdvcGVuc2VhcmNoOnRvdGFsUmVzdWx0cycpWzBdO1xuICAgICAgICAgICAgY29uc3QgdG90YWxSZXN1bHQgPSBwYXJzZUludCh0b3RhbFJlc3VsdHNFbGVtZW50LnRleHRDb250ZW50KTtcblxuICAgICAgICAgICAgdG90YWxSZXN1bHRzLnB1c2godG90YWxSZXN1bHQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2codG90YWxSZXN1bHRzKVxuICAgICAgXG4vLyBDYWxsIHRoZSBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGJhciBjaGFydCBhZnRlciBhbGwgY2F0ZWdvcmllcyBoYXZlIGJlZW4gZmV0Y2hlZFxuICAgICAgICBpZiAodG90YWxSZXN1bHRzLmxlbmd0aCA9PT0gcUZpbmFuY2VDYXRlZ29yaWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgdG90YWxBcnRpY2xlQ291bnQgPSB0b3RhbFJlc3VsdHMucmVkdWNlKChhY2MsIGN1cnIpID0+IGFjYyArIGN1cnIsIDApO1xuICAgICAgICAgICAgY29uc3QgZnVsbENhdGVnb3J5TmFtZXMgPSBbIFwiQ29tcHV0YXRpb25hbCBGaW5hbmNlXCIsXG4gICAgICAgICAgICBcIkVjb25vbWljc1wiLFxuICAgICAgICAgICAgXCJHZW5lcmFsIEZpbmFuY2VcIixcbiAgICAgICAgICAgIFwiTWF0aGVtYXRpY2FsIEZpbmFuY2VcIixcbiAgICAgICAgICAgIFwiUG9ydGZvbGlvIE1hbmFnZW1lbnRcIixcbiAgICAgICAgICAgIFwiUHJpY2luZyBvZiBTZWN1cml0aWVzXCIsXG4gICAgICAgICAgICBcIlJpc2sgTWFuYWdlbWVudFwiLFxuICAgICAgICAgICAgXCJTdGF0aXN0aWNhbCBGaW5hbmNlXCIsXG4gICAgICAgICAgICBcIlRyYWRpbmcgYW5kIE1hcmtldCBNaWNyb3N0cnVjdHVyZVwiXTtcbiAgICAgICAgICAgIGNyZWF0ZUJhckNoYXJ0KHFGaW5hbmNlQ2F0ZWdvcmllcywgdG90YWxSZXN1bHRzLCB0b3RhbEFydGljbGVDb3VudCwgZnVsbENhdGVnb3J5TmFtZXMpO1xuICAgICAgICB9IFxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yOicsIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4gICAgICAgICAgICBcblxuXG4gICAgICAgICAgICBcbiJdLCJuYW1lcyI6WyJjcmVhdGVCYXJDaGFydCIsImZldGNoUXVhbnRGaW5hbmNlIiwicUZpbmFuY2VDYXRlZ29yaWVzIiwidG90YWxSZXN1bHRzIiwiZm9yRWFjaCIsImNhdGVnb3J5IiwiYXBpVXJsIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJ0ZXh0IiwicmVzcG9uc2VUZXh0IiwicGFyc2VyIiwiRE9NUGFyc2VyIiwieG1sRG9jIiwicGFyc2VGcm9tU3RyaW5nIiwidG90YWxSZXN1bHRzRWxlbWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidG90YWxSZXN1bHQiLCJwYXJzZUludCIsInRleHRDb250ZW50IiwicHVzaCIsImNvbnNvbGUiLCJsb2ciLCJsZW5ndGgiLCJ0b3RhbEFydGljbGVDb3VudCIsInJlZHVjZSIsImFjYyIsImN1cnIiLCJmdWxsQ2F0ZWdvcnlOYW1lcyIsImNhdGNoIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/quantFinance.js\n");

/***/ }),

/***/ "./src/searchBar.js":
/*!**************************!*\
  !*** ./src/searchBar.js ***!
  \**************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleSubmit: function() { return /* binding */ handleSubmit; }\n/* harmony export */ });\n/* harmony import */ var _authors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./authors */ \"./src/authors.js\");\n\nfunction handleSubmit(event) {\n  event.preventDefault(); // Prevent the form from submitting\n\n  const searchTerm = document.getElementById('search-input').value;\n  const max = 10; // Get the search term\n\n  // Send a request to the arXiv API\n  fetch(`https://export.arxiv.org/api/query?search_query=ti:${searchTerm}&sortBy=submittedDate&sortOrder=descending&max_results=${max}`, {\n    method: 'GET'\n  }).then(response => response.text()).then(data => {\n    // Process the response data\n    const parser = new DOMParser();\n    const xmlDoc1 = parser.parseFromString(data, 'text/xml');\n    const totalResultsElement = xmlDoc1.getElementsByTagName('opensearch:totalResults')[0];\n    const totalResult = parseInt(totalResultsElement.textContent);\n    const resultsDiv = document.getElementById('results');\n    resultsDiv.innerHTML = ''; // Clear previous results\n\n    const totalResultsEle = document.createElement('h3');\n    totalResultsEle.textContent = ` Showing only most recent of total: ${totalResult}  articles`;\n    resultsDiv.appendChild(totalResultsEle);\n    const entries = xmlDoc1.getElementsByTagName('entry');\n    function displayArticleDetails(authors, summary) {\n      const articleDetailsContainer = document.createElement('div');\n      articleDetailsContainer.classList.add('article-details-container');\n      const authorsList = document.createElement('ul');\n      authorsList.classList.add('authors-list');\n      authors.forEach(author => {\n        const authorItem = document.createElement('li');\n        const authorButton = document.createElement('button');\n        authorButton.classList.add('author-button');\n        authorButton.textContent = author;\n        authorButton.addEventListener('click', () => (0,_authors__WEBPACK_IMPORTED_MODULE_0__.displayAuthorStats)(author));\n        authorItem.appendChild(authorButton);\n        authorsList.appendChild(authorItem);\n      });\n      const summaryHeading = document.createElement('h4');\n      summaryHeading.textContent = 'Abstract:';\n      const summaryElement = document.createElement('p');\n      summaryElement.classList.add('summary');\n      summaryElement.textContent = summary;\n      const authorsHeading = document.createElement('h2');\n      authorsHeading.classList.add('authors-heading');\n      authorsHeading.textContent = 'Authors';\n      articleDetailsContainer.appendChild(summaryHeading);\n      articleDetailsContainer.appendChild(summaryElement);\n      articleDetailsContainer.appendChild(authorsHeading);\n      articleDetailsContainer.appendChild(authorsList);\n\n      // Clear previous article details\n      const existingArticleDetailsContainer = document.querySelector('.article-details-container');\n      if (existingArticleDetailsContainer) {\n        existingArticleDetailsContainer.remove();\n      }\n      const resultsDiv = document.getElementById('results');\n      resultsDiv.appendChild(articleDetailsContainer);\n    }\n    const articlesList = document.createElement('ul');\n    articlesList.classList.add('articles-list');\n    const authorsListContainer = document.createElement('div');\n    authorsListContainer.classList.add('authors-list-container');\n    for (let i = 0; i < entries.length; i++) {\n      const title = entries[i].getElementsByTagName('title')[0].textContent;\n      const authors = Array.from(entries[i].getElementsByTagName('author')).map(author => author.getElementsByTagName('name')[0].textContent);\n      const summary = entries[i].getElementsByTagName('summary')[0].textContent;\n      const articleTitleItem = document.createElement('li');\n      const articleTitleButton = document.createElement('button');\n      articleTitleButton.classList.add('article-button');\n      articleTitleButton.textContent = title;\n      articleTitleButton.addEventListener('click', () => displayArticleDetails(authors, summary));\n      articleTitleItem.appendChild(articleTitleButton);\n      articlesList.appendChild(articleTitleItem);\n    }\n    resultsDiv.appendChild(articlesList);\n    resultsDiv.appendChild(authorsListContainer);\n  }).catch(error => {\n    console.error('Error:', error);\n  });\n}\n\n// for (let i = 0; i < entries.length; i++) {\n//   const title = entries[i].getElementsByTagName('title')[0].textContent;\n//   const authors = Array.from(entries[i].getElementsByTagName('author')).map(author => author.getElementsByTagName('name')[0].textContent);\n\n//   const articleTitleItem = document.createElement('li');\n//   const articleTitleButton = document.createElement('button');\n//   articleTitleButton.textContent = title;\n//   articleTitleButton.addEventListener('click', () => displayAuthors(authors, articleTitleItem));\n\n//   articleTitleItem.appendChild(articleTitleButton);\n//   articlesList.appendChild(articleTitleItem);\n\n// }\n\n// function displayAuthors(authors, container) {\n//   container.innerHTML = ''; // Clear previous authors\n\n//   const authorsList = document.createElement('ul');\n//   authors.forEach(author => {\n//     const authorItem = document.createElement('li');\n//     authorItem.textContent = author;\n//     authorsList.appendChild(authorItem);\n//   });\n\n// function displayAuthors(authors, container) {\n//   container.innerHTML = ''; // Clear previous authors\n\n//   const authorsList = document.createElement('ul');\n//   authorsList.classList.add('authors-list');\n//   authors.forEach(author => {\n//     const authorItem = document.createElement('li');\n//     const authorButton = document.createElement('button');\n//     authorButton.textContent = author;\n//     authorButton.addEventListener('click', () => displayAuthorStats(author));\n\n//     authorItem.appendChild(authorButton);\n//     authorsList.appendChild(authorItem);\n//   });\n\n//   container.appendChild(authorsList);\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/searchBar.js\n");

/***/ }),

/***/ "./src/statistics.js":
/*!***************************!*\
  !*** ./src/statistics.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchStatistics: function() { return /* binding */ fetchStatistics; }\n/* harmony export */ });\n/* harmony import */ var _barChart__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./barChart */ \"./src/barChart.js\");\n\nfunction fetchStatistics() {\n  const statsCategories = ['stat.AP', 'stat.CO', 'stat.ME', 'stat.ML', 'stat.OT', 'stat.TH'];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  statsCategories.forEach(function (category) {\n    const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === statsCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = [\"Applications\", \"Computation\", \"Methodology\", \"Machine Learning\", \"Other Statistics\", \"Statistics Theory\"];\n        (0,_barChart__WEBPACK_IMPORTED_MODULE_0__.createBarChart)(statsCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3RhdGlzdGljcy5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE0QztBQUdyQyxTQUFTQyxlQUFlQSxDQUFBLEVBQUc7RUFFOUIsTUFBTUMsZUFBZSxHQUFHLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7RUFDMUYsSUFBSUMsWUFBWSxHQUFHLEVBQUU7O0VBRXJCO0VBQ0FELGVBQWUsQ0FBQ0UsT0FBTyxDQUFDLFVBQVNDLFFBQVEsRUFBRTtJQUN2QyxNQUFNQyxNQUFNLEdBQUksc0RBQXFERCxRQUFTLHdCQUF1QjtJQUVyR0UsS0FBSyxDQUFDRCxNQUFNLENBQUMsQ0FDWkUsSUFBSSxDQUFDLFVBQVNDLFFBQVEsRUFBRTtNQUNyQixPQUFPQSxRQUFRLENBQUNDLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUMsQ0FBQyxDQUNERixJQUFJLENBQUMsVUFBU0csWUFBWSxFQUFFO01BQ3pCLE1BQU1DLE1BQU0sR0FBRyxJQUFJQyxTQUFTLENBQUMsQ0FBQztNQUM5QixNQUFNQyxNQUFNLEdBQUdGLE1BQU0sQ0FBQ0csZUFBZSxDQUFDSixZQUFZLEVBQUUsVUFBVSxDQUFDO01BRS9ELE1BQU1LLG1CQUFtQixHQUFHRixNQUFNLENBQUNHLG9CQUFvQixDQUFDLHlCQUF5QixDQUFDLENBQUMsQ0FBQyxDQUFDO01BQ3JGLE1BQU1DLFdBQVcsR0FBR0MsUUFBUSxDQUFDSCxtQkFBbUIsQ0FBQ0ksV0FBVyxDQUFDO01BRTdEakIsWUFBWSxDQUFDa0IsSUFBSSxDQUFDSCxXQUFXLENBQUM7TUFDOUJJLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDcEIsWUFBWSxDQUFDOztNQUVyQztNQUNRLElBQUlBLFlBQVksQ0FBQ3FCLE1BQU0sS0FBS3RCLGVBQWUsQ0FBQ3NCLE1BQU0sRUFBRTtRQUNoRCxNQUFNQyxpQkFBaUIsR0FBR3RCLFlBQVksQ0FBQ3VCLE1BQU0sQ0FBQyxDQUFDQyxHQUFHLEVBQUVDLElBQUksS0FBS0QsR0FBRyxHQUFHQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLE1BQU1DLGlCQUFpQixHQUFHLENBQUcsY0FBYyxFQUMzQyxhQUFhLEVBQ2IsYUFBYSxFQUNiLGtCQUFrQixFQUNsQixrQkFBa0IsRUFDbEIsbUJBQW1CLENBQUM7UUFDcEI3Qix5REFBYyxDQUFDRSxlQUFlLEVBQUVDLFlBQVksRUFBRXNCLGlCQUFpQixFQUFFSSxpQkFBaUIsQ0FBQztNQUN2RjtJQUNBLENBQUMsQ0FBQyxDQUNEQyxLQUFLLENBQUMsVUFBU0MsS0FBSyxFQUFFO01BQ3ZCVCxPQUFPLENBQUNDLEdBQUcsQ0FBQyxRQUFRLEVBQUVRLEtBQUssQ0FBQztJQUM1QixDQUFDLENBQUM7RUFDTixDQUFDLENBQUM7QUFDTiIsInNvdXJjZXMiOlsid2VicGFjazovL2phdmFzY3JpcHQtcHJvamVjdC8uL3NyYy9zdGF0aXN0aWNzLmpzP2FhOWIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlQmFyQ2hhcnQgfSBmcm9tIFwiLi9iYXJDaGFydFwiO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBmZXRjaFN0YXRpc3RpY3MoKSB7XG4gICAgXG4gICAgY29uc3Qgc3RhdHNDYXRlZ29yaWVzID0gWydzdGF0LkFQJywgJ3N0YXQuQ08nLCAnc3RhdC5NRScsICdzdGF0Lk1MJywgJ3N0YXQuT1QnLCAnc3RhdC5USCddOyBcbiAgICBsZXQgdG90YWxSZXN1bHRzID0gW107XG4gICAgXG4gICAgLy8gRmV0Y2ggdG90YWwgcmVzdWx0cyBmb3IgZWFjaCBjYXRlZ29yeVxuICAgIHN0YXRzQ2F0ZWdvcmllcy5mb3JFYWNoKGZ1bmN0aW9uKGNhdGVnb3J5KSB7XG4gICAgICAgIGNvbnN0IGFwaVVybCA9IGBodHRwOi8vZXhwb3J0LmFyeGl2Lm9yZy9hcGkvcXVlcnk/c2VhcmNoX3F1ZXJ5PWNhdDoke2NhdGVnb3J5fSZzdGFydD0wJm1heF9yZXN1bHRzPTFgO1xuICAgICAgICBcbiAgICAgICAgZmV0Y2goYXBpVXJsKVxuICAgICAgICAudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgfSlcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2VUZXh0KSB7XG4gICAgICAgICAgICBjb25zdCBwYXJzZXIgPSBuZXcgRE9NUGFyc2VyKCk7XG4gICAgICAgICAgICBjb25zdCB4bWxEb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKHJlc3BvbnNlVGV4dCwgJ3RleHQveG1sJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IHRvdGFsUmVzdWx0c0VsZW1lbnQgPSB4bWxEb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ29wZW5zZWFyY2g6dG90YWxSZXN1bHRzJylbMF07XG4gICAgICAgICAgICBjb25zdCB0b3RhbFJlc3VsdCA9IHBhcnNlSW50KHRvdGFsUmVzdWx0c0VsZW1lbnQudGV4dENvbnRlbnQpO1xuXG4gICAgICAgICAgICB0b3RhbFJlc3VsdHMucHVzaCh0b3RhbFJlc3VsdCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh0b3RhbFJlc3VsdHMpXG4gICAgICBcbi8vIENhbGwgdGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYmFyIGNoYXJ0IGFmdGVyIGFsbCBjYXRlZ29yaWVzIGhhdmUgYmVlbiBmZXRjaGVkXG4gICAgICAgIGlmICh0b3RhbFJlc3VsdHMubGVuZ3RoID09PSBzdGF0c0NhdGVnb3JpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCB0b3RhbEFydGljbGVDb3VudCA9IHRvdGFsUmVzdWx0cy5yZWR1Y2UoKGFjYywgY3VycikgPT4gYWNjICsgY3VyciwgMCk7XG4gICAgICAgICAgICBjb25zdCBmdWxsQ2F0ZWdvcnlOYW1lcyA9IFsgIFwiQXBwbGljYXRpb25zXCIsXG4gICAgICAgICAgICBcIkNvbXB1dGF0aW9uXCIsXG4gICAgICAgICAgICBcIk1ldGhvZG9sb2d5XCIsXG4gICAgICAgICAgICBcIk1hY2hpbmUgTGVhcm5pbmdcIixcbiAgICAgICAgICAgIFwiT3RoZXIgU3RhdGlzdGljc1wiLFxuICAgICAgICAgICAgXCJTdGF0aXN0aWNzIFRoZW9yeVwiXTtcbiAgICAgICAgICAgIGNyZWF0ZUJhckNoYXJ0KHN0YXRzQ2F0ZWdvcmllcywgdG90YWxSZXN1bHRzLCB0b3RhbEFydGljbGVDb3VudCwgZnVsbENhdGVnb3J5TmFtZXMpO1xuICAgICAgICB9IFxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yOicsIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4gICAgICAgICAgICBcbiAgICAgIFxuIl0sIm5hbWVzIjpbImNyZWF0ZUJhckNoYXJ0IiwiZmV0Y2hTdGF0aXN0aWNzIiwic3RhdHNDYXRlZ29yaWVzIiwidG90YWxSZXN1bHRzIiwiZm9yRWFjaCIsImNhdGVnb3J5IiwiYXBpVXJsIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJ0ZXh0IiwicmVzcG9uc2VUZXh0IiwicGFyc2VyIiwiRE9NUGFyc2VyIiwieG1sRG9jIiwicGFyc2VGcm9tU3RyaW5nIiwidG90YWxSZXN1bHRzRWxlbWVudCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidG90YWxSZXN1bHQiLCJwYXJzZUludCIsInRleHRDb250ZW50IiwicHVzaCIsImNvbnNvbGUiLCJsb2ciLCJsZW5ndGgiLCJ0b3RhbEFydGljbGVDb3VudCIsInJlZHVjZSIsImFjYyIsImN1cnIiLCJmdWxsQ2F0ZWdvcnlOYW1lcyIsImNhdGNoIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/statistics.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2Nzcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;