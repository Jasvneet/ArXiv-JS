(function(){"use strict";var __webpack_modules__={733:function(){eval("\n;// CONCATENATED MODULE: ./src/barChart.js\nfunction createBarChart(categories, totalResults, totalArticleCount, fullCategoryNames) {\n  const data = [{\n    x: categories,\n    y: totalResults,\n    type: 'bar',\n    marker: {\n      color: 'rgb(9, 238, 253)',\n      // Change this color to your desired color\n      line: {\n        color: 'black',\n        // Set the bar border color\n        width: 1 // Set the bar border width\n      }\n    },\n\n    text: fullCategoryNames,\n    // Display full category names inside the bar\n    hovertemplate: '%{text}<br>Article Count: %{y}'\n  }];\n  const layout = {\n    title: {\n      text: 'Number of Articles Published per Subcategory',\n      font: {\n        family: 'Arial, sans-serif',\n        // Change this to your desired font family\n        size: 18,\n        // Change this to your desired font size\n        color: 'white' // Change this to your desired font color\n      }\n    },\n\n    xaxis: {\n      title: {\n        text: 'Subcategory',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'white' // Change this to your desired font color\n        }\n      },\n\n      tickfont: {\n        color: 'white'\n      }\n    },\n    yaxis: {\n      title: {\n        text: 'Article Count',\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'white' // Change this to your desired font color\n        }\n      },\n\n      tickfont: {\n        color: 'white'\n      }\n    },\n    plot_bgcolor: 'rgb(38, 48, 90)',\n    // Change this color to your desired background color\n    paper_bgcolor: 'rgb(38, 48, 90)' // Change this color to your desired background color\n  };\n\n  const chartContainer = document.getElementById('chartContainer');\n  chartContainer.innerHTML = '';\n\n  // Create div for total article count\n  const totalArticleCountDiv = document.getElementById('total-article-count');\n  totalArticleCountDiv.innerHTML = '';\n  const totalArticleCountButton = document.createElement('button');\n  totalArticleCountButton.textContent = `Category Total: ${totalArticleCount} articles`;\n  totalArticleCountButton.classList.add('total-article-count-button');\n\n  // Append total article count button to the chart container\n  totalArticleCountDiv.appendChild(totalArticleCountButton);\n  Plotly.newPlot('chartContainer', data, layout);\n}\n;// CONCATENATED MODULE: ./src/physics.js\n\nfunction fetchPhysics() {\n  console.log('Physics');\n  const physicsCategories = ['astro-ph.CO', 'astro-ph.EP', 'astro-ph.GA', 'astro-ph.HE', 'astro-ph.IM', 'astro-ph.SR', 'cond-mat.dis-nn', 'cond-mat.mes-hall', 'cond-mat.mtrl-sci', 'cond-mat.other', 'cond-mat.quant-gas', 'cond-mat.soft', 'cond-mat.stat-mech', 'cond-mat.str-el', 'cond-mat.supr-con', 'gr-qc', 'hep-ex', 'hep-lat', 'hep-ph', 'hep-th', 'math-ph', 'nlin.AO', 'nlin.CD', 'nlin.CG', 'nlin.PS', 'nlin.SI', 'nucl-ex', 'nucl-th', 'physics.acc-ph', 'physics.ao-ph', 'physics.app-ph', 'physics.atm-clus', 'physics.atom-ph', 'physics.bio-ph', 'physics.chem-ph', 'physics.class-ph', 'physics.comp-ph', 'physics.data-an', 'physics.ed-ph', 'physics.flu-dyn', 'physics.gen-ph', 'physics.geo-ph', 'physics.hist-ph', 'physics.ins-det', 'physics.med-ph', 'physics.optics', 'physics.plasm-ph', 'physics.pop-ph', 'physics.soc-ph', 'physics.space-ph', 'quant-ph'];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  physicsCategories.forEach(function (category) {\n    const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === physicsCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = [\"Cosmology and Nongalactic Astrophysics\", \"Earth and Planetary Astrophysics\", \"Astrophysics of Galaxies\", \"High Energy Astrophysical Phenomena\", \"Instrumentation and Methods for Astrophysics\", \"Solar and Stellar Astrophysics\", \"Disordered Systems and Neural Networks\", \"Mesoscale and Nanoscale Physics\", \"Materials Science\", \"Other Condensed Matter\", \"Quantum Gases\", \"Soft Condensed Matter\", \"Statistical Mechanics\", \"Strongly Correlated Electrons\", \"Superconductivity\", \"General Relativity and Quantum Cosmology\", \"High Energy Physics - Experiment\", \"High Energy Physics - Lattice\", \"High Energy Physics - Phenomenology\", \"High Energy Physics - Theory\", \"Mathematical Physics\", \"Adaptation and Self-Organizing Systems\", \"Chaotic Dynamics\", \"Cellular Automata and Lattice Gases\", \"Pattern Formation and Solitons\", \"Exactly Solvable and Integrable Systems\", \"Nuclear Experiment\", \"Nuclear Theory\", \"Accelerator Physics\", \"Atmospheric and Oceanic Physics\", \"Applied Physics\", \"Atomic and Molecular Clusters\", \"Atomic Physics\", \"Biological Physics\", \"Chemical Physics\", \"Classical Physics\", \"Computational Physics\", \"Data Analysis, Statistics and Probability\", \"Physics Education\", \"Fluid Dynamics\", \"General Physics\", \"Geophysics\", \"History and Philosophy of Physics\", \"Instrumentation and Detectors\", \"Medical Physics\", \"Optics\", \"Plasma Physics\", \"Popular Physics\", \"Physics and Society\", \"Space Physics\", \"Quantum Physics\"];\n        createBarChart(physicsCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\n;// CONCATENATED MODULE: ./src/economics.js\n\nfunction fetchEconomics() {\n  const economicsCategories = ['econ.EM', 'econ.GN', 'econ.TH'];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  economicsCategories.forEach(function (category) {\n    const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === economicsCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = ['Econometrics', 'General Economics', 'Theoretical Economics'];\n        createBarChart(economicsCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\n\n// function createBarChart(categories, totalResults) {\n//     const ctx = document.getElementById('econChart').getContext('2d');\n\n//     new Chart(ctx, {\n//       type: 'bar',\n//       data: {\n//         labels: categories,\n//         datasets: [{\n//           label: 'Total Results',\n//           data: totalResults,\n//           backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//           borderColor: 'rgba(75, 192, 192, 1)',\n//           borderWidth: 1\n//         }]\n//       },\n//       options: {\n//         responsive: true,\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//             title: {\n//               display: true,\n//               text: 'Total Results'\n//             }\n//           },\n//           x: {\n//             title: {\n//               display: true,\n//               text: 'Categories'\n//             }\n//           }\n//         }\n//       }\n//     });\n//   }        \n\n//             totalSum += totalResults;\n\n//             // Handle individual category total results\n//             console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }\n;// CONCATENATED MODULE: ./src/math.js\n\nfunction fetchMath() {\n  const mathCategories = [\"math.AC\", \"math.AG\", \"math.AP\", \"math.AT\", \"math.CA\", \"math.CO\", \"math.CT\", \"math.CV\", \"math.DG\", \"math.DS\", \"math.FA\", \"math.GM\", \"math.GN\", \"math.GR\", \"math.GT\", \"math.H\", \"math.IT\", \"math.KT\", \"math.LO\", \"math.MG\", \"math.MP\", \"math.NA\", \"math.NT\", \"math.OA\", \"math.OC\", \"math.PR\", \"math.QA\", \"math.RA\", \"math.RT\", \"math.S\", \"math.SP\", \"math.ST\"];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  mathCategories.forEach(function (category) {\n    const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === mathCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = [\"Commutative Algebra\", \"Algebraic Geometry\", \"Analysis of PDEs\", \"Algebraic Topology\", \"Classical Analysis and ODEs\", \"Combinatorics\", \"Category Theory\", \"Complex Variables\", \"Differential Geometry\", \"Dynamical Systems\", \"Functional Analysis\", \"General Mathematics\", \"General Topology\", \"Group Theory\", \"Geometric Topology\", \"History and Overview\", \"Information Theory\", \"K-Theory and Homology\", \"Logic\", \"Metric Geometry\", \"Mathematical Physics\", \"Numerical Analysis\", \"Number Theory\", \"Operator Algebras\", \"Optimization and Control\", \"Probability\", \"Quantum Algebra\", \"Rings and Algebras\", \"Representation Theory\", \"Symplectic Geometry\", \"Spectral Theory\", \"Statistics Theory\"];\n        createBarChart(mathCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\n;// CONCATENATED MODULE: ./src/cs.js\n\nfunction fetchComputerScience() {\n  const csCategories = ['cs.AI', 'cs.AR', 'cs.CC', 'cs.CE', 'cs.CG', 'cs.CL', 'cs.CR', 'cs.CV', 'cs.CY', 'cs.DB', 'cs.DC', 'cs.DL', 'cs.DM', 'cs.DS', 'cs.ET', 'cs.FL', 'cs.GL', 'cs.GR', 'cs.GT', 'cs.HC', 'cs.IR', 'cs.IT', 'cs.LG', 'cs.LO', 'cs.MA', 'cs.MM', 'cs.MS', 'cs.NA', 'cs.NE', 'cs.NI', 'cs.OH', 'cs.OS', 'cs.PF', 'cs.PL', 'cs.RO', 'cs.SC', 'cs.SD', 'cs.SE', 'cs.SI', 'cs.SY'];\n  let totalResults = [];\n  csCategories.forEach(function (category) {\n    const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      // console.log(totalResults)\n\n      if (totalResults.length === csCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = [\"Artificial Intelligence\", \"Hardware Architecture\", \"Computational Complexity\", \"Computational Engineering, Finance, and Science\", \"Computational Geometry\", \"Computation and Language\", \"Cryptography and Security\", \"Computer Vision and Pattern Recognition\", \"Computers and Society\", \"Databases\", \"Distributed, Parallel, and Cluster Computing\", \"Digital Libraries\", \"Discrete Mathematics\", \"Data Structures and Algorithms\", \"Emerging Technologies\", \"Formal Languages and Automata Theory\", \"General Literature\", \"Graphics\", \"Computer Science and Game Theory\", \"Human-Computer Interaction\", \"Information Retrieval\", \"Information Theory\", \"Machine Learning\", \"Logic in Computer Science\", \"Multiagent Systems\", \"Multimedia\", \"Mathematical Software\", \"Numerical Analysis\", \"Neural and Evolutionary Computing\", \"Networking and Internet Architecture\", \"Other Computer Science\", \"Operating Systems\", \"Performance\", \"Programming Languages\", \"Robotics\", \"Symbolic Computation\", \"Sound\", \"Software Engineering\", \"Social and Information Networks\", \"Systems and Control\"];\n        createBarChart(csCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\n\n//             totalSum += totalResults;\n\n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n\n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }\n;// CONCATENATED MODULE: ./src/electricalengineering.js\n\nfunction fetchElectricalEngineering() {\n  const eeCategories = [\"eess.AS\", \"eess.IV\", \"eess.SP\", \"eess.SY\"];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  eeCategories.forEach(function (category) {\n    const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === eeCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = [\"Audio and Speech Processing\", \"Image and Video Processing\", \"Signal Processing\", \"Systems and Control\"];\n        createBarChart(eeCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\n;// CONCATENATED MODULE: ./src/statistics.js\n\nfunction fetchStatistics() {\n  const statsCategories = ['stat.AP', 'stat.CO', 'stat.ME', 'stat.ML', 'stat.OT', 'stat.TH'];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  statsCategories.forEach(function (category) {\n    const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === statsCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = [\"Applications\", \"Computation\", \"Methodology\", \"Machine Learning\", \"Other Statistics\", \"Statistics Theory\"];\n        createBarChart(statsCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\n;// CONCATENATED MODULE: ./src/quantBio.js\n\nfunction fetchQuantBio() {\n  const qBioCategories = [\"q-bio.BM\", \"q-bio.CB\", \"q-bio.GN\", \"q-bio.MN\", \"q-bio.NC\", \"q-bio.O\", \"q-bio.PE\", \"q-bio.QM\", \"q-bio.SC\", \"q-bio.TO\"];\n  let totalResults = [];\n\n  // Fetch total results for each category\n  qBioCategories.forEach(function (category) {\n    const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      console.log(totalResults);\n\n      // Call the function to create the bar chart after all categories have been fetched\n      if (totalResults.length === qBioCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = [\"Biomolecules\", \"Cell Behavior\", \"Genomics\", \"Molecular Networks\", \"Neurons and Cognition\", \"Other Quantitative Biology\", \"Populations and Evolution\", \"Quantitative Methods\", \"Subcellular Processes\", \"Tissues and Organs\"];\n        createBarChart(qBioCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\n;// CONCATENATED MODULE: ./src/quantFinance.js\n\nfunction fetchQuantFinance() {\n  const qFinanceCategories = [\"q-fin.CP\", \"q-fin.EC\", \"q-fin.GN\", \"q-fin.MF\", \"q-fin.PM\", \"q-fin.PR\", \"q-fin.RM\", \"q-fin.ST\", \"q-fin.TR\"];\n  let totalResults = [];\n  qFinanceCategories.forEach(function (category) {\n    const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n    fetch(apiUrl).then(function (response) {\n      return response.text();\n    }).then(function (responseText) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n      const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      totalResults.push(totalResult);\n      // console.log(totalResults)\n\n      if (totalResults.length === qFinanceCategories.length) {\n        const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n        const fullCategoryNames = [\"Computational Finance\", \"Economics\", \"General Finance\", \"Mathematical Finance\", \"Portfolio Management\", \"Pricing of Securities\", \"Risk Management\", \"Statistical Finance\", \"Trading and Market Microstructure\"];\n        createBarChart(qFinanceCategories, totalResults, totalArticleCount, fullCategoryNames);\n      }\n    }).catch(function (error) {\n      console.log('Error:', error);\n    });\n  });\n}\n;// CONCATENATED MODULE: ./src/authors.js\nfunction createHeatmapContainer() {\n  const heatmapContainer = document.createElement('div');\n  heatmapContainer.id = 'heatmapContainer';\n  heatmapContainer.classList.add('heatmapContainer');\n  document.body.appendChild(heatmapContainer);\n  return heatmapContainer;\n}\nfunction displayAuthorStats(author) {\n  const heatmapContainer = createHeatmapContainer();\n  heatmapContainer.innerHTML = '';\n  const loadingText = document.createElement('div');\n  loadingText.classList.add('loading-text');\n  loadingText.textContent = 'Loading';\n  const loadingIndicator = document.createElement('div');\n  loadingIndicator.classList.add('loading-indicator');\n  const loadingSymbol = document.createElement('div');\n  loadingSymbol.classList.add('loading-symbol');\n  loadingIndicator.appendChild(loadingText);\n  loadingIndicator.appendChild(loadingSymbol);\n  heatmapContainer.appendChild(loadingIndicator);\n  fetch(`https://export.arxiv.org/api/query?search_query=au:${author}&max_results=2000`, {\n    method: 'GET'\n  }).then(response => response.text()).then(data => {\n    // Process the response data\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(data, 'text/xml');\n    const entries = xmlDoc.getElementsByTagName('entry');\n    const publishedYears = Array.from(entries).map(entry => {\n      const publishedDate = entry.getElementsByTagName('published')[0].textContent;\n      return new Date(publishedDate).getFullYear();\n    });\n    const yearsCount = {};\n    publishedYears.forEach(year => {\n      yearsCount[year] = (yearsCount[year] || 0) + 1;\n    });\n    const years = Object.keys(yearsCount);\n    const counts = Object.values(yearsCount);\n\n    // Prepare data for the heatmap\n    const data1 = [{\n      x: years,\n      y: [''],\n      z: [counts],\n      type: 'heatmap',\n      colorscale: 'Viridis',\n      showscale: true,\n      hovertemplate: `<b>Year: %{x}</b><br>Author: ${author}<br>Articles: %{z}`,\n      colorbar: {\n        tickfont: {\n          color: 'white' // Change the color of the numbers on the gradient scale here\n        }\n      }\n    }];\n\n    // Define layout options for the heatmap\n    const layout = {\n      title: {\n        text: `# of ${author}'s Publications over the Past Years`,\n        font: {\n          family: 'Arial, sans-serif',\n          // Change this to your desired font family\n          size: 18,\n          // Change this to your desired font size\n          color: 'white' // Change this to your desired font color\n        }\n      },\n\n      xaxis: {\n        title: {\n          text: 'Year',\n          font: {\n            family: 'Arial, sans-serif',\n            // Change this to your desired font family\n            size: 18,\n            // Change this to your desired font size\n            color: 'white' // Change this to your desired font color\n          }\n        },\n\n        tickfont: {\n          color: 'white'\n        }\n      },\n      yaxis: {\n        title: {\n          text: `${author}`,\n          font: {\n            family: 'Arial, sans-serif',\n            // Change this to your desired font family\n            size: 18,\n            // Change this to your desired font size\n            color: 'white' // Change this to your desired font color\n          }\n        },\n\n        tickfont: {\n          color: 'white'\n        }\n      },\n      plot_bgcolor: 'rgb(38, 48, 90)',\n      // Change this color to your desired background color\n      paper_bgcolor: 'rgb(38, 48, 90)'\n    };\n    heatmapContainer.removeChild(loadingIndicator);\n\n    // Plot the heatmap using Plotly\n    Plotly.newPlot('heatmapContainer', data1, layout);\n  }).catch(error => {\n    console.error('Error:', error);\n    loadingIndicator.remove();\n  });\n}\n;// CONCATENATED MODULE: ./src/searchBar.js\n\nlet previousState = null;\nfunction storePreviousState() {\n  previousState = document.body.innerHTML;\n}\nfunction restorePreviousState() {\n  if (previousState) {\n    document.body.innerHTML = previousState;\n  }\n}\nfunction handleSubmit(event) {\n  event.preventDefault();\n  const searchTerm = document.getElementById('search-input').value;\n  const max = 20;\n  fetch(`https://export.arxiv.org/api/query?search_query=ti:${searchTerm}&sortBy=submittedDate&sortOrder=descending&max_results=${max}`, {\n    method: 'GET'\n  }).then(response => response.text()).then(data => {\n    const parser = new DOMParser();\n    const xmlDoc1 = parser.parseFromString(data, 'text/xml');\n    const totalResultsElement = xmlDoc1.getElementsByTagName('opensearch:totalResults')[0];\n    const totalResult = parseInt(totalResultsElement.textContent);\n    storePreviousState();\n    document.body.innerHTML = '';\n    const backButton = document.createElement('button');\n    backButton.classList.add('back-button');\n    backButton.textContent = 'Back to Search';\n    backButton.addEventListener('click', restorePreviousState);\n    document.body.appendChild(backButton);\n    const resultsDiv = document.createElement('div');\n    resultsDiv.id = 'results';\n    resultsDiv.innerHTML = '';\n    const totalResultsEle = document.createElement('h3');\n    totalResultsEle.textContent = ` Most recently published articles of total: ${totalResult} articles`;\n    resultsDiv.appendChild(totalResultsEle);\n    const entries = xmlDoc1.getElementsByTagName('entry');\n    function displayArticleDetails(authors, summary) {\n      const articleDetailsContainer = document.createElement('div');\n      articleDetailsContainer.classList.add('article-details-container');\n      const authorsList = document.createElement('ul');\n      authorsList.classList.add('authors-list');\n      authors.forEach(author => {\n        const authorItem = document.createElement('li');\n        const authorButton = document.createElement('button');\n        authorButton.classList.add('author-button');\n        authorButton.textContent = author;\n        authorButton.addEventListener('click', () => displayAuthorStats(author));\n        authorItem.appendChild(authorButton);\n        authorsList.appendChild(authorItem);\n      });\n      const summaryHeading = document.createElement('h4');\n      summaryHeading.textContent = 'Abstract:';\n      const summaryElement = document.createElement('p');\n      summaryElement.classList.add('summary');\n      summaryElement.textContent = summary;\n      const authorsHeading = document.createElement('h2');\n      authorsHeading.classList.add('authors-heading');\n      authorsHeading.textContent = 'Authors';\n      articleDetailsContainer.appendChild(summaryHeading);\n      articleDetailsContainer.appendChild(summaryElement);\n      articleDetailsContainer.appendChild(authorsHeading);\n      articleDetailsContainer.appendChild(authorsList);\n      const existingArticleDetailsContainer = document.querySelector('.article-details-container');\n      if (existingArticleDetailsContainer) {\n        existingArticleDetailsContainer.remove();\n      }\n      const resultsDiv = document.getElementById('results');\n      resultsDiv.appendChild(articleDetailsContainer);\n    }\n    const articlesList = document.createElement('ul');\n    articlesList.classList.add('articles-list');\n    const authorsListContainer = document.createElement('div');\n    authorsListContainer.classList.add('authors-list-container');\n    for (let i = 0; i < entries.length; i++) {\n      const title = entries[i].getElementsByTagName('title')[0].textContent;\n      const authors = Array.from(entries[i].getElementsByTagName('author')).map(author => author.getElementsByTagName('name')[0].textContent);\n      const summary = entries[i].getElementsByTagName('summary')[0].textContent;\n      const articleTitleItem = document.createElement('li');\n      const articleTitleButton = document.createElement('button');\n      articleTitleButton.classList.add('article-button');\n      articleTitleButton.textContent = title;\n      articleTitleButton.addEventListener('click', () => displayArticleDetails(authors, summary));\n      articleTitleItem.appendChild(articleTitleButton);\n      articlesList.appendChild(articleTitleItem);\n    }\n    resultsDiv.appendChild(articlesList);\n    // resultsDiv.appendChild(authorsListContainer);\n    document.body.appendChild(resultsDiv);\n  }).catch(error => {\n    console.error('Error:', error);\n  });\n}\n;// CONCATENATED MODULE: ./src/index.js\n// import searchBar from './src/searchBar.js'\n\n\n\n\n\n\n\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  // console.log(\"its working\");\n\n  document.getElementById('economicsButton').addEventListener('click', function () {\n    fetchEconomics();\n  });\n  document.getElementById('mathButton').addEventListener('click', function () {\n    fetchMath();\n  });\n  document.getElementById('csButton').addEventListener('click', function () {\n    fetchComputerScience();\n  });\n  document.getElementById('physicsButton').addEventListener('click', function () {\n    fetchPhysics();\n  });\n  document.getElementById('eeButton').addEventListener('click', function () {\n    fetchElectricalEngineering();\n  });\n  document.getElementById('statsButton').addEventListener('click', function () {\n    fetchStatistics();\n  });\n  document.getElementById('quantBioButton').addEventListener('click', function () {\n    fetchQuantBio();\n  });\n  document.getElementById('quantFinanceButton').addEventListener('click', function () {\n    fetchQuantFinance();\n  });\n  document.getElementById('search-button').addEventListener('submit', function () {\n    handleSubmit();\n  });\n  init();\n});\nfunction init() {\n  const form = document.getElementById('search-form');\n  form.addEventListener('submit', handleSubmit);\n  const searchButton = document.getElementById('search-button');\n  searchButton.addEventListener('click', handleSubmit);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///733\n")},37:function(){eval("// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzcuanMiLCJtYXBwaW5ncyI6IkFBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9qYXZhc2NyaXB0LXByb2plY3QvLi9zcmMvaW5kZXguc2Nzcz85NzQ1Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IHt9OyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///37\n")}};__webpack_modules__[733]();var __webpack_exports__={};__webpack_modules__[37]()})();