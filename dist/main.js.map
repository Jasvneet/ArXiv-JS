{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascript-project/./src/barChart.js","webpack://javascript-project/./src/index.js","webpack://javascript-project/./src/economics.js","webpack://javascript-project/./src/math.js","webpack://javascript-project/./src/cs.js","webpack://javascript-project/./src/physics.js","webpack://javascript-project/./src/electricalengineering.js","webpack://javascript-project/./src/statistics.js","webpack://javascript-project/./src/quantBio.js","webpack://javascript-project/./src/quantFinance.js"],"sourcesContent":["export function createBarChart(categories, totalResults) {\n  \n    const data = [{\n      x: categories,\n      y: totalResults,\n      type: 'bar',\n      marker: {\n        color: 'rgb(9, 238, 253)', // Change this color to your desired color\n        line: {\n          color: 'black', // Set the bar border color\n          width: 1 // Set the bar border width\n        }\n      }\n    }];\n    \n    const layout = {\n      title: {\n        text: 'Number of Articles Published per Subcategory',\n        font: {\n          family: 'Arial, sans-serif', // Change this to your desired font family\n          size: 18, // Change this to your desired font size\n          color: 'white' // Change this to your desired font color\n        }\n      },\n      xaxis: {\n        title: {\n          text: 'Subcategory',\n          font: {\n            family: 'Arial, sans-serif', // Change this to your desired font family\n            size: 18, // Change this to your desired font size\n            color: 'white' // Change this to your desired font color\n          }\n        },\n        tickfont: {\n          color: 'white'\n        },\n      },\n      yaxis: {\n        title: {\n          text: 'Article Count',\n          font: {\n            family: 'Arial, sans-serif', // Change this to your desired font family\n            size: 18, // Change this to your desired font size\n            color: 'white' // Change this to your desired font color\n          }\n        },\n        tickfont: {\n          color: 'white'\n        },\n      },\n      plot_bgcolor: 'rgb(38, 48, 90)', // Change this color to your desired background color\n      paper_bgcolor: 'rgb(38, 48, 90)' // Change this color to your desired background color\n    };\n    \n    Plotly.newPlot('econChartContainer', data, layout);\n    \n  }         ","// import searchBar from './src/searchBar.js'\nimport {fetchPhysics} from './physics.js';\nimport {fetchEconomics} from './economics.js';\nimport {fetchMath} from './math.js';\nimport {fetchComputerScience} from './cs.js';\nimport {fetchElectricalEngineering} from './electricalengineering.js';\nimport {fetchStatistics} from './statistics.js';\nimport {fetchQuantBio} from './quantBio.js';\nimport {fetchQuantFinance} from './quantFinance.js';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    console.log(\"its working\");\n\n    document.getElementById('economicsButton').addEventListener('click', function() {\n      fetchEconomics();\n    });\n\n    document.getElementById('mathButton').addEventListener('click', function() {\n      fetchMath();\n    });\n\n    document.getElementById('csButton').addEventListener('click', function() {\n      fetchComputerScience();\n    });\n\n    document.getElementById('physicsButton').addEventListener('click', function() {\n      fetchPhysics();\n    });\n\n    document.getElementById('eeButton').addEventListener('click', function() {\n      fetchElectricalEngineering();\n    });\n\n    document.getElementById('statsButton').addEventListener('click', function() {\n      fetchStatistics();\n    });\n\n    document.getElementById('quantBioButton').addEventListener('click', function() {\n      fetchQuantBio();\n    });\n  \n    document.getElementById('quantFinanceButton').addEventListener('click', function() {\n      fetchQuantFinance();\n    });\n\n    \n    \n  \n  });\n\n \n\n\n  ","import { createBarChart } from \"./barChart\";\n\nexport function fetchEconomics() {\n    \n    const economicsCategories = ['econ.EM', 'econ.GN', 'econ.TH']; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    economicsCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === economicsCategories.length) {\n        createBarChart(economicsCategories, totalResults);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n\n    \n\n\n\n// function createBarChart(categories, totalResults) {\n//     const ctx = document.getElementById('econChart').getContext('2d');\n    \n//     new Chart(ctx, {\n//       type: 'bar',\n//       data: {\n//         labels: categories,\n//         datasets: [{\n//           label: 'Total Results',\n//           data: totalResults,\n//           backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//           borderColor: 'rgba(75, 192, 192, 1)',\n//           borderWidth: 1\n//         }]\n//       },\n//       options: {\n//         responsive: true,\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//             title: {\n//               display: true,\n//               text: 'Total Results'\n//             }\n//           },\n//           x: {\n//             title: {\n//               display: true,\n//               text: 'Categories'\n//             }\n//           }\n//         }\n//       }\n//     });\n//   }        \n  \n\n            \n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\nexport function fetchMath() {\n    \n    const mathCategories = [\"math.AC\",\n            \"math.AG\",\n            \"math.AP\",\n            \"math.AT\",\n            \"math.CA\",\n            \"math.CO\",\n            \"math.CT\",\n            \"math.CV\",\n            \"math.DG\",\n            \"math.DS\",\n            \"math.FA\",\n            \"math.GM\",\n            \"math.GN\",\n            \"math.GR\",\n            \"math.GT\",\n            \"math.H\",\n            \"math.IT\",\n            \"math.KT\",\n            \"math.LO\",\n            \"math.MG\",\n            \"math.MP\",\n            \"math.NA\",\n            \"math.NT\",\n            \"math.OA\",\n            \"math.OC\",\n            \"math.PR\",\n            \"math.QA\",\n            \"math.RA\",\n            \"math.RT\",\n            \"math.S\",\n            \"math.SP\",\n            \"math.ST\"]; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    mathCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n      \n      \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === mathCategories.length) {\n        createBarChart(mathCategories, totalResults);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n\n            \n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\n\nexport function fetchComputerScience() {\n    \n    const csCategories = ['cs.AI', 'cs.AR', 'cs.CC', 'cs.CE', 'cs.CG',\n        'cs.CL', 'cs.CR', 'cs.CV', 'cs.CY', 'cs.DB',\n        'cs.DC', 'cs.DL', 'cs.DM', 'cs.DS', 'cs.ET',\n        'cs.FL', 'cs.GL', 'cs.GR', 'cs.GT', 'cs.HC',\n        'cs.IR', 'cs.IT', 'cs.LG', 'cs.LO', 'cs.MA',\n        'cs.MM', 'cs.MS', 'cs.NA', 'cs.NE', 'cs.NI',\n        'cs.OH', 'cs.OS', 'cs.PF', 'cs.PL', 'cs.RO',\n        'cs.SC', 'cs.SD', 'cs.SE', 'cs.SI', 'cs.SY']; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    csCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === csCategories.length) {\n        createBarChart(csCategories, totalResults);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n\n\n            \n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\nexport function fetchPhysics() {\n    console.log('Physics')\n    const physicsCategories = ['astro-ph.GA', 'astro-ph.HE', 'astro-ph.IM', 'astro-ph.SR', 'cond-mat.dis-nn', 'cond-mat.mes-hall', 'cond-mat.mtrl-sci', 'cond-mat.other', 'cond-mat.quant-gas', 'cond-mat.soft', 'cond-mat.stat-mech','cond-mat.str-el', 'cond-mat.supr-con', 'gr-qc',  'hep-ex', 'hep-lat', 'hep-ph', 'hep-th', 'math-ph', 'nlin.AO', 'nlin.CD', 'nlin.CG', 'nlin.PS', 'nlin.SI', 'nucl-ex', 'nucl-th', 'physics.acc-ph', 'physics.ao-ph', 'physics.app-ph', 'physics.atm-clus', 'physics.atom-ph', 'physics.bio-ph', 'physics.chem-ph', 'physics.class-ph', 'physics.comp-ph', 'physics.data-an', 'physics.ed-ph', 'physics.flu-dyn', 'physics.gen-ph', 'physics.geo-ph', 'physics.hist-ph', 'physics.ins-det', 'physics.med-ph', 'physics.optics', 'physics.plasm-ph', 'physics.pop-ph', 'physics.soc-ph', 'physics.space-ph', 'quant-ph']; \n\n\n    let totalResults = [];\n    \n    // Fetch total results for each category\n    physicsCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n\n      \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === physicsCategories.length) {\n        createBarChart(physicsCategories, totalResults);\n        }\n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n// totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 20000);\n// }\n\n\n// for visualizations \n\n\n\n\n\n\n//   \n// fetch('https://export.arxiv.org/api/query?search_query=cat:physics.acc-ph')\n//   .then(function(response) {\n//     return response.text();\n//   })\n//   .then(function(responseText) {\n//     // Parse the XML response\n//     const parser = new DOMParser();\n//     const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n    \n//     // Extract the total results\n//     const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n//     const totalResults = totalResultsElement.textContent;\n    \n//     // Handle successful response\n//     console.log('Total Results:', totalResults);\n//   })\n//   .catch(function(error) {\n//     // Handle error\n//     console.log('Error:', error);\n//   });\n","import { createBarChart } from \"./barChart\";\n\n\nexport function fetchElectricalEngineering() {\n    \n    const eeCategories = [\"eess.AS\", \"eess.IV\", \"eess.SP\", \"eess.SY\"]; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    eeCategories.forEach(function(category) {\n        const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === eeCategories.length) {\n        createBarChart(eeCategories, totalResults);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n\n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\n\nexport function fetchStatistics() {\n    \n    const statsCategories = ['stat.AP', 'stat.CO', 'stat.ME', 'stat.ML', 'stat.OT', 'stat.TH']; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    statsCategories.forEach(function(category) {\n        const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === statsCategories.length) {\n        createBarChart(statsCategories, totalResults);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n      \n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\nexport function fetchQuantBio() {\n    \n    const qBioCategories = [\n            \"q-bio.BM\",\n            \"q-bio.CB\",\n            \"q-bio.GN\",\n            \"q-bio.MN\",\n            \"q-bio.NC\",\n            \"q-bio.O\",\n            \"q-bio.PE\",\n            \"q-bio.QM\",\n            \"q-bio.SC\",\n            \"q-bio.TO\"]; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    qBioCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n         \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n            \n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === qBioCategories.length) {\n        createBarChart(qBioCategories, totalResults);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n\n\n\n\n\n   \n\n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\nexport function fetchQuantFinance() {\n    \n    const qFinanceCategories = [\"q-fin.CP\",\n            \"q-fin.EC\",\n            \"q-fin.GN\",\n            \"q-fin.MF\",\n            \"q-fin.PM\",\n            \"q-fin.PR\",\n            \"q-fin.RM\",\n            \"q-fin.ST\",\n            \"q-fin.TR\"]; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    qFinanceCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === qFinanceCategories.length) {\n        createBarChart(qFinanceCategories, totalResults);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n\n\n            \n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }"],"names":["createBarChart","categories","totalResults","data","x","y","type","marker","color","line","width","Plotly","newPlot","title","text","font","family","size","xaxis","tickfont","yaxis","plot_bgcolor","paper_bgcolor","document","addEventListener","console","log","getElementById","economicsCategories","forEach","category","fetch","then","response","responseText","totalResultsElement","DOMParser","parseFromString","getElementsByTagName","totalResult","parseInt","textContent","push","length","catch","error","fetchEconomics","mathCategories","fetchMath","csCategories","fetchComputerScience","physicsCategories","fetchPhysics","eeCategories","fetchElectricalEngineering","statsCategories","fetchStatistics","qBioCategories","fetchQuantBio","qFinanceCategories","fetchQuantFinance"],"sourceRoot":""}