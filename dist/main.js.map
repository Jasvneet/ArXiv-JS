{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascript-project/webpack/bootstrap","webpack://javascript-project/./src/index.js","webpack://javascript-project/./src/economics.js","webpack://javascript-project/./src/cs.js","webpack://javascript-project/./src/physics.js","webpack://javascript-project/./src/statistics.js","webpack://javascript-project/./src/quantBio.js"],"sourcesContent":["// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// import searchBar from './src/searchBar.js'\nimport {fetchPhysics} from './physics.js';\nimport {fetchEconomics} from './economics.js';\nimport {fetchMath} from './math.js';\nimport {fetchComputerScience} from './cs.js';\nimport {fetchElectricalEngineering} from './electricalengineering.js';\nimport {fetchStatistics} from './statistics.js';\nimport {fetchQuantBio} from './quantBio.js';\nimport {fetchQuantFinance} from './quantFinance.js';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    console.log(\"its working\");\n\n    document.getElementById('economicsButton').addEventListener('click', function() {\n      fetchEconomics();\n    });\n\n    document.getElementById('mathButton').addEventListener('click', function() {\n      fetchMath();\n    });\n\n    document.getElementById('csButton').addEventListener('click', function() {\n      fetchComputerScience();\n    });\n\n    document.getElementById('physicsButton').addEventListener('click', function() {\n      fetchPhysics();\n    });\n\n    document.getElementById('eeButton').addEventListener('click', function() {\n      fetchElectricalEngineering();\n    });\n\n    document.getElementById('statsButton').addEventListener('click', function() {\n      fetchStatistics();\n    });\n\n    document.getElementById('quantBioButton').addEventListener('click', function() {\n      fetchQuantBio();\n    });\n  \n    document.getElementById('quantFinanceButton').addEventListener('click', function() {\n      fetchQuantFinance();\n    });\n    \n    \n  \n  });\n\n \n\n\n  ","export function fetchEconomics() {\n    \n    const economicsCategories = ['econ.EM', 'econ.GN', 'econ.TH']; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    economicsCategories.forEach(function(category) {\n      const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === economicsCategories.length) {\n        createBarECONChart(economicsCategories, totalResults);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n\nfunction createBarECONChart(categories, totalResults) {\n  \n  const data = [{\n    x: categories,\n    y: totalResults,\n    type: 'bar',\n    marker: {\n      color: 'orange', // Change this color to your desired color\n      line: {\n        color: 'black', // Set the bar border color\n        width: 1 // Set the bar border width\n      }\n    }\n  }];\n  \n  const layout = {\n    title: 'Number of Articles Published per Subcategory',\n    xaxis: {\n      title: {\n        text: 'Subcategory',\n        font: {\n          family: 'Arial, sans-serif', // Change this to your desired font family\n          size: 18, // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      },\n    },\n    yaxis: {\n      title: {\n        text: 'Article Count',\n        font: {\n          family: 'Arial, sans-serif', // Change this to your desired font family\n          size: 18, // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      },\n    },\n    plot_bgcolor: 'white', // Change this color to your desired background color\n    paper_bgcolor: 'skyblue' // Change this color to your desired background color\n  };\n  \n  Plotly.newPlot('econChartContainer', data, layout);\n}         \n// function createBarChart(categories, totalResults) {\n//     const ctx = document.getElementById('econChart').getContext('2d');\n    \n//     new Chart(ctx, {\n//       type: 'bar',\n//       data: {\n//         labels: categories,\n//         datasets: [{\n//           label: 'Total Results',\n//           data: totalResults,\n//           backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//           borderColor: 'rgba(75, 192, 192, 1)',\n//           borderWidth: 1\n//         }]\n//       },\n//       options: {\n//         responsive: true,\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//             title: {\n//               display: true,\n//               text: 'Total Results'\n//             }\n//           },\n//           x: {\n//             title: {\n//               display: true,\n//               text: 'Categories'\n//             }\n//           }\n//         }\n//       }\n//     });\n//   }        \n  \n\n            \n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","export function fetchComputerScience() {\n    \n    const csCategories = ['cs.AI', 'cs.AR', 'cs.CC', 'cs.CE', 'cs.CG',\n        'cs.CL', 'cs.CR', 'cs.CV', 'cs.CY', 'cs.DB',\n        'cs.DC', 'cs.DL', 'cs.DM', 'cs.DS', 'cs.ET',\n        'cs.FL', 'cs.GL', 'cs.GR', 'cs.GT', 'cs.HC',\n        'cs.IR', 'cs.IT', 'cs.LG', 'cs.LO', 'cs.MA',\n        'cs.MM', 'cs.MS', 'cs.NA', 'cs.NE', 'cs.NI',\n        'cs.OH', 'cs.OS', 'cs.PF', 'cs.PL', 'cs.RO',\n        'cs.SC', 'cs.SD', 'cs.SE', 'cs.SI', 'cs.SY']; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    csCategories.forEach(function(category) {\n      const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === csCategories.length) {\n        createBar4Chart(csCategories, totalResults);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n\nfunction createBar4Chart(categories, totalResults) {\n  \n  const data = [{\n    x: categories,\n    y: totalResults,\n    type: 'bar',\n    marker: {\n      color: 'orange', // Change this color to your desired color\n      line: {\n        color: 'black', // Set the bar border color\n        width: 1 // Set the bar border width\n      }\n    }\n  }];\n  \n  const layout = {\n    title: {\n      text: 'Number of Articles Published per Subcategory',\n      font: {\n        family: 'Arial, sans-serif', // Change this to your desired font family\n        size: 18, // Change this to your desired font size\n        color: 'black' // Change this to your desired font color\n      }\n    },\n    xaxis: {\n      title: {\n        text: 'Subcategory',\n        font: {\n          family: 'Arial, sans-serif', // Change this to your desired font family\n          size: 18, // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      },\n    },\n    yaxis: {\n      title: {\n        text: 'Article Count',\n        font: {\n          family: 'Arial, sans-serif', // Change this to your desired font family\n          size: 18, // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      },\n    },\n    plot_bgcolor: 'white', // Change this color to your desired background color\n    paper_bgcolor: 'skyblue' // Change this color to your desired background color\n\n\n  };\n  \n  Plotly.newPlot('econChartContainer', data, layout);\n} \n            \n// function createBarChart(categories, totalResults) {\n//     const ctx = document.getElementById('econChart').getContext('2d');\n    \n//     new Chart(ctx, {\n//       type: 'bar',\n//       data: {\n//         labels: categories,\n//         datasets: [{\n//           label: 'Total Results',\n//           data: totalResults,\n//           backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//           borderColor: 'rgba(75, 192, 192, 1)',\n//           borderWidth: 1\n//         }]\n//       },\n//       options: {\n//         responsive: true,\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//             title: {\n//               display: true,\n//               text: 'Total Results'\n//             }\n//           },\n//           x: {\n//             title: {\n//               display: true,\n//               text: 'Categories'\n//             }\n//           }\n//         }\n//       }\n//     });\n//   }  \n            \n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","\nexport function fetchPhysics() {\n    console.log('Physics')\n    const physicsCategories = ['astro-ph.GA', 'astro-ph.HE', 'astro-ph.IM', 'astro-ph.SR', 'cond-mat.dis-nn', 'cond-mat.mes-hall', 'cond-mat.mtrl-sci', 'cond-mat.other', 'cond-mat.quant-gas', 'cond-mat.soft', 'cond-mat.stat-mech','cond-mat.str-el', 'cond-mat.supr-con', 'gr-qc',  'hep-ex', 'hep-lat', 'hep-ph', 'hep-th', 'math-ph', 'nlin.AO', 'nlin.CD', 'nlin.CG', 'nlin.PS', 'nlin.SI', 'nucl-ex', 'nucl-th', 'physics.acc-ph', 'physics.ao-ph', 'physics.app-ph', 'physics.atm-clus', 'physics.atom-ph', 'physics.bio-ph', 'physics.chem-ph', 'physics.class-ph', 'physics.comp-ph', 'physics.data-an', 'physics.ed-ph', 'physics.flu-dyn', 'physics.gen-ph', 'physics.geo-ph', 'physics.hist-ph', 'physics.ins-det', 'physics.med-ph', 'physics.optics', 'physics.plasm-ph', 'physics.pop-ph', 'physics.soc-ph', 'physics.space-ph', 'quant-ph']; \n\n\n    let totalResults = [];\n    \n    // Fetch total results for each category\n    physicsCategories.forEach(function(category) {\n      const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n\n      \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === physicsCategories.length) {\n        createBarPhysChart(physicsCategories, totalResults);\n        }\n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \nfunction createBarPhysChart(categories, totalResults) {\n  const data = [{\n    x: categories,\n    y: totalResults,\n    type: 'bar',\n    marker: {\n      color: 'orange', // Change this color to your desired color\n      line: {\n        color: 'black', // Set the bar border color\n        width: 1 // Set the bar border width\n      }\n    }\n  }];\n  \n  const layout = {\n    title: {\n      text: 'Number of Articles Published per Subcategory',\n      font: {\n        family: 'Arial, sans-serif', // Change this to your desired font family\n        size: 18, // Change this to your desired font size\n        color: 'black' // Change this to your desired font color\n      }\n    },\n    xaxis: {\n      title: {\n        text: 'Subcategory',\n        font: {\n          family: 'Arial, sans-serif', // Change this to your desired font family\n          size: 18, // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      },\n    },\n    yaxis: {\n      title: {\n        text: 'Article Count',\n        font: {\n          family: 'Arial, sans-serif', // Change this to your desired font family\n          size: 18, // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      },\n    },\n    plot_bgcolor: 'white', // Change this color to your desired background color\n    paper_bgcolor: 'skyblue' // Change this color to your desired background color\n\n\n  };\n  \n  Plotly.newPlot('econChartContainer', data, layout);\n \n}  \n  //   const ctx = document.getElementById('econChart').getContext('2d');\n    \n  //   new Chart(ctx, {\n  //     type: 'bar',\n  //     data: {\n  //       labels: categories,\n  //       datasets: [{\n  //         label: 'Total Results',\n  //         data: totalResults,\n  //         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n  //         borderColor: 'rgba(75, 192, 192, 1)',\n  //         borderWidth: 1\n  //       }]\n  //     },\n  //     options: {\n  //       responsive: true,\n  //       scales: {\n  //         y: {\n  //           beginAtZero: true,\n  //           title: {\n  //             display: true,\n  //             text: 'Total Results'\n  //           }\n  //         },\n  //         x: {\n  //           title: {\n  //             display: true,\n  //             text: 'Categories'\n  //           }\n  //         }\n  //       }\n  //     }\n  //   });\n  // }         \n\n\n\n\n\n\n\n\n\n\n\n\n\n// totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 20000);\n// }\n\n\n// for visualizations \n\n\n\n\n\n\n//   \n// fetch('https://export.arxiv.org/api/query?search_query=cat:physics.acc-ph')\n//   .then(function(response) {\n//     return response.text();\n//   })\n//   .then(function(responseText) {\n//     // Parse the XML response\n//     const parser = new DOMParser();\n//     const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n    \n//     // Extract the total results\n//     const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n//     const totalResults = totalResultsElement.textContent;\n    \n//     // Handle successful response\n//     console.log('Total Results:', totalResults);\n//   })\n//   .catch(function(error) {\n//     // Handle error\n//     console.log('Error:', error);\n//   });\n","export function fetchStatistics() {\n    \n    const statsCategories = ['stat.AP', 'stat.CO', 'stat.ME', 'stat.ML', 'stat.OT', 'stat.TH']; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    statsCategories.forEach(function(category) {\n        const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === statsCategories.length) {\n        createStatsBarChart(statsCategories, totalResults);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \nfunction createStatsBarChart(categories, totalResults) {\n  const data = [{\n    x: categories,\n    y: totalResults,\n    type: 'bar',\n    marker: {\n      color: 'orange', // Change this color to your desired color\n      line: {\n        color: 'black', // Set the bar border color\n        width: 1 // Set the bar border width\n      }\n    }\n  }];\n  \n  const layout = {\n    title: {\n      text: 'Number of Articles Published per Subcategory',\n      font: {\n        family: 'Arial, sans-serif', // Change this to your desired font family\n        size: 18, // Change this to your desired font size\n        color: 'black' // Change this to your desired font color\n      }\n    },\n    xaxis: {\n      title: {\n        text: 'Subcategory',\n        font: {\n          family: 'Arial, sans-serif', // Change this to your desired font family\n          size: 18, // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      },\n    },\n    yaxis: {\n      title: {\n        text: 'Article Count',\n        font: {\n          family: 'Arial, sans-serif', // Change this to your desired font family\n          size: 18, // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      },\n    },\n    plot_bgcolor: 'white', // Change this color to your desired background color\n    paper_bgcolor: 'skyblue' // Change this color to your desired background color\n\n\n  };\n  \n  Plotly.newPlot('econChartContainer', data, layout);\n  \n}  \n  //   const ctx = document.getElementById('econChart').getContext('2d');\n    \n  //   new Chart(ctx, {\n  //     type: 'bar',\n  //     data: {\n  //       labels: categories,\n  //       datasets: [{\n  //         label: 'Total Results',\n  //         data: totalResults,\n  //         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n  //         borderColor: 'rgba(75, 192, 192, 1)',\n  //         borderWidth: 1\n  //       }]\n  //     },\n  //     options: {\n  //       responsive: true,\n  //       scales: {\n  //         y: {\n  //           beginAtZero: true,\n  //           title: {\n  //             display: true,\n  //             text: 'Total Results'\n  //           }\n  //         },\n  //         x: {\n  //           title: {\n  //             display: true,\n  //             text: 'Categories'\n  //           }\n  //         }\n  //       }\n  //     }\n  //   });\n  // }  \n            \n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","export function fetchQuantBio() {\n    \n    const qBioCategories = categories = [\n            \"q-bio.BM\",\n            \"q-bio.CB\",\n            \"q-bio.GN\",\n            \"q-bio.MN\",\n            \"q-bio.NC\",\n            \"q-bio.O\",\n            \"q-bio.PE\",\n            \"q-bio.QM\",\n            \"q-bio.SC\",\n            \"q-bio.TO\"]; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    qBioCategories.forEach(function(category) {\n      const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n         \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n            \n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === qBioCategories.length) {\n        createBarQBChart(qBioCategories, totalResults);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \nfunction createBarQBChart(categories, totalResults) {\n  const data = [{\n    x: categories,\n    y: totalResults,\n    type: 'bar',\n    marker: {\n      color: 'orange', // Change this color to your desired color\n      line: {\n        color: 'black', // Set the bar border color\n        width: 1 // Set the bar border width\n      }\n    }\n  }];\n  \n  const layout = {\n    title: {\n      text: 'Number of Articles Published per Subcategory',\n      font: {\n        family: 'Arial, sans-serif', // Change this to your desired font family\n        size: 18, // Change this to your desired font size\n        color: 'black' // Change this to your desired font color\n      }\n    },\n    xaxis: {\n      title: {\n        text: 'Subcategory',\n        font: {\n          family: 'Arial, sans-serif', // Change this to your desired font family\n          size: 18, // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      },\n    },\n    yaxis: {\n      title: {\n        text: 'Article Count',\n        font: {\n          family: 'Arial, sans-serif', // Change this to your desired font family\n          size: 18, // Change this to your desired font size\n          color: 'black' // Change this to your desired font color\n        }\n      },\n    },\n    plot_bgcolor: 'white', // Change this color to your desired background color\n    paper_bgcolor: 'skyblue' // Change this color to your desired background color\n\n\n  };\n  \n  Plotly.newPlot('econChartContainer', data, layout);\n  \n}  \n\n\n\n\n\n  //   const ctx = document.getElementById('econChart').getContext('2d');\n    \n  //   new Chart(ctx, {\n  //     type: 'bar',\n  //     data: {\n  //       labels: categories,\n  //       datasets: [{\n  //         label: 'Total Results',\n  //         data: totalResults,\n  //         backgroundColor: 'rgba(75, 192, 192, 0.6)',\n  //         borderColor: 'rgba(75, 192, 192, 1)',\n  //         borderWidth: 1\n  //       }]\n  //     },\n  //     options: {\n  //       responsive: true,\n  //       scales: {\n  //         y: {\n  //           beginAtZero: true,\n  //           title: {\n  //             display: true,\n  //             text: 'Total Results'\n  //           }\n  //         },\n  //         x: {\n  //           title: {\n  //             display: true,\n  //             text: 'Categories'\n  //           }\n  //         }\n  //       }\n  //     }\n  //   });\n  // }        \n\n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }"],"names":["__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","document","addEventListener","console","log","getElementById","economicsCategories","totalResults","forEach","category","fetch","then","response","text","responseText","totalResultsElement","DOMParser","parseFromString","getElementsByTagName","totalResult","parseInt","textContent","push","length","categories","data","x","y","type","marker","color","line","width","Plotly","newPlot","title","xaxis","font","family","size","yaxis","plot_bgcolor","paper_bgcolor","createBarECONChart","catch","error","fetchEconomics","fetchMath","csCategories","createBar4Chart","fetchComputerScience","physicsCategories","createBarPhysChart","fetchPhysics","fetchElectricalEngineering","statsCategories","createStatsBarChart","fetchStatistics","qBioCategories","createBarQBChart","fetchQuantBio","fetchQuantFinance"],"sourceRoot":""}