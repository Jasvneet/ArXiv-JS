{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascript-project/./src/barChart.js","webpack://javascript-project/./src/searchBar.js","webpack://javascript-project/./src/authors.js","webpack://javascript-project/./src/index.js","webpack://javascript-project/./src/economics.js","webpack://javascript-project/./src/math.js","webpack://javascript-project/./src/cs.js","webpack://javascript-project/./src/physics.js","webpack://javascript-project/./src/electricalengineering.js","webpack://javascript-project/./src/statistics.js","webpack://javascript-project/./src/quantBio.js","webpack://javascript-project/./src/quantFinance.js"],"sourcesContent":["export function createBarChart(categories, totalResults, totalArticleCount) {\n  \n    const data = [{\n      x: categories,\n      y: totalResults,\n      type: 'bar',\n      marker: {\n        color: 'rgb(9, 238, 253)', // Change this color to your desired color\n        line: {\n          color: 'black', // Set the bar border color\n          width: 1 // Set the bar border width\n        }\n      }\n    }];\n    \n    const layout = {\n      title: {\n        text: 'Number of Articles Published per Subcategory',\n        font: {\n          family: 'Arial, sans-serif', // Change this to your desired font family\n          size: 18, // Change this to your desired font size\n          color: 'white' // Change this to your desired font color\n        }\n      },\n      xaxis: {\n        title: {\n          text: 'Subcategory',\n          font: {\n            family: 'Arial, sans-serif', // Change this to your desired font family\n            size: 18, // Change this to your desired font size\n            color: 'white' // Change this to your desired font color\n          }\n        },\n        tickfont: {\n          color: 'white'\n        },\n      },\n      yaxis: {\n        title: {\n          text: 'Article Count',\n          font: {\n            family: 'Arial, sans-serif', // Change this to your desired font family\n            size: 18, // Change this to your desired font size\n            color: 'white' // Change this to your desired font color\n          }\n        },\n        tickfont: {\n          color: 'white'\n        },\n      },\n      plot_bgcolor: 'rgb(38, 48, 90)', // Change this color to your desired background color\n      paper_bgcolor: 'rgb(38, 48, 90)' // Change this color to your desired background color\n    };\n    const chartContainer = document.getElementById('chartContainer');\n    chartContainer.innerHTML = '';\n\n    // Create div for total article count\n    const totalArticleCountDiv = document.getElementById('total-article-count');\n    totalArticleCountDiv.innerHTML = '';\n    const totalArticleCountButton = document.createElement('button');\n    totalArticleCountButton.textContent = `Category Total: ${totalArticleCount} articles`;\n    totalArticleCountButton.classList.add('total-article-count-button');\n\n// Append total article count button to the chart container\n  totalArticleCountDiv .appendChild(totalArticleCountButton);\n\n    \n\n    Plotly.newPlot('chartContainer', data, layout);\n    \n  }         ","import { displayAuthorStats } from \"./authors\";\n\nexport function handleSubmit(event) {\n  event.preventDefault(); // Prevent the form from submitting\n\n  const searchTerm = document.getElementById('search-input').value;\n  const max = 10 // Get the search term\n\n  // Send a request to the arXiv API\n  fetch(`https://export.arxiv.org/api/query?search_query=ti:${searchTerm}&sortBy=submittedDate&sortOrder=descending&max_results=${max}`, {\n    method: 'GET'\n  })\n    .then(response => response.text())\n    .then(data => {\n      // Process the response data\n      const parser = new DOMParser();\n      const xmlDoc1 = parser.parseFromString(data, 'text/xml');\n      const totalResultsElement = xmlDoc1.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      const resultsDiv = document.getElementById('results');\n      resultsDiv.innerHTML = ''; // Clear previous results\n\n      const totalResultsEle = document.createElement('h3');\n      totalResultsEle.textContent = ` Showing only most recent of total: ${totalResult}  articles`;\n      resultsDiv.appendChild(totalResultsEle);\n\n      const entries = xmlDoc1.getElementsByTagName('entry');\n      \n      function displayArticleDetails(authors, summary) {\n        const articleDetailsContainer = document.createElement('div');\n        articleDetailsContainer.classList.add('article-details-container');\n      \n        const authorsList = document.createElement('ul');\n        authorsList.classList.add('authors-list');\n        authors.forEach(author => {\n          const authorItem = document.createElement('li');\n          const authorButton = document.createElement('button');\n          authorButton.classList.add('author-button');\n\n          authorButton.textContent = author;\n          authorButton.addEventListener('click', () => displayAuthorStats(author));\n      \n          authorItem.appendChild(authorButton);\n          authorsList.appendChild(authorItem);\n        });\n      \n        const summaryHeading = document.createElement('h4');\n        summaryHeading.textContent = 'Abstract:';\n\n        const summaryElement = document.createElement('p');\n        summaryElement.classList.add('summary')\n        summaryElement.textContent = summary;\n\n        const authorsHeading = document.createElement('h2');\n        authorsHeading.classList.add('authors-heading')\n\n        authorsHeading.textContent = 'Authors';\n       \n      \n        \n        articleDetailsContainer.appendChild(summaryHeading);\n        articleDetailsContainer.appendChild(summaryElement);\n        articleDetailsContainer.appendChild(authorsHeading);\n        articleDetailsContainer.appendChild(authorsList);\n      \n        // Clear previous article details\n        const existingArticleDetailsContainer = document.querySelector('.article-details-container');\n        if (existingArticleDetailsContainer) {\n          existingArticleDetailsContainer.remove();\n        }\n      \n        const resultsDiv = document.getElementById('results');\n        resultsDiv.appendChild(articleDetailsContainer);\n      }\n\n     \n\n     \n\n      const articlesList = document.createElement('ul');\n      articlesList.classList.add('articles-list');\n\n      const authorsListContainer = document.createElement('div');\n      authorsListContainer.classList.add('authors-list-container');\n\n      \n\n      for (let i = 0; i < entries.length; i++) {\n        const title = entries[i].getElementsByTagName('title')[0].textContent;\n        const authors = Array.from(entries[i].getElementsByTagName('author')).map(author => author.getElementsByTagName('name')[0].textContent);\n        const summary = entries[i].getElementsByTagName('summary')[0].textContent;\n      \n        const articleTitleItem = document.createElement('li');\n        const articleTitleButton = document.createElement('button');\n        articleTitleButton.classList.add('article-button');\n\n        articleTitleButton.textContent = title;\n        articleTitleButton.addEventListener('click', () => displayArticleDetails(authors, summary));\n      \n        articleTitleItem.appendChild(articleTitleButton);\n        articlesList.appendChild(articleTitleItem);\n      }\n      \n      resultsDiv.appendChild(articlesList);\n      resultsDiv.appendChild(authorsListContainer);\n      \n    })\n    .catch(error => {\n      console.error('Error:', error);\n    });\n    \n    \n    \n}\n\n// for (let i = 0; i < entries.length; i++) {\n  //   const title = entries[i].getElementsByTagName('title')[0].textContent;\n  //   const authors = Array.from(entries[i].getElementsByTagName('author')).map(author => author.getElementsByTagName('name')[0].textContent);\n\n\n  //   const articleTitleItem = document.createElement('li');\n  //   const articleTitleButton = document.createElement('button');\n  //   articleTitleButton.textContent = title;\n  //   articleTitleButton.addEventListener('click', () => displayAuthors(authors, articleTitleItem));\n\n  //   articleTitleItem.appendChild(articleTitleButton);\n  //   articlesList.appendChild(articleTitleItem);\n    \n  // }\n\n\n\n    \n    // function displayAuthors(authors, container) {\n      //   container.innerHTML = ''; // Clear previous authors\n\n      //   const authorsList = document.createElement('ul');\n      //   authors.forEach(author => {\n      //     const authorItem = document.createElement('li');\n      //     authorItem.textContent = author;\n      //     authorsList.appendChild(authorItem);\n      //   });\n    \n // function displayAuthors(authors, container) {\n      //   container.innerHTML = ''; // Clear previous authors\n  \n      //   const authorsList = document.createElement('ul');\n      //   authorsList.classList.add('authors-list');\n      //   authors.forEach(author => {\n      //     const authorItem = document.createElement('li');\n      //     const authorButton = document.createElement('button');\n      //     authorButton.textContent = author;\n      //     authorButton.addEventListener('click', () => displayAuthorStats(author));\n  \n      //     authorItem.appendChild(authorButton);\n      //     authorsList.appendChild(authorItem);\n      //   });\n  \n      //   container.appendChild(authorsList);\n      // }\n      ","\n\nexport function displayAuthorStats(author) {\n  const heatmapContainer = document.getElementById('heatmapContainer');\n  heatmapContainer.innerHTML = ''; // Clear previous article details\n\n\n  const loadingIndicator = document.createElement('div');\n  loadingIndicator.classList.add('loading-indicator')\n  loadingIndicator.textContent = 'Loading Data...';\n  heatmapContainer.appendChild(loadingIndicator);\n\n  fetch(`https://export.arxiv.org/api/query?search_query=au:${author}&max_results=2000`, {\n    method: 'GET'\n  })\n    .then(response => response.text())\n    .then(data => {\n      // Process the response data\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(data, 'text/xml');\n      const entries = xmlDoc.getElementsByTagName('entry');\n      const publishedYears = Array.from(entries).map(entry => {\n        const publishedDate = entry.getElementsByTagName('published')[0].textContent;\n        return new Date(publishedDate).getFullYear();\n      });\n\n      const yearsCount = {};\n      publishedYears.forEach(year => {\n        yearsCount[year] = (yearsCount[year] || 0) + 1;\n      });\n\n      const years = Object.keys(yearsCount);\n      const counts = Object.values(yearsCount);\n\n      // Prepare data for the heatmap\n      const data1 = [\n        {\n          x: years,\n          y: [''],\n          z: [counts],\n          type: 'heatmap',\n          colorscale: 'Viridis',\n          showscale: true,\n          hovertemplate: `<b>Year: %{x}</b><br>Author: ${author}<br>Articles: %{z}`,\n          colorbar: {\n            tickfont: {\n              color: 'white' // Change the color of the numbers on the gradient scale here\n            }\n          }\n        }\n      ];\n\n      // Define layout options for the heatmap\n      const layout = {\n        title: {\n          text: `# of ${author}'s Publications over the Past Years`,\n          font: {\n            family: 'Arial, sans-serif', // Change this to your desired font family\n            size: 18, // Change this to your desired font size\n            color: 'white' // Change this to your desired font color\n          }\n        },\n        xaxis: {\n          title: {\n            text: 'Year',\n            font: {\n              family: 'Arial, sans-serif', // Change this to your desired font family\n              size: 18, // Change this to your desired font size\n              color: 'white' // Change this to your desired font color\n            }\n          },\n          tickfont: {\n            color: 'white'\n          },\n        },\n        yaxis: {\n          title: {\n            text: `${author}`,\n            font: {\n              family: 'Arial, sans-serif', // Change this to your desired font family\n              size: 18, // Change this to your desired font size\n              color: 'white' // Change this to your desired font color\n            }\n          },\n          tickfont: {\n            color: 'white'\n          },\n        },\n        plot_bgcolor: 'rgb(38, 48, 90)',// Change this color to your desired background color\n        paper_bgcolor: 'rgb(38, 48, 90)'\n      };\n\n      heatmapContainer.removeChild(loadingIndicator);\n\n      // Plot the heatmap using Plotly\n      Plotly.newPlot('heatmapContainer', data1, layout);\n      \n    })\n    .catch(error => {\n      console.error('Error:', error);\n      loadingIndicator.remove();\n    });\n}","// import searchBar from './src/searchBar.js'\nimport {fetchPhysics} from './physics.js';\nimport {fetchEconomics} from './economics.js';\nimport {fetchMath} from './math.js';\nimport {fetchComputerScience} from './cs.js';\nimport {fetchElectricalEngineering} from './electricalengineering.js';\nimport {fetchStatistics} from './statistics.js';\nimport {fetchQuantBio} from './quantBio.js';\nimport {fetchQuantFinance} from './quantFinance.js';\nimport { handleSubmit } from './searchBar.js';\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    console.log(\"its working\");\n\n    document.getElementById('economicsButton').addEventListener('click', function() {\n      \n      fetchEconomics();\n    });\n\n    document.getElementById('mathButton').addEventListener('click', function() {\n      \n      fetchMath();\n    });\n\n    document.getElementById('csButton').addEventListener('click', function() {\n      fetchComputerScience();\n    });\n\n    document.getElementById('physicsButton').addEventListener('click', function() {\n      fetchPhysics();\n    });\n\n    document.getElementById('eeButton').addEventListener('click', function() {\n      fetchElectricalEngineering();\n    });\n\n    document.getElementById('statsButton').addEventListener('click', function() {\n      fetchStatistics();\n    });\n\n    document.getElementById('quantBioButton').addEventListener('click', function() {\n      fetchQuantBio();\n    });\n  \n    document.getElementById('quantFinanceButton').addEventListener('click', function() {\n      fetchQuantFinance();\n    });\n\n\n    document.getElementById('search-button').addEventListener('submit', function() {\n      handleSubmit();\n    });\n\n    \n    init(); \n  \n    \n  \n  });\n\n  function init() {\n    // Add event listener to the form\n    const form = document.getElementById('search-form');\n    form.addEventListener('submit', handleSubmit);\n  \n    // Add event listener to the search button\n    const searchButton = document.getElementById('search-button');\n    searchButton.addEventListener('click', handleSubmit);\n  }\n\n \n\n\n  ","import { createBarChart } from \"./barChart\";\n\nexport function fetchEconomics() {\n    \n    const economicsCategories = ['econ.EM', 'econ.GN', 'econ.TH']; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    economicsCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === economicsCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            createBarChart(economicsCategories, totalResults, totalArticleCount);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n\n    \n\n\n\n// function createBarChart(categories, totalResults) {\n//     const ctx = document.getElementById('econChart').getContext('2d');\n    \n//     new Chart(ctx, {\n//       type: 'bar',\n//       data: {\n//         labels: categories,\n//         datasets: [{\n//           label: 'Total Results',\n//           data: totalResults,\n//           backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//           borderColor: 'rgba(75, 192, 192, 1)',\n//           borderWidth: 1\n//         }]\n//       },\n//       options: {\n//         responsive: true,\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//             title: {\n//               display: true,\n//               text: 'Total Results'\n//             }\n//           },\n//           x: {\n//             title: {\n//               display: true,\n//               text: 'Categories'\n//             }\n//           }\n//         }\n//       }\n//     });\n//   }        \n  \n\n            \n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\nexport function fetchMath() {\n    \n    const mathCategories = [\"math.AC\",\n            \"math.AG\",\n            \"math.AP\",\n            \"math.AT\",\n            \"math.CA\",\n            \"math.CO\",\n            \"math.CT\",\n            \"math.CV\",\n            \"math.DG\",\n            \"math.DS\",\n            \"math.FA\",\n            \"math.GM\",\n            \"math.GN\",\n            \"math.GR\",\n            \"math.GT\",\n            \"math.H\",\n            \"math.IT\",\n            \"math.KT\",\n            \"math.LO\",\n            \"math.MG\",\n            \"math.MP\",\n            \"math.NA\",\n            \"math.NT\",\n            \"math.OA\",\n            \"math.OC\",\n            \"math.PR\",\n            \"math.QA\",\n            \"math.RA\",\n            \"math.RT\",\n            \"math.S\",\n            \"math.SP\",\n            \"math.ST\"]; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    mathCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n      \n      \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === mathCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            createBarChart(mathCategories, totalResults, totalArticleCount);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n\n            \n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\n\nexport function fetchComputerScience() {\n    \n    const csCategories = ['cs.AI', 'cs.AR', 'cs.CC', 'cs.CE', 'cs.CG',\n        'cs.CL', 'cs.CR', 'cs.CV', 'cs.CY', 'cs.DB',\n        'cs.DC', 'cs.DL', 'cs.DM', 'cs.DS', 'cs.ET',\n        'cs.FL', 'cs.GL', 'cs.GR', 'cs.GT', 'cs.HC',\n        'cs.IR', 'cs.IT', 'cs.LG', 'cs.LO', 'cs.MA',\n        'cs.MM', 'cs.MS', 'cs.NA', 'cs.NE', 'cs.NI',\n        'cs.OH', 'cs.OS', 'cs.PF', 'cs.PL', 'cs.RO',\n        'cs.SC', 'cs.SD', 'cs.SE', 'cs.SI', 'cs.SY']; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    csCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === csCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            createBarChart(csCategories, totalResults, totalArticleCount);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n\n\n            \n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\nexport function fetchPhysics() {\n    console.log('Physics')\n    const physicsCategories = ['astro-ph.GA', 'astro-ph.HE', 'astro-ph.IM', 'astro-ph.SR', 'cond-mat.dis-nn', 'cond-mat.mes-hall', 'cond-mat.mtrl-sci', 'cond-mat.other', 'cond-mat.quant-gas', 'cond-mat.soft', 'cond-mat.stat-mech','cond-mat.str-el', 'cond-mat.supr-con', 'gr-qc',  'hep-ex', 'hep-lat', 'hep-ph', 'hep-th', 'math-ph', 'nlin.AO', 'nlin.CD', 'nlin.CG', 'nlin.PS', 'nlin.SI', 'nucl-ex', 'nucl-th', 'physics.acc-ph', 'physics.ao-ph', 'physics.app-ph', 'physics.atm-clus', 'physics.atom-ph', 'physics.bio-ph', 'physics.chem-ph', 'physics.class-ph', 'physics.comp-ph', 'physics.data-an', 'physics.ed-ph', 'physics.flu-dyn', 'physics.gen-ph', 'physics.geo-ph', 'physics.hist-ph', 'physics.ins-det', 'physics.med-ph', 'physics.optics', 'physics.plasm-ph', 'physics.pop-ph', 'physics.soc-ph', 'physics.space-ph', 'quant-ph']; \n\n\n    let totalResults = [];\n    \n    // Fetch total results for each category\n    physicsCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n\n      \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === physicsCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            createBarChart(physicsCategories, totalResults, totalArticleCount);\n        }\n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n// totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 20000);\n// }\n\n\n// for visualizations \n\n\n\n\n\n\n//   \n// fetch('https://export.arxiv.org/api/query?search_query=cat:physics.acc-ph')\n//   .then(function(response) {\n//     return response.text();\n//   })\n//   .then(function(responseText) {\n//     // Parse the XML response\n//     const parser = new DOMParser();\n//     const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n    \n//     // Extract the total results\n//     const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n//     const totalResults = totalResultsElement.textContent;\n    \n//     // Handle successful response\n//     console.log('Total Results:', totalResults);\n//   })\n//   .catch(function(error) {\n//     // Handle error\n//     console.log('Error:', error);\n//   });\n","import { createBarChart } from \"./barChart\";\n\n\nexport function fetchElectricalEngineering() {\n    \n    const eeCategories = [\"eess.AS\", \"eess.IV\", \"eess.SP\", \"eess.SY\"]; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    eeCategories.forEach(function(category) {\n        const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === eeCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            createBarChart(eeCategories, totalResults, totalArticleCount);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n\n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\n\nexport function fetchStatistics() {\n    \n    const statsCategories = ['stat.AP', 'stat.CO', 'stat.ME', 'stat.ML', 'stat.OT', 'stat.TH']; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    statsCategories.forEach(function(category) {\n        const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === statsCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            createBarChart(statsCategories, totalResults, totalArticleCount);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n      \n","import { createBarChart } from \"./barChart\";\n\nexport function fetchQuantBio() {\n    \n    const qBioCategories = [\n            \"q-bio.BM\",\n            \"q-bio.CB\",\n            \"q-bio.GN\",\n            \"q-bio.MN\",\n            \"q-bio.NC\",\n            \"q-bio.O\",\n            \"q-bio.PE\",\n            \"q-bio.QM\",\n            \"q-bio.SC\",\n            \"q-bio.TO\"]; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    qBioCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n         \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n            \n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === qBioCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            createBarChart(qBioCategories, totalResults, totalArticleCount);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n\n\n\n\n\n   \n\n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\nexport function fetchQuantFinance() {\n    \n    const qFinanceCategories = [\"q-fin.CP\",\n            \"q-fin.EC\",\n            \"q-fin.GN\",\n            \"q-fin.MF\",\n            \"q-fin.PM\",\n            \"q-fin.PR\",\n            \"q-fin.RM\",\n            \"q-fin.ST\",\n            \"q-fin.TR\"]; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    qFinanceCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === qFinanceCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            createBarChart(qFinanceCategories, totalResults, totalArticleCount);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n\n\n            \n"],"names":["createBarChart","categories","totalResults","totalArticleCount","data","x","y","type","marker","color","line","width","document","getElementById","innerHTML","totalArticleCountDiv","totalArticleCountButton","createElement","textContent","classList","add","appendChild","Plotly","newPlot","title","text","font","family","size","xaxis","tickfont","yaxis","plot_bgcolor","paper_bgcolor","handleSubmit","event","preventDefault","searchTerm","value","fetch","method","then","response","xmlDoc1","DOMParser","parseFromString","totalResultsElement","getElementsByTagName","totalResult","parseInt","resultsDiv","totalResultsEle","entries","displayArticleDetails","authors","summary","articleDetailsContainer","authorsList","forEach","author","authorItem","authorButton","addEventListener","heatmapContainer","loadingIndicator","publishedYears","Array","from","map","entry","publishedDate","Date","getFullYear","yearsCount","year","data1","Object","keys","z","values","colorscale","showscale","hovertemplate","colorbar","layout","removeChild","catch","error","console","remove","displayAuthorStats","summaryHeading","summaryElement","authorsHeading","existingArticleDetailsContainer","querySelector","articlesList","authorsListContainer","i","length","articleTitleItem","articleTitleButton","log","economicsCategories","category","responseText","push","reduce","acc","curr","fetchEconomics","mathCategories","fetchMath","csCategories","fetchComputerScience","physicsCategories","fetchPhysics","eeCategories","fetchElectricalEngineering","statsCategories","fetchStatistics","qBioCategories","fetchQuantBio","qFinanceCategories","fetchQuantFinance"],"sourceRoot":""}