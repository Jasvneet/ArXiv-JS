{"version":3,"file":"main.js","mappings":"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","sources":["webpack://javascript-project/./src/barChart.js","webpack://javascript-project/./src/searchBar.js","webpack://javascript-project/./src/authors.js","webpack://javascript-project/./src/index.js","webpack://javascript-project/./src/economics.js","webpack://javascript-project/./src/math.js","webpack://javascript-project/./src/cs.js","webpack://javascript-project/./src/physics.js","webpack://javascript-project/./src/electricalengineering.js","webpack://javascript-project/./src/statistics.js","webpack://javascript-project/./src/quantBio.js","webpack://javascript-project/./src/quantFinance.js"],"sourcesContent":["export function createBarChart(categories, totalResults, totalArticleCount, fullCategoryNames) {\n  \n    const data = [{\n      x: categories,\n      y: totalResults,\n      type: 'bar',\n      marker: {\n        color: 'rgb(9, 238, 253)', // Change this color to your desired color\n        line: {\n          color: 'black', // Set the bar border color\n          width: 1 // Set the bar border width\n        }\n      }, \n      text: fullCategoryNames, // Display full category names inside the bar\n      hovertemplate: '%{text}<br>Article Count: %{y}',\n      \n    }];\n    \n    const layout = {\n      title: {\n        text: 'Number of Articles Published per Subcategory',\n        font: {\n          family: 'Arial, sans-serif', // Change this to your desired font family\n          size: 18, // Change this to your desired font size\n          color: 'white' // Change this to your desired font color\n        }\n      },\n      xaxis: {\n        title: {\n          text: 'Subcategory',\n          font: {\n            family: 'Arial, sans-serif', // Change this to your desired font family\n            size: 18, // Change this to your desired font size\n            color: 'white' // Change this to your desired font color\n          }\n        },\n        tickfont: {\n          color: 'white'\n        },\n      },\n      yaxis: {\n        title: {\n          text: 'Article Count',\n          font: {\n            family: 'Arial, sans-serif', // Change this to your desired font family\n            size: 18, // Change this to your desired font size\n            color: 'white' // Change this to your desired font color\n          }\n        },\n        tickfont: {\n          color: 'white'\n        },\n      },\n      plot_bgcolor: 'rgb(38, 48, 90)', // Change this color to your desired background color\n      paper_bgcolor: 'rgb(38, 48, 90)' // Change this color to your desired background color\n    };\n    const chartContainer = document.getElementById('chartContainer');\n    chartContainer.innerHTML = '';\n\n    // Create div for total article count\n    const totalArticleCountDiv = document.getElementById('total-article-count');\n    totalArticleCountDiv.innerHTML = '';\n    const totalArticleCountButton = document.createElement('button');\n    totalArticleCountButton.textContent = `Category Total: ${totalArticleCount} articles`;\n    totalArticleCountButton.classList.add('total-article-count-button');\n\n// Append total article count button to the chart container\n  totalArticleCountDiv .appendChild(totalArticleCountButton);\n\n    \n\n    Plotly.newPlot('chartContainer', data, layout);\n    \n  }         ","import { displayAuthorStats } from \"./authors\";\n\nexport function handleSubmit(event) {\n  event.preventDefault(); // Prevent the form from submitting\n\n  const searchTerm = document.getElementById('search-input').value;\n  const max = 10 // Get the search term\n\n  // Send a request to the arXiv API\n  fetch(`https://export.arxiv.org/api/query?search_query=ti:${searchTerm}&sortBy=submittedDate&sortOrder=descending&max_results=${max}`, {\n    method: 'GET'\n  })\n    .then(response => response.text())\n    .then(data => {\n      // Process the response data\n      const parser = new DOMParser();\n      const xmlDoc1 = parser.parseFromString(data, 'text/xml');\n      const totalResultsElement = xmlDoc1.getElementsByTagName('opensearch:totalResults')[0];\n      const totalResult = parseInt(totalResultsElement.textContent);\n      const resultsDiv = document.getElementById('results');\n      resultsDiv.innerHTML = ''; // Clear previous results\n\n      const totalResultsEle = document.createElement('h3');\n      totalResultsEle.textContent = ` Showing only most recent of total: ${totalResult}  articles`;\n      resultsDiv.appendChild(totalResultsEle);\n\n      const entries = xmlDoc1.getElementsByTagName('entry');\n      \n      function displayArticleDetails(authors, summary) {\n        const articleDetailsContainer = document.createElement('div');\n        articleDetailsContainer.classList.add('article-details-container');\n      \n        const authorsList = document.createElement('ul');\n        authorsList.classList.add('authors-list');\n        authors.forEach(author => {\n          const authorItem = document.createElement('li');\n          const authorButton = document.createElement('button');\n          authorButton.classList.add('author-button');\n\n          authorButton.textContent = author;\n          authorButton.addEventListener('click', () => displayAuthorStats(author));\n      \n          authorItem.appendChild(authorButton);\n          authorsList.appendChild(authorItem);\n        });\n      \n        const summaryHeading = document.createElement('h4');\n        summaryHeading.textContent = 'Abstract:';\n\n        const summaryElement = document.createElement('p');\n        summaryElement.classList.add('summary')\n        summaryElement.textContent = summary;\n\n        const authorsHeading = document.createElement('h2');\n        authorsHeading.classList.add('authors-heading')\n\n        authorsHeading.textContent = 'Authors';\n       \n      \n        \n        articleDetailsContainer.appendChild(summaryHeading);\n        articleDetailsContainer.appendChild(summaryElement);\n        articleDetailsContainer.appendChild(authorsHeading);\n        articleDetailsContainer.appendChild(authorsList);\n      \n        // Clear previous article details\n        const existingArticleDetailsContainer = document.querySelector('.article-details-container');\n        if (existingArticleDetailsContainer) {\n          existingArticleDetailsContainer.remove();\n        }\n      \n        const resultsDiv = document.getElementById('results');\n        resultsDiv.appendChild(articleDetailsContainer);\n      }\n\n     \n\n     \n\n      const articlesList = document.createElement('ul');\n      articlesList.classList.add('articles-list');\n\n      const authorsListContainer = document.createElement('div');\n      authorsListContainer.classList.add('authors-list-container');\n\n      \n\n      for (let i = 0; i < entries.length; i++) {\n        const title = entries[i].getElementsByTagName('title')[0].textContent;\n        const authors = Array.from(entries[i].getElementsByTagName('author')).map(author => author.getElementsByTagName('name')[0].textContent);\n        const summary = entries[i].getElementsByTagName('summary')[0].textContent;\n      \n        const articleTitleItem = document.createElement('li');\n        const articleTitleButton = document.createElement('button');\n        articleTitleButton.classList.add('article-button');\n\n        articleTitleButton.textContent = title;\n        articleTitleButton.addEventListener('click', () => displayArticleDetails(authors, summary));\n      \n        articleTitleItem.appendChild(articleTitleButton);\n        articlesList.appendChild(articleTitleItem);\n      }\n      \n      resultsDiv.appendChild(articlesList);\n      resultsDiv.appendChild(authorsListContainer);\n      \n    })\n    .catch(error => {\n      console.error('Error:', error);\n    });\n    \n    \n    \n}\n\n// for (let i = 0; i < entries.length; i++) {\n  //   const title = entries[i].getElementsByTagName('title')[0].textContent;\n  //   const authors = Array.from(entries[i].getElementsByTagName('author')).map(author => author.getElementsByTagName('name')[0].textContent);\n\n\n  //   const articleTitleItem = document.createElement('li');\n  //   const articleTitleButton = document.createElement('button');\n  //   articleTitleButton.textContent = title;\n  //   articleTitleButton.addEventListener('click', () => displayAuthors(authors, articleTitleItem));\n\n  //   articleTitleItem.appendChild(articleTitleButton);\n  //   articlesList.appendChild(articleTitleItem);\n    \n  // }\n\n\n\n    \n    // function displayAuthors(authors, container) {\n      //   container.innerHTML = ''; // Clear previous authors\n\n      //   const authorsList = document.createElement('ul');\n      //   authors.forEach(author => {\n      //     const authorItem = document.createElement('li');\n      //     authorItem.textContent = author;\n      //     authorsList.appendChild(authorItem);\n      //   });\n    \n // function displayAuthors(authors, container) {\n      //   container.innerHTML = ''; // Clear previous authors\n  \n      //   const authorsList = document.createElement('ul');\n      //   authorsList.classList.add('authors-list');\n      //   authors.forEach(author => {\n      //     const authorItem = document.createElement('li');\n      //     const authorButton = document.createElement('button');\n      //     authorButton.textContent = author;\n      //     authorButton.addEventListener('click', () => displayAuthorStats(author));\n  \n      //     authorItem.appendChild(authorButton);\n      //     authorsList.appendChild(authorItem);\n      //   });\n  \n      //   container.appendChild(authorsList);\n      // }\n      ","\n\nexport function displayAuthorStats(author) {\n  const heatmapContainer = document.getElementById('heatmapContainer');\n  heatmapContainer.innerHTML = ''; // Clear previous article details\n\n\n  const loadingIndicator = document.createElement('div');\n  loadingIndicator.classList.add('loading-indicator')\n  loadingIndicator.textContent = 'Loading Data...';\n  heatmapContainer.appendChild(loadingIndicator);\n\n  fetch(`https://export.arxiv.org/api/query?search_query=au:${author}&max_results=2000`, {\n    method: 'GET'\n  })\n    .then(response => response.text())\n    .then(data => {\n      // Process the response data\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(data, 'text/xml');\n      const entries = xmlDoc.getElementsByTagName('entry');\n      const publishedYears = Array.from(entries).map(entry => {\n        const publishedDate = entry.getElementsByTagName('published')[0].textContent;\n        return new Date(publishedDate).getFullYear();\n      });\n\n      const yearsCount = {};\n      publishedYears.forEach(year => {\n        yearsCount[year] = (yearsCount[year] || 0) + 1;\n      });\n\n      const years = Object.keys(yearsCount);\n      const counts = Object.values(yearsCount);\n\n      // Prepare data for the heatmap\n      const data1 = [\n        {\n          x: years,\n          y: [''],\n          z: [counts],\n          type: 'heatmap',\n          colorscale: 'Viridis',\n          showscale: true,\n          hovertemplate: `<b>Year: %{x}</b><br>Author: ${author}<br>Articles: %{z}`,\n          colorbar: {\n            tickfont: {\n              color: 'white' // Change the color of the numbers on the gradient scale here\n            }\n          }\n        }\n      ];\n\n      // Define layout options for the heatmap\n      const layout = {\n        title: {\n          text: `# of ${author}'s Publications over the Past Years`,\n          font: {\n            family: 'Arial, sans-serif', // Change this to your desired font family\n            size: 18, // Change this to your desired font size\n            color: 'white' // Change this to your desired font color\n          }\n        },\n        xaxis: {\n          title: {\n            text: 'Year',\n            font: {\n              family: 'Arial, sans-serif', // Change this to your desired font family\n              size: 18, // Change this to your desired font size\n              color: 'white' // Change this to your desired font color\n            }\n          },\n          tickfont: {\n            color: 'white'\n          },\n        },\n        yaxis: {\n          title: {\n            text: `${author}`,\n            font: {\n              family: 'Arial, sans-serif', // Change this to your desired font family\n              size: 18, // Change this to your desired font size\n              color: 'white' // Change this to your desired font color\n            }\n          },\n          tickfont: {\n            color: 'white'\n          },\n        },\n        plot_bgcolor: 'rgb(38, 48, 90)',// Change this color to your desired background color\n        paper_bgcolor: 'rgb(38, 48, 90)'\n      };\n\n      heatmapContainer.removeChild(loadingIndicator);\n\n      // Plot the heatmap using Plotly\n      Plotly.newPlot('heatmapContainer', data1, layout);\n      \n    })\n    .catch(error => {\n      console.error('Error:', error);\n      loadingIndicator.remove();\n    });\n}","// import searchBar from './src/searchBar.js'\nimport {fetchPhysics} from './physics.js';\nimport {fetchEconomics} from './economics.js';\nimport {fetchMath} from './math.js';\nimport {fetchComputerScience} from './cs.js';\nimport {fetchElectricalEngineering} from './electricalengineering.js';\nimport {fetchStatistics} from './statistics.js';\nimport {fetchQuantBio} from './quantBio.js';\nimport {fetchQuantFinance} from './quantFinance.js';\nimport { handleSubmit } from './searchBar.js';\n\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    console.log(\"its working\");\n\n    document.getElementById('economicsButton').addEventListener('click', function() {\n      \n      fetchEconomics();\n    });\n\n    document.getElementById('mathButton').addEventListener('click', function() {\n      \n      fetchMath();\n    });\n\n    document.getElementById('csButton').addEventListener('click', function() {\n      fetchComputerScience();\n    });\n\n    document.getElementById('physicsButton').addEventListener('click', function() {\n      fetchPhysics();\n    });\n\n    document.getElementById('eeButton').addEventListener('click', function() {\n      fetchElectricalEngineering();\n    });\n\n    document.getElementById('statsButton').addEventListener('click', function() {\n      fetchStatistics();\n    });\n\n    document.getElementById('quantBioButton').addEventListener('click', function() {\n      fetchQuantBio();\n    });\n  \n    document.getElementById('quantFinanceButton').addEventListener('click', function() {\n      fetchQuantFinance();\n    });\n\n\n    document.getElementById('search-button').addEventListener('submit', function() {\n      handleSubmit();\n    });\n\n    \n    init(); \n  \n    \n  \n  });\n\n  function init() {\n    // Add event listener to the form\n    const form = document.getElementById('search-form');\n    form.addEventListener('submit', handleSubmit);\n  \n    // Add event listener to the search button\n    const searchButton = document.getElementById('search-button');\n    searchButton.addEventListener('click', handleSubmit);\n  }\n\n \n\n\n  ","import { createBarChart } from \"./barChart\";\n\nexport function fetchEconomics() {\n    \n    const economicsCategories = ['econ.EM', 'econ.GN', 'econ.TH']; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    economicsCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === economicsCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            const fullCategoryNames = ['Econometrics', 'General Economics', 'Theoretical Economics'];\n            createBarChart(economicsCategories, totalResults, totalArticleCount, fullCategoryNames);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n\n    \n\n\n\n// function createBarChart(categories, totalResults) {\n//     const ctx = document.getElementById('econChart').getContext('2d');\n    \n//     new Chart(ctx, {\n//       type: 'bar',\n//       data: {\n//         labels: categories,\n//         datasets: [{\n//           label: 'Total Results',\n//           data: totalResults,\n//           backgroundColor: 'rgba(75, 192, 192, 0.6)',\n//           borderColor: 'rgba(75, 192, 192, 1)',\n//           borderWidth: 1\n//         }]\n//       },\n//       options: {\n//         responsive: true,\n//         scales: {\n//           y: {\n//             beginAtZero: true,\n//             title: {\n//               display: true,\n//               text: 'Total Results'\n//             }\n//           },\n//           x: {\n//             title: {\n//               display: true,\n//               text: 'Categories'\n//             }\n//           }\n//         }\n//       }\n//     });\n//   }        \n  \n\n            \n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\nexport function fetchMath() {\n    \n    const mathCategories = [\"math.AC\",\n            \"math.AG\",\n            \"math.AP\",\n            \"math.AT\",\n            \"math.CA\",\n            \"math.CO\",\n            \"math.CT\",\n            \"math.CV\",\n            \"math.DG\",\n            \"math.DS\",\n            \"math.FA\",\n            \"math.GM\",\n            \"math.GN\",\n            \"math.GR\",\n            \"math.GT\",\n            \"math.H\",\n            \"math.IT\",\n            \"math.KT\",\n            \"math.LO\",\n            \"math.MG\",\n            \"math.MP\",\n            \"math.NA\",\n            \"math.NT\",\n            \"math.OA\",\n            \"math.OC\",\n            \"math.PR\",\n            \"math.QA\",\n            \"math.RA\",\n            \"math.RT\",\n            \"math.S\",\n            \"math.SP\",\n            \"math.ST\"]; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    mathCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n      \n      \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === mathCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            const fullCategoryNames = [\"Commutative Algebra\",\n            \"Algebraic Geometry\",\n            \"Analysis of PDEs\",\n            \"Algebraic Topology\",\n            \"Classical Analysis and ODEs\",\n            \"Combinatorics\",\n            \"Category Theory\",\n            \"Complex Variables\",\n            \"Differential Geometry\",\n            \"Dynamical Systems\",\n            \"Functional Analysis\",\n            \"General Mathematics\",\n            \"General Topology\",\n            \"Group Theory\",\n            \"Geometric Topology\",\n            \"History and Overview\",\n            \"Information Theory\",\n            \"K-Theory and Homology\",\n            \"Logic\",\n            \"Metric Geometry\",\n            \"Mathematical Physics\",\n            \"Numerical Analysis\",\n            \"Number Theory\",\n            \"Operator Algebras\",\n            \"Optimization and Control\",\n            \"Probability\",\n            \"Quantum Algebra\",\n            \"Rings and Algebras\",\n            \"Representation Theory\",\n            \"Symplectic Geometry\",\n            \"Spectral Theory\",\n            \"Statistics Theory\"\n          ];\n\n            createBarChart(mathCategories, totalResults, totalArticleCount, fullCategoryNames);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n\n            \n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\n\nexport function fetchComputerScience() {\n    \n    const csCategories = ['cs.AI', 'cs.AR', 'cs.CC', 'cs.CE', 'cs.CG',\n        'cs.CL', 'cs.CR', 'cs.CV', 'cs.CY', 'cs.DB',\n        'cs.DC', 'cs.DL', 'cs.DM', 'cs.DS', 'cs.ET',\n        'cs.FL', 'cs.GL', 'cs.GR', 'cs.GT', 'cs.HC',\n        'cs.IR', 'cs.IT', 'cs.LG', 'cs.LO', 'cs.MA',\n        'cs.MM', 'cs.MS', 'cs.NA', 'cs.NE', 'cs.NI',\n        'cs.OH', 'cs.OS', 'cs.PF', 'cs.PL', 'cs.RO',\n        'cs.SC', 'cs.SD', 'cs.SE', 'cs.SI', 'cs.SY']; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    csCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === csCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            const fullCategoryNames = [\n                \"Artificial Intelligence\",\n                \"Hardware Architecture\",\n                \"Computational Complexity\",\n                \"Computational Engineering, Finance, and Science\",\n                \"Computational Geometry\",\n                \"Computation and Language\",\n                \"Cryptography and Security\",\n                \"Computer Vision and Pattern Recognition\",\n                \"Computers and Society\",\n                \"Databases\",\n                \"Distributed, Parallel, and Cluster Computing\",\n                \"Digital Libraries\",\n                \"Discrete Mathematics\",\n                \"Data Structures and Algorithms\",\n                \"Emerging Technologies\",\n                \"Formal Languages and Automata Theory\",\n                \"General Literature\",\n                \"Graphics\",\n                \"Computer Science and Game Theory\",\n                \"Human-Computer Interaction\",\n                \"Information Retrieval\",\n                \"Information Theory\",\n                \"Machine Learning\",\n                \"Logic in Computer Science\",\n                \"Multiagent Systems\",\n                \"Multimedia\",\n                \"Mathematical Software\",\n                \"Numerical Analysis\",\n                \"Neural and Evolutionary Computing\",\n                \"Networking and Internet Architecture\",\n                \"Other Computer Science\",\n                \"Operating Systems\",\n                \"Performance\",\n                \"Programming Languages\",\n                \"Robotics\",\n                \"Symbolic Computation\",\n                \"Sound\",\n                \"Software Engineering\",\n                \"Social and Information Networks\",\n                \"Systems and Control\"]\n            createBarChart(csCategories, totalResults, totalArticleCount, fullCategoryNames);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n\n\n            \n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\nexport function fetchPhysics() {\n    console.log('Physics')\n    const physicsCategories = ['astro-ph.CO', 'astro-ph.EP', 'astro-ph.GA', 'astro-ph.HE', 'astro-ph.IM', 'astro-ph.SR', 'cond-mat.dis-nn', 'cond-mat.mes-hall', 'cond-mat.mtrl-sci', 'cond-mat.other', 'cond-mat.quant-gas', 'cond-mat.soft', 'cond-mat.stat-mech','cond-mat.str-el', 'cond-mat.supr-con', 'gr-qc',  'hep-ex', 'hep-lat', 'hep-ph', 'hep-th', 'math-ph', 'nlin.AO', 'nlin.CD', 'nlin.CG', 'nlin.PS', 'nlin.SI', 'nucl-ex', 'nucl-th', 'physics.acc-ph', 'physics.ao-ph', 'physics.app-ph', 'physics.atm-clus', 'physics.atom-ph', 'physics.bio-ph', 'physics.chem-ph', 'physics.class-ph', 'physics.comp-ph', 'physics.data-an', 'physics.ed-ph', 'physics.flu-dyn', 'physics.gen-ph', 'physics.geo-ph', 'physics.hist-ph', 'physics.ins-det', 'physics.med-ph', 'physics.optics', 'physics.plasm-ph', 'physics.pop-ph', 'physics.soc-ph', 'physics.space-ph', 'quant-ph']; \n\n\n    let totalResults = [];\n    \n    // Fetch total results for each category\n    physicsCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n\n      \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === physicsCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            const fullCategoryNames = [  \"Cosmology and Nongalactic Astrophysics\",\n            \"Earth and Planetary Astrophysics\",\n            \"Astrophysics of Galaxies\",\n            \"High Energy Astrophysical Phenomena\",\n            \"Instrumentation and Methods for Astrophysics\",\n            \"Solar and Stellar Astrophysics\",\n            \"Disordered Systems and Neural Networks\",\n            \"Mesoscale and Nanoscale Physics\",\n            \"Materials Science\",\n            \"Other Condensed Matter\",\n            \"Quantum Gases\",\n            \"Soft Condensed Matter\",\n            \"Statistical Mechanics\",\n            \"Strongly Correlated Electrons\",\n            \"Superconductivity\",  \n            \"General Relativity and Quantum Cosmology\",\n            \"High Energy Physics - Experiment\",\n            \"High Energy Physics - Lattice\",\n            \"High Energy Physics - Phenomenology\",\n            \"High Energy Physics - Theory\",\n            \"Mathematical Physics\",\n            \"Adaptation and Self-Organizing Systems\",\n            \"Chaotic Dynamics\",\n            \"Cellular Automata and Lattice Gases\",\n            \"Pattern Formation and Solitons\",\n            \"Exactly Solvable and Integrable Systems\",\n            \"Nuclear Experiment\",\n            \"Nuclear Theory\",\n            \"Accelerator Physics\",\n            \"Atmospheric and Oceanic Physics\",\n            \"Applied Physics\",\n            \"Atomic and Molecular Clusters\",\n            \"Atomic Physics\",\n            \"Biological Physics\",\n            \"Chemical Physics\",\n            \"Classical Physics\",\n            \"Computational Physics\",\n            \"Data Analysis, Statistics and Probability\",\n            \"Physics Education\",\n            \"Fluid Dynamics\",\n            \"General Physics\",\n            \"Geophysics\",\n            \"History and Philosophy of Physics\",\n            \"Instrumentation and Detectors\",\n            \"Medical Physics\",\n            \"Optics\",\n            \"Plasma Physics\",\n            \"Popular Physics\",\n            \"Physics and Society\",\n            \"Space Physics\",\n            \"Quantum Physics\"\n            ];\n            createBarChart(physicsCategories, totalResults, totalArticleCount, fullCategoryNames);\n        }\n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n// totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 20000);\n// }\n\n\n// for visualizations \n\n\n\n\n\n\n//   \n// fetch('https://export.arxiv.org/api/query?search_query=cat:physics.acc-ph')\n//   .then(function(response) {\n//     return response.text();\n//   })\n//   .then(function(responseText) {\n//     // Parse the XML response\n//     const parser = new DOMParser();\n//     const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n    \n//     // Extract the total results\n//     const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n//     const totalResults = totalResultsElement.textContent;\n    \n//     // Handle successful response\n//     console.log('Total Results:', totalResults);\n//   })\n//   .catch(function(error) {\n//     // Handle error\n//     console.log('Error:', error);\n//   });\n","import { createBarChart } from \"./barChart\";\n\n\nexport function fetchElectricalEngineering() {\n    \n    const eeCategories = [\"eess.AS\", \"eess.IV\", \"eess.SP\", \"eess.SY\"]; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    eeCategories.forEach(function(category) {\n        const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === eeCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            const fullCategoryNames = [\"Audio and Speech Processing\",\n            \"Image and Video Processing\",\n            \"Signal Processing\",\n            \"Systems and Control\"]\n            createBarChart(eeCategories, totalResults, totalArticleCount, fullCategoryNames);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n\n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\n\nexport function fetchStatistics() {\n    \n    const statsCategories = ['stat.AP', 'stat.CO', 'stat.ME', 'stat.ML', 'stat.OT', 'stat.TH']; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    statsCategories.forEach(function(category) {\n        const apiUrl = `http://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === statsCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            const fullCategoryNames = [  \"Applications\",\n            \"Computation\",\n            \"Methodology\",\n            \"Machine Learning\",\n            \"Other Statistics\",\n            \"Statistics Theory\"];\n            createBarChart(statsCategories, totalResults, totalArticleCount, fullCategoryNames);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n      \n","import { createBarChart } from \"./barChart\";\n\nexport function fetchQuantBio() {\n    \n    const qBioCategories = [\n            \"q-bio.BM\",\n            \"q-bio.CB\",\n            \"q-bio.GN\",\n            \"q-bio.MN\",\n            \"q-bio.NC\",\n            \"q-bio.O\",\n            \"q-bio.PE\",\n            \"q-bio.QM\",\n            \"q-bio.SC\",\n            \"q-bio.TO\"]; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    qBioCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n         \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n            \n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === qBioCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            const fullCategoryNames = [ \"Biomolecules\",\n            \"Cell Behavior\",\n            \"Genomics\",\n            \"Molecular Networks\",\n            \"Neurons and Cognition\",\n            \"Other Quantitative Biology\",\n            \"Populations and Evolution\",\n            \"Quantitative Methods\",\n            \"Subcellular Processes\",\n            \"Tissues and Organs\"];\n            createBarChart(qBioCategories, totalResults, totalArticleCount, fullCategoryNames);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n\n\n\n\n\n   \n\n//             totalSum += totalResults;\n            \n//             // Handle individual category total results\n//             // console.log(`Total Results for ${category}:`, totalResults);\n//         })\n//         .catch(function(error) {\n//             // Handle error\n//             console.log(`Error fetching ${category} results:`, error);\n//         });\n//     });\n    \n//     // Handle total sum of all categories\n//     setTimeout(function() {\n//         console.log('Total Sum of Results:', totalSum);\n//     }, 10000);\n// }","import { createBarChart } from \"./barChart\";\n\nexport function fetchQuantFinance() {\n    \n    const qFinanceCategories = [\"q-fin.CP\",\n            \"q-fin.EC\",\n            \"q-fin.GN\",\n            \"q-fin.MF\",\n            \"q-fin.PM\",\n            \"q-fin.PR\",\n            \"q-fin.RM\",\n            \"q-fin.ST\",\n            \"q-fin.TR\"]; \n    let totalResults = [];\n    \n    // Fetch total results for each category\n    qFinanceCategories.forEach(function(category) {\n      const apiUrl = `https://export.arxiv.org/api/query?search_query=cat:${category}&start=0&max_results=1`;\n        \n        \n        fetch(apiUrl)\n        .then(function(response) {\n            return response.text();\n        })\n        .then(function(responseText) {\n            const parser = new DOMParser();\n            const xmlDoc = parser.parseFromString(responseText, 'text/xml');\n            \n            const totalResultsElement = xmlDoc.getElementsByTagName('opensearch:totalResults')[0];\n            const totalResult = parseInt(totalResultsElement.textContent);\n\n            totalResults.push(totalResult);\n            console.log(totalResults)\n      \n// Call the function to create the bar chart after all categories have been fetched\n        if (totalResults.length === qFinanceCategories.length) {\n            const totalArticleCount = totalResults.reduce((acc, curr) => acc + curr, 0);\n            const fullCategoryNames = [ \"Computational Finance\",\n            \"Economics\",\n            \"General Finance\",\n            \"Mathematical Finance\",\n            \"Portfolio Management\",\n            \"Pricing of Securities\",\n            \"Risk Management\",\n            \"Statistical Finance\",\n            \"Trading and Market Microstructure\"];\n            createBarChart(qFinanceCategories, totalResults, totalArticleCount, fullCategoryNames);\n        } \n        })\n        .catch(function(error) {\n        console.log('Error:', error);\n        });\n    });\n}\n            \n\n\n            \n"],"names":["createBarChart","categories","totalResults","totalArticleCount","fullCategoryNames","data","x","y","type","marker","color","line","width","text","hovertemplate","document","getElementById","innerHTML","totalArticleCountDiv","totalArticleCountButton","createElement","textContent","classList","add","appendChild","Plotly","newPlot","title","font","family","size","xaxis","tickfont","yaxis","plot_bgcolor","paper_bgcolor","handleSubmit","event","preventDefault","searchTerm","value","fetch","method","then","response","xmlDoc1","DOMParser","parseFromString","totalResultsElement","getElementsByTagName","totalResult","parseInt","resultsDiv","totalResultsEle","entries","displayArticleDetails","authors","summary","articleDetailsContainer","authorsList","forEach","author","authorItem","authorButton","addEventListener","heatmapContainer","loadingIndicator","publishedYears","Array","from","map","entry","publishedDate","Date","getFullYear","yearsCount","year","data1","Object","keys","z","values","colorscale","showscale","colorbar","layout","removeChild","catch","error","console","remove","displayAuthorStats","summaryHeading","summaryElement","authorsHeading","existingArticleDetailsContainer","querySelector","articlesList","authorsListContainer","i","length","articleTitleItem","articleTitleButton","log","economicsCategories","category","responseText","push","reduce","acc","curr","fetchEconomics","mathCategories","fetchMath","csCategories","fetchComputerScience","physicsCategories","fetchPhysics","eeCategories","fetchElectricalEngineering","statsCategories","fetchStatistics","qBioCategories","fetchQuantBio","qFinanceCategories","fetchQuantFinance"],"sourceRoot":""}